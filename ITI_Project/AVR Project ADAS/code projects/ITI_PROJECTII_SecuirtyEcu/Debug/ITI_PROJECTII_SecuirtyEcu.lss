
ITI_PROJECTII_SecuirtyEcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00004e16  00004eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005f  008001b4  008001b4  00004ffe  2**0
                  ALLOC
  3 .stab         000047b8  00000000  00000000  00005000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bf1  00000000  00000000  000097b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000b3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000b569  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000b779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000de03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000f2e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001058c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001076c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00010a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__vector_1>
       8:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__vector_2>
       c:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__vector_3>
      10:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_4>
      14:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_10>
      2c:	0c 94 27 26 	jmp	0x4c4e	; 0x4c4e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <main>
      8a:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 26 	jmp	0x4d0a	; 0x4d0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 26 	jmp	0x4d0a	; 0x4d0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e8       	ldi	r22, 0x86	; 134
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e2 57       	subi	r30, 0x72	; 114
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <UART_INIT>:

#include "UART.h"
void UART_INIT(uint16_t UBRR)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_INIT+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8_t)(UBRR>>8);	/* ERROR_1!! IT WAS --> (uint8_t)(UBRR)>>8 SO I LOST THE UPPER 4 BITS */
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	89 2f       	mov	r24, r25
     ea6:	99 27       	eor	r25, r25
     ea8:	80 83       	st	Z, r24
	UBRRL = (uint8_t)UBRR;
     eaa:	e9 e2       	ldi	r30, 0x29	; 41
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	80 83       	st	Z, r24

	/* Enable TX & RX */
	UCSRB |= (1<<RXEN) | (1<<TXEN) ;
     eb2:	aa e2       	ldi	r26, 0x2A	; 42
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e2       	ldi	r30, 0x2A	; 42
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 61       	ori	r24, 0x18	; 24
     ebe:	8c 93       	st	X, r24
	/* Default : ASYNC mode */
	UCSRC &= ~(1<<UMSEL);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 7b       	andi	r24, 0xBF	; 191
     ecc:	8c 93       	st	X, r24
	 	 	 	 	 	 	 /* SERIOUS !! */
	/* use register : 0x20 as UCSRC not UBBRH  as they have same register address*/
	UCSRC |= (1<<URSEL);
     ece:	a0 e4       	ldi	r26, 0x40	; 64
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 68       	ori	r24, 0x80	; 128
     eda:	8c 93       	st	X, r24
	/* 8-bit-data length (Char size) */
	UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
     edc:	a0 e4       	ldi	r26, 0x40	; 64
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e0 e4       	ldi	r30, 0x40	; 64
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	86 60       	ori	r24, 0x06	; 6
     ee8:	8c 93       	st	X, r24
	UCSRB &= ~(1<<UCSZ2);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
	/* Default : one stop bit selected */
	UCSRC &= ~(1<<USBS);		/* ERROR_2 !! IT WAS UCSRB (TXEN) !! */
     ef8:	a0 e4       	ldi	r26, 0x40	; 64
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e0 e4       	ldi	r30, 0x40	; 64
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	8c 93       	st	X, r24
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_TRANSMIT>:

void UART_TRANSMIT(uint8_t data)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
	/* Check for buffer to be empty (from a previous transmitted data) */
	while(!(UCSRA & (1<<UDRE))); /* as long as it is 0  -- break when it is not 0*/
     f1c:	eb e2       	ldi	r30, 0x2B	; 43
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	80 72       	andi	r24, 0x20	; 32
     f28:	90 70       	andi	r25, 0x00	; 0
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	b9 f3       	breq	.-18     	; 0xf1c <UART_TRANSMIT+0xc>
	/* AND it's cleared when there is any data */
	UDR = data;
     f2e:	ec e2       	ldi	r30, 0x2C	; 44
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	80 83       	st	Z, r24
}
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <UART_RECIEV>:

uint8_t UART_RECIEV (void)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	/* Wait until recieving completes */
	while(!(UCSRA & (1<<RXC)));
     f46:	eb e2       	ldi	r30, 0x2B	; 43
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	dc f7       	brge	.-10     	; 0xf46 <UART_RECIEV+0x8>
	UCSRA |= (1<<RXC); /* Clear it as no ISR */
     f50:	ab e2       	ldi	r26, 0x2B	; 43
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	eb e2       	ldi	r30, 0x2B	; 43
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 68       	ori	r24, 0x80	; 128
     f5c:	8c 93       	st	X, r24
	return UDR;
     f5e:	ec e2       	ldi	r30, 0x2C	; 44
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <UART_TRANSMIT_STRING>:

void UART_TRANSMIT_STRING(uint8_t* str)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <UART_TRANSMIT_STRING+0x6>
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	9b 83       	std	Y+3, r25	; 0x03
     f78:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <UART_TRANSMIT_STRING+0x30>
	while(str[i] != 0)
	{
		UART_TRANSMIT(str[i]);
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	9b 81       	ldd	r25, Y+3	; 0x03
     f88:	fc 01       	movw	r30, r24
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	80 81       	ld	r24, Z
     f90:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_TRANSMIT>
		i++;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	89 83       	std	Y+1, r24	; 0x01
}

void UART_TRANSMIT_STRING(uint8_t* str)
{
	uint8_t i = 0;
	while(str[i] != 0)
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	fc 01       	movw	r30, r24
     fa6:	e2 0f       	add	r30, r18
     fa8:	f3 1f       	adc	r31, r19
     faa:	80 81       	ld	r24, Z
     fac:	88 23       	and	r24, r24
     fae:	39 f7       	brne	.-50     	; 0xf7e <UART_TRANSMIT_STRING+0x14>
	{
		UART_TRANSMIT(str[i]);
		i++;
	}
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <MTimer_voidInt>:
static u32 G_u32CountsForSecondRising = 0 ; /*number of counts until arrived to second rising of input signal*/
static u32 G_u32FrequancyOfTimeOn     = 0 ; /*counts of (time on) range */
static u32 G_u32FrequancyOfTimeTotal  = 0 ; /*counts of (time total) range */

void MTimer_voidInt (void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62

	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
     fc4:	af e5       	ldi	r26, 0x5F	; 95
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e5       	ldi	r30, 0x5F	; 95
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	8c 93       	st	X, r24
	    #if   TIMER0_PRESCALER == CLK_PS_1          /**clk = 8MHZ    */
		    SET_BIT(TCCR0 , CS00) ;
	        CLR_BIT(TCCR0 , CS01) ;
	        CLR_BIT(TCCR0 , CS02) ;
	    #elif TIMER0_PRESCALER == CLK_PS_8          /**clk = 1MHZ    */
			CLR_BIT(TCCR0 , CS00) ;
     fd2:	a3 e5       	ldi	r26, 0x53	; 83
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e3 e5       	ldi	r30, 0x53	; 83
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	8c 93       	st	X, r24
	        SET_BIT(TCCR0 , CS01) ;
     fe0:	a3 e5       	ldi	r26, 0x53	; 83
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e3 e5       	ldi	r30, 0x53	; 83
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	8c 93       	st	X, r24
	        CLR_BIT(TCCR0 , CS02) ;
     fee:	a3 e5       	ldi	r26, 0x53	; 83
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e3 e5       	ldi	r30, 0x53	; 83
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	8c 93       	st	X, r24
		#else #error "select correct options of TIMER0_PRESCALER"
		#endif

		/**Timer/counter0 mode*/
		#if   TIMER0_MODE == NORMAL_MODE
		    CLR_BIT(TCCR0 , WGM00) ;/*Normal mode (over flow mode)*/
     ffc:	a3 e5       	ldi	r26, 0x53	; 83
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e3 e5       	ldi	r30, 0x53	; 83
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8f 7b       	andi	r24, 0xBF	; 191
    1008:	8c 93       	st	X, r24
		    CLR_BIT(TCCR0 , WGM01) ;
    100a:	a3 e5       	ldi	r26, 0x53	; 83
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e3 e5       	ldi	r30, 0x53	; 83
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	87 7f       	andi	r24, 0xF7	; 247
    1016:	8c 93       	st	X, r24
			SET_BIT(TIMSK , TOIE0);/*Enable interrupt of over flow mode*/
    1018:	a9 e5       	ldi	r26, 0x59	; 89
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e9 e5       	ldi	r30, 0x59	; 89
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	81 60       	ori	r24, 0x01	; 1
    1024:	8c 93       	st	X, r24
			MDIO_voidSetPinDir (DIO_PORTB , DIO_PIN3 , DIO_HIGH) ; /*set OC2 pin as output*/
		#else #error "select correct mode of TIMER2_MODE"
		#endif
	#elif TIMER2 == DISABLE2
	/** NO clk source (Timer2 stopped) */
	    CLR_BIT(TCCR2 , CS20) ;
    1026:	a5 e4       	ldi	r26, 0x45	; 69
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e4       	ldi	r30, 0x45	; 69
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2 , CS21) ;
    1034:	a5 e4       	ldi	r26, 0x45	; 69
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e4       	ldi	r30, 0x45	; 69
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2 , CS22) ;
    1042:	a5 e4       	ldi	r26, 0x45	; 69
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e5 e4       	ldi	r30, 0x45	; 69
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	8c 93       	st	X, r24
		#else #error "select correct options of TIMER1_MODE"
		#endif

	#elif TIMER1 == DISABLE1
	/** NO clk source (Timer1 stopped) */
	    CLR_BIT(TCCR1B , CS10) ;
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	8c 93       	st	X, r24
	    CLR_BIT(TCCR1B , CS11) ;
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8d 7f       	andi	r24, 0xFD	; 253
    106a:	8c 93       	st	X, r24
	    CLR_BIT(TCCR1B , CS12) ;
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
	#else #error "TIMER1 must be ENABLE1 or DISABLE1"
	#endif
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <MTimer_voidSetDisiredTime>:

void MTimer_voidSetDisiredTime (u8 A_u8TimerID , f32 A_f32DisiredTime , void (*A_fptr)(void) )
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	6f 97       	sbiw	r28, 0x1f	; 31
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	89 8f       	std	Y+25, r24	; 0x19
    1096:	4a 8f       	std	Y+26, r20	; 0x1a
    1098:	5b 8f       	std	Y+27, r21	; 0x1b
    109a:	6c 8f       	std	Y+28, r22	; 0x1c
    109c:	7d 8f       	std	Y+29, r23	; 0x1d
    109e:	3f 8f       	std	Y+31, r19	; 0x1f
    10a0:	2e 8f       	std	Y+30, r18	; 0x1e
	if (A_u8TimerID == TIMER0)
    10a2:	89 8d       	ldd	r24, Y+25	; 0x19
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <MTimer_voidSetDisiredTime+0x2a>
    10a8:	27 c1       	rjmp	.+590    	; 0x12f8 <MTimer_voidSetDisiredTime+0x278>
			  ** OverFlowTime       = (2^resolution) * Prescaller / system frequancy
			  ** OverFlowCount      = DisiredTime / OverFlowTime
			  ** NumberOfTimerCount = OverFlowCount * (2^resolution)
			  ** PreloadValue       = (2^resolution) - NumberOfTimerCount
			*/
		    f32 L_f32OverFlowTime        = 256 ;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e8       	ldi	r26, 0x80	; 128
    10b0:	b3 e4       	ldi	r27, 0x43	; 67
    10b2:	8d 8b       	std	Y+21, r24	; 0x15
    10b4:	9e 8b       	std	Y+22, r25	; 0x16
    10b6:	af 8b       	std	Y+23, r26	; 0x17
    10b8:	b8 8f       	std	Y+24, r27	; 0x18
	        f32 L_f32OverFlowCount       = 0 ;
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	89 8b       	std	Y+17, r24	; 0x11
    10c4:	9a 8b       	std	Y+18, r25	; 0x12
    10c6:	ab 8b       	std	Y+19, r26	; 0x13
    10c8:	bc 8b       	std	Y+20, r27	; 0x14
	        u16  L_u16NumberOfTimerCount = 256 ;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	        u16  L_u16PreloadValue       = 0 ;		/*** Should be global to reuse it again in ISR
    10d2:	1e 86       	std	Y+14, r1	; 0x0e
    10d4:	1d 86       	std	Y+13, r1	; 0x0d
	         	 	 	 	 	 	 	 	 	 	 	 	to re-initialize TCNT0 	 ***/

	        L_f32OverFlowTime  = L_f32OverFlowTime * TIMER0_PRESCALER ;
    10d6:	6d 89       	ldd	r22, Y+21	; 0x15
    10d8:	7e 89       	ldd	r23, Y+22	; 0x16
    10da:	8f 89       	ldd	r24, Y+23	; 0x17
    10dc:	98 8d       	ldd	r25, Y+24	; 0x18
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	51 e4       	ldi	r21, 0x41	; 65
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8d 8b       	std	Y+21, r24	; 0x15
    10f0:	9e 8b       	std	Y+22, r25	; 0x16
    10f2:	af 8b       	std	Y+23, r26	; 0x17
    10f4:	b8 8f       	std	Y+24, r27	; 0x18
            L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;		/* NOW, this is the OVF time */
    10f6:	6d 89       	ldd	r22, Y+21	; 0x15
    10f8:	7e 89       	ldd	r23, Y+22	; 0x16
    10fa:	8f 89       	ldd	r24, Y+23	; 0x17
    10fc:	98 8d       	ldd	r25, Y+24	; 0x18
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	34 e2       	ldi	r19, 0x24	; 36
    1102:	44 ef       	ldi	r20, 0xF4	; 244
    1104:	5a e4       	ldi	r21, 0x4A	; 74
    1106:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8d 8b       	std	Y+21, r24	; 0x15
    1110:	9e 8b       	std	Y+22, r25	; 0x16
    1112:	af 8b       	std	Y+23, r26	; 0x17
    1114:	b8 8f       	std	Y+24, r27	; 0x18
			L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;	/* more or less than one */
    1116:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1118:	7b 8d       	ldd	r23, Y+27	; 0x1b
    111a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    111c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    111e:	2d 89       	ldd	r18, Y+21	; 0x15
    1120:	3e 89       	ldd	r19, Y+22	; 0x16
    1122:	4f 89       	ldd	r20, Y+23	; 0x17
    1124:	58 8d       	ldd	r21, Y+24	; 0x18
    1126:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	89 8b       	std	Y+17, r24	; 0x11
    1130:	9a 8b       	std	Y+18, r25	; 0x12
    1132:	ab 8b       	std	Y+19, r26	; 0x13
    1134:	bc 8b       	std	Y+20, r27	; 0x14
			Timer0_Overflow_CallBack = A_fptr ;
    1136:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1138:	9f 8d       	ldd	r25, Y+31	; 0x1f
    113a:	90 93 f5 01 	sts	0x01F5, r25
    113e:	80 93 f4 01 	sts	0x01F4, r24
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    1142:	8f 85       	ldd	r24, Y+15	; 0x0f
    1144:	98 89       	ldd	r25, Y+16	; 0x10
    1146:	cc 01       	movw	r24, r24
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    115e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1160:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1162:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	98 8b       	std	Y+16, r25	; 0x10
    117a:	8f 87       	std	Y+15, r24	; 0x0f
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    117c:	8f 85       	ldd	r24, Y+15	; 0x0f
    117e:	98 89       	ldd	r25, Y+16	; 0x10
    1180:	cc 01       	movw	r24, r24
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	2d 89       	ldd	r18, Y+21	; 0x15
    1198:	3e 89       	ldd	r19, Y+22	; 0x16
    119a:	4f 89       	ldd	r20, Y+23	; 0x17
    119c:	58 8d       	ldd	r21, Y+24	; 0x18
    119e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	98 8b       	std	Y+16, r25	; 0x10
    11b4:	8f 87       	std	Y+15, r24	; 0x0f
			if (L_f32OverFlowCount < 1.0)
    11b6:	69 89       	ldd	r22, Y+17	; 0x11
    11b8:	7a 89       	ldd	r23, Y+18	; 0x12
    11ba:	8b 89       	ldd	r24, Y+19	; 0x13
    11bc:	9c 89       	ldd	r25, Y+20	; 0x14
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	dc f4       	brge	.+54     	; 0x1204 <MTimer_voidSetDisiredTime+0x184>
			{
				/* PRELOAD SITUATION ONLY */
				L_u16PreloadValue       = 256 - L_u16NumberOfTimerCount ;
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	31 e0       	ldi	r19, 0x01	; 1
    11d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d4:	98 89       	ldd	r25, Y+16	; 0x10
    11d6:	a9 01       	movw	r20, r18
    11d8:	48 1b       	sub	r20, r24
    11da:	59 0b       	sbc	r21, r25
    11dc:	ca 01       	movw	r24, r20
    11de:	9e 87       	std	Y+14, r25	; 0x0e
    11e0:	8d 87       	std	Y+13, r24	; 0x0d
				TCNT0 = L_u16PreloadValue ;
    11e2:	e2 e5       	ldi	r30, 0x52	; 82
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e8:	80 83       	st	Z, r24
				G_u32Timer0IntervalCount = 1 ;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	80 93 b4 01 	sts	0x01B4, r24
    11f6:	90 93 b5 01 	sts	0x01B5, r25
    11fa:	a0 93 b6 01 	sts	0x01B6, r26
    11fe:	b0 93 b7 01 	sts	0x01B7, r27
    1202:	94 c1       	rjmp	.+808    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
			}
			else
			{
				/* ?????????? */
				G_u32Timer0IntervalCount = (u32)L_f32OverFlowCount ;
    1204:	69 89       	ldd	r22, Y+17	; 0x11
    1206:	7a 89       	ldd	r23, Y+18	; 0x12
    1208:	8b 89       	ldd	r24, Y+19	; 0x13
    120a:	9c 89       	ldd	r25, Y+20	; 0x14
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	80 93 b4 01 	sts	0x01B4, r24
    1218:	90 93 b5 01 	sts	0x01B5, r25
    121c:	a0 93 b6 01 	sts	0x01B6, r26
    1220:	b0 93 b7 01 	sts	0x01B7, r27
				if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0) /* IF there is no pre-load */
    1224:	69 89       	ldd	r22, Y+17	; 0x11
    1226:	7a 89       	ldd	r23, Y+18	; 0x12
    1228:	8b 89       	ldd	r24, Y+19	; 0x13
    122a:	9c 89       	ldd	r25, Y+20	; 0x14
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	69 89       	ldd	r22, Y+17	; 0x11
    1242:	7a 89       	ldd	r23, Y+18	; 0x12
    1244:	8b 89       	ldd	r24, Y+19	; 0x13
    1246:	9c 89       	ldd	r25, Y+20	; 0x14
    1248:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <MTimer_voidSetDisiredTime+0x1e6>
    1264:	63 c1       	rjmp	.+710    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
				{
					L_u16NumberOfTimerCount = (u16)((L_u16NumberOfTimerCount / 256.0) * 256) ;
    1266:	8f 85       	ldd	r24, Y+15	; 0x0f
    1268:	98 89       	ldd	r25, Y+16	; 0x10
    126a:	cc 01       	movw	r24, r24
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	bc 01       	movw	r22, r24
    1272:	cd 01       	movw	r24, r26
    1274:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	53 e4       	ldi	r21, 0x43	; 67
    1288:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	53 e4       	ldi	r21, 0x43	; 67
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	98 8b       	std	Y+16, r25	; 0x10
    12b2:	8f 87       	std	Y+15, r24	; 0x0f
				    L_u16PreloadValue    = 256 - L_u16NumberOfTimerCount ;
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	31 e0       	ldi	r19, 0x01	; 1
    12b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ba:	98 89       	ldd	r25, Y+16	; 0x10
    12bc:	a9 01       	movw	r20, r18
    12be:	48 1b       	sub	r20, r24
    12c0:	59 0b       	sbc	r21, r25
    12c2:	ca 01       	movw	r24, r20
    12c4:	9e 87       	std	Y+14, r25	; 0x0e
    12c6:	8d 87       	std	Y+13, r24	; 0x0d
				    TCNT0 = L_u16PreloadValue ;
    12c8:	e2 e5       	ldi	r30, 0x52	; 82
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	80 83       	st	Z, r24
					G_u32Timer0IntervalCount ++ ;
    12d0:	80 91 b4 01 	lds	r24, 0x01B4
    12d4:	90 91 b5 01 	lds	r25, 0x01B5
    12d8:	a0 91 b6 01 	lds	r26, 0x01B6
    12dc:	b0 91 b7 01 	lds	r27, 0x01B7
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	a1 1d       	adc	r26, r1
    12e4:	b1 1d       	adc	r27, r1
    12e6:	80 93 b4 01 	sts	0x01B4, r24
    12ea:	90 93 b5 01 	sts	0x01B5, r25
    12ee:	a0 93 b6 01 	sts	0x01B6, r26
    12f2:	b0 93 b7 01 	sts	0x01B7, r27
    12f6:	1a c1       	rjmp	.+564    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
				}
			}
	    #endif
	}
	else if (A_u8TimerID == TIMER2)
    12f8:	89 8d       	ldd	r24, Y+25	; 0x19
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	09 f4       	brne	.+2      	; 0x1300 <MTimer_voidSetDisiredTime+0x280>
    12fe:	16 c1       	rjmp	.+556    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
					G_u32Timer2IntervalCount ++ ;
				}
			}
	    #endif
	}
	else if (A_u8TimerID == TIMER1)
    1300:	89 8d       	ldd	r24, Y+25	; 0x19
    1302:	86 30       	cpi	r24, 0x06	; 6
    1304:	09 f0       	breq	.+2      	; 0x1308 <MTimer_voidSetDisiredTime+0x288>
    1306:	12 c1       	rjmp	.+548    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
			  ** OverFlowTime       = (2^resolution) * Prescaller / system frequancy
			  ** OverFlowCount      = DisiredTime / OverFlowTime
			  ** NumberOfTimerCount = OverFlowCount * (2^resolution)
			  ** PreloadValue       = (2^resolution) - NumberOfTimerCount
			*/
		    f32 L_f32OverFlowTime        = 65535 ;
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	af e7       	ldi	r26, 0x7F	; 127
    130e:	b7 e4       	ldi	r27, 0x47	; 71
    1310:	89 87       	std	Y+9, r24	; 0x09
    1312:	9a 87       	std	Y+10, r25	; 0x0a
    1314:	ab 87       	std	Y+11, r26	; 0x0b
    1316:	bc 87       	std	Y+12, r27	; 0x0c
	        f32 L_f32OverFlowCount       = 0 ;
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	af 83       	std	Y+7, r26	; 0x07
    1326:	b8 87       	std	Y+8, r27	; 0x08
	        u16  L_u16NumberOfTimerCount = 65535 ;
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	9f ef       	ldi	r25, 0xFF	; 255
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
	        u16  L_u16PreloadValue       = 0 ;
    1330:	1a 82       	std	Y+2, r1	; 0x02
    1332:	19 82       	std	Y+1, r1	; 0x01

	        L_f32OverFlowTime  = L_f32OverFlowTime * TIMER1_PRESCALER ;
            L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;
    1334:	69 85       	ldd	r22, Y+9	; 0x09
    1336:	7a 85       	ldd	r23, Y+10	; 0x0a
    1338:	8b 85       	ldd	r24, Y+11	; 0x0b
    133a:	9c 85       	ldd	r25, Y+12	; 0x0c
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	34 e2       	ldi	r19, 0x24	; 36
    1340:	44 ef       	ldi	r20, 0xF4	; 244
    1342:	5a e4       	ldi	r21, 0x4A	; 74
    1344:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	89 87       	std	Y+9, r24	; 0x09
    134e:	9a 87       	std	Y+10, r25	; 0x0a
    1350:	ab 87       	std	Y+11, r26	; 0x0b
    1352:	bc 87       	std	Y+12, r27	; 0x0c
			L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;
    1354:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1356:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1358:	8c 8d       	ldd	r24, Y+28	; 0x1c
    135a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    135c:	29 85       	ldd	r18, Y+9	; 0x09
    135e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1360:	4b 85       	ldd	r20, Y+11	; 0x0b
    1362:	5c 85       	ldd	r21, Y+12	; 0x0c
    1364:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	af 83       	std	Y+7, r26	; 0x07
    1372:	b8 87       	std	Y+8, r27	; 0x08
			Timer1_Overflow_CallBack = A_fptr ;
    1374:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1376:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1378:	90 93 f7 01 	sts	0x01F7, r25
    137c:	80 93 f6 01 	sts	0x01F6, r24
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	cc 01       	movw	r24, r24
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    139c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    139e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    13a0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	cc 01       	movw	r24, r24
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	29 85       	ldd	r18, Y+9	; 0x09
    13d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    13da:	5c 85       	ldd	r21, Y+12	; 0x0c
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03
			if (L_f32OverFlowCount < 1.0)
    13f4:	6d 81       	ldd	r22, Y+5	; 0x05
    13f6:	7e 81       	ldd	r23, Y+6	; 0x06
    13f8:	8f 81       	ldd	r24, Y+7	; 0x07
    13fa:	98 85       	ldd	r25, Y+8	; 0x08
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	cc f4       	brge	.+50     	; 0x143e <MTimer_voidSetDisiredTime+0x3be>
			{
				L_u16PreloadValue       = 65535 - L_u16NumberOfTimerCount ;
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	80 95       	com	r24
    1412:	90 95       	com	r25
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01
				TCNT1 = L_u16PreloadValue ;
    1418:	ec e4       	ldi	r30, 0x4C	; 76
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	80 83       	st	Z, r24
				G_u32Timer1IntervalCount = 1 ;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	80 93 cc 01 	sts	0x01CC, r24
    1430:	90 93 cd 01 	sts	0x01CD, r25
    1434:	a0 93 ce 01 	sts	0x01CE, r26
    1438:	b0 93 cf 01 	sts	0x01CF, r27
    143c:	77 c0       	rjmp	.+238    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
			}
			else
			{
				G_u32Timer1IntervalCount = (u32)L_f32OverFlowCount ;
    143e:	6d 81       	ldd	r22, Y+5	; 0x05
    1440:	7e 81       	ldd	r23, Y+6	; 0x06
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 85       	ldd	r25, Y+8	; 0x08
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	80 93 cc 01 	sts	0x01CC, r24
    1452:	90 93 cd 01 	sts	0x01CD, r25
    1456:	a0 93 ce 01 	sts	0x01CE, r26
    145a:	b0 93 cf 01 	sts	0x01CF, r27
				if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0)
    145e:	6d 81       	ldd	r22, Y+5	; 0x05
    1460:	7e 81       	ldd	r23, Y+6	; 0x06
    1462:	8f 81       	ldd	r24, Y+7	; 0x07
    1464:	98 85       	ldd	r25, Y+8	; 0x08
    1466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1476:	9b 01       	movw	r18, r22
    1478:	ac 01       	movw	r20, r24
    147a:	6d 81       	ldd	r22, Y+5	; 0x05
    147c:	7e 81       	ldd	r23, Y+6	; 0x06
    147e:	8f 81       	ldd	r24, Y+7	; 0x07
    1480:	98 85       	ldd	r25, Y+8	; 0x08
    1482:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    149a:	88 23       	and	r24, r24
    149c:	09 f4       	brne	.+2      	; 0x14a0 <MTimer_voidSetDisiredTime+0x420>
    149e:	46 c0       	rjmp	.+140    	; 0x152c <MTimer_voidSetDisiredTime+0x4ac>
				{
					L_u16NumberOfTimerCount = (u16)((L_u16NumberOfTimerCount / 65535.0) * 65535) ;
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	cc 01       	movw	r24, r24
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	3f ef       	ldi	r19, 0xFF	; 255
    14d2:	4f e7       	ldi	r20, 0x7F	; 127
    14d4:	57 e4       	ldi	r21, 0x47	; 71
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
				    L_u16PreloadValue    = 65535 - L_u16NumberOfTimerCount ;
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	80 95       	com	r24
    14f4:	90 95       	com	r25
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
				    TCNT1 = L_u16PreloadValue ;
    14fa:	ec e4       	ldi	r30, 0x4C	; 76
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
					G_u32Timer1IntervalCount ++ ;
    1506:	80 91 cc 01 	lds	r24, 0x01CC
    150a:	90 91 cd 01 	lds	r25, 0x01CD
    150e:	a0 91 ce 01 	lds	r26, 0x01CE
    1512:	b0 91 cf 01 	lds	r27, 0x01CF
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	a1 1d       	adc	r26, r1
    151a:	b1 1d       	adc	r27, r1
    151c:	80 93 cc 01 	sts	0x01CC, r24
    1520:	90 93 cd 01 	sts	0x01CD, r25
    1524:	a0 93 ce 01 	sts	0x01CE, r26
    1528:	b0 93 cf 01 	sts	0x01CF, r27
				}
			}
	    #endif
	}
}
    152c:	6f 96       	adiw	r28, 0x1f	; 31
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <MTimer_voidCtcCallBack>:

void MTimer_voidCtcCallBack (u8  A_u8TimerID , void (*A_fptr1)(void) , void (*A_fptr2)(void))
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <MTimer_voidCtcCallBack+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <MTimer_voidCtcCallBack+0x8>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	7b 83       	std	Y+3, r23	; 0x03
    1550:	6a 83       	std	Y+2, r22	; 0x02
    1552:	5d 83       	std	Y+5, r21	; 0x05
    1554:	4c 83       	std	Y+4, r20	; 0x04
	if (A_u8TimerID == TIMER0)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	39 f4       	brne	.+14     	; 0x156a <MTimer_voidCtcCallBack+0x2c>
	{
        Timer0_CTC_CallBack = A_fptr1 ;
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	90 93 fb 01 	sts	0x01FB, r25
    1564:	80 93 fa 01 	sts	0x01FA, r24
    1568:	19 c0       	rjmp	.+50     	; 0x159c <MTimer_voidCtcCallBack+0x5e>
	}
	else if (A_u8TimerID == TIMER2)
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	39 f4       	brne	.+14     	; 0x157e <MTimer_voidCtcCallBack+0x40>
	{
		Timer2_CTC_CallBack = A_fptr1 ;
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	9b 81       	ldd	r25, Y+3	; 0x03
    1574:	90 93 fd 01 	sts	0x01FD, r25
    1578:	80 93 fc 01 	sts	0x01FC, r24
    157c:	0f c0       	rjmp	.+30     	; 0x159c <MTimer_voidCtcCallBack+0x5e>
	}
	else if (A_u8TimerID == TIMER1)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	86 30       	cpi	r24, 0x06	; 6
    1582:	61 f4       	brne	.+24     	; 0x159c <MTimer_voidCtcCallBack+0x5e>
		#if   COMPARE_TYPE == COMPARE_A
		    Timer1_CTC_A_CallBack = A_fptr1 ;
		#elif COMPARE_TYPE == COMPARE_B
		    Timer1_CTC_B_CallBack = A_fptr2 ;
		#elif COMPARE_TYPE == COMPARE_BOTH
		    Timer1_CTC_A_CallBack = A_fptr1 ;
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	90 93 ff 01 	sts	0x01FF, r25
    158c:	80 93 fe 01 	sts	0x01FE, r24
			Timer1_CTC_B_CallBack = A_fptr2 ;
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	90 93 01 02 	sts	0x0201, r25
    1598:	80 93 00 02 	sts	0x0200, r24
		#endif
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <MTimer_voidSetPWM>:

void MTimer_voidSetPWM (u8  A_u8TimerID , u16 A_u16CompareValueA , u16 A_u16CompareValueB)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <MTimer_voidSetPWM+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <MTimer_voidSetPWM+0x8>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	7b 83       	std	Y+3, r23	; 0x03
    15be:	6a 83       	std	Y+2, r22	; 0x02
    15c0:	5d 83       	std	Y+5, r21	; 0x05
    15c2:	4c 83       	std	Y+4, r20	; 0x04
    if (A_u8TimerID == TIMER0)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	39 f0       	breq	.+14     	; 0x15d8 <MTimer_voidSetPWM+0x2c>
	{
		#if TIMER0_MODE == FAST_PWM_MODE || TIMER0_MODE == PWM_PHASE_CORRECT_MODE
		    OCR0 = A_u16CompareValueA ;
		#endif
	}
	else if (A_u8TimerID == TIMER2)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <MTimer_voidSetPWM+0x2c>
	{
		#if TIMER2_MODE == FAST_PWM_MODE || TIMER2_MODE == PWM_PHASE_CORRECT_MODE
	        OCR2 = A_u16CompareValueA ;
    15d0:	e3 e4       	ldi	r30, 0x43	; 67
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
			      OCR1A = A_u16CompareValueA ;
			      OCR1B = A_u16CompareValueB ;
		    #endif
		#endif
	}
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <MTimerCalcFreqofTon>:

u32 MTimerCalcFreqofTon (void)
{
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <MTimerCalcFreqofTon+0xe>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <MTimerCalcFreqofTon+0x10>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	u32 L_u32Period = 0 ;
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	1a 82       	std	Y+2, r1	; 0x02
    1600:	1b 82       	std	Y+3, r1	; 0x03
    1602:	1c 82       	std	Y+4, r1	; 0x04
	G_u32OverFlowCounts = 0 ;
    1604:	10 92 d0 01 	sts	0x01D0, r1
    1608:	10 92 d1 01 	sts	0x01D1, r1
    160c:	10 92 d2 01 	sts	0x01D2, r1
    1610:	10 92 d3 01 	sts	0x01D3, r1

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1614:	a8 e5       	ldi	r26, 0x58	; 88
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e5       	ldi	r30, 0x58	; 88
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1622:	ae e4       	ldi	r26, 0x4E	; 78
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 64       	ori	r24, 0x40	; 64
    162e:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1630:	e8 e5       	ldi	r30, 0x58	; 88
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	80 72       	andi	r24, 0x20	; 32
    163c:	90 70       	andi	r25, 0x00	; 0
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	95 95       	asr	r25
    1644:	87 95       	ror	r24
    1646:	95 95       	asr	r25
    1648:	87 95       	ror	r24
    164a:	95 95       	asr	r25
    164c:	87 95       	ror	r24
    164e:	95 95       	asr	r25
    1650:	87 95       	ror	r24
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f3       	breq	.-38     	; 0x1630 <MTimerCalcFreqofTon+0x48>
	G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1656:	e6 e4       	ldi	r30, 0x46	; 70
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	7c 01       	movw	r14, r24
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	80 91 d0 01 	lds	r24, 0x01D0
    1668:	90 91 d1 01 	lds	r25, 0x01D1
    166c:	a0 91 d2 01 	lds	r26, 0x01D2
    1670:	b0 91 d3 01 	lds	r27, 0x01D3
    1674:	2f ef       	ldi	r18, 0xFF	; 255
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	8e 0d       	add	r24, r14
    168a:	9f 1d       	adc	r25, r15
    168c:	a0 1f       	adc	r26, r16
    168e:	b1 1f       	adc	r27, r17
    1690:	80 93 d4 01 	sts	0x01D4, r24
    1694:	90 93 d5 01 	sts	0x01D5, r25
    1698:	a0 93 d6 01 	sts	0x01D6, r26
    169c:	b0 93 d7 01 	sts	0x01D7, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    16a0:	a8 e5       	ldi	r26, 0x58	; 88
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e8 e5       	ldi	r30, 0x58	; 88
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 62       	ori	r24, 0x20	; 32
    16ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect falling edge*/
    16ae:	ae e4       	ldi	r26, 0x4E	; 78
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ee e4       	ldi	r30, 0x4E	; 78
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8f 7b       	andi	r24, 0xBF	; 191
    16ba:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    16bc:	e8 e5       	ldi	r30, 0x58	; 88
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	80 72       	andi	r24, 0x20	; 32
    16c8:	90 70       	andi	r25, 0x00	; 0
    16ca:	95 95       	asr	r25
    16cc:	87 95       	ror	r24
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	95 95       	asr	r25
    16d4:	87 95       	ror	r24
    16d6:	95 95       	asr	r25
    16d8:	87 95       	ror	r24
    16da:	95 95       	asr	r25
    16dc:	87 95       	ror	r24
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f3       	breq	.-38     	; 0x16bc <MTimerCalcFreqofTon+0xd4>
	G_u32CountsForFirstFaling = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    16e2:	e6 e4       	ldi	r30, 0x46	; 70
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	7c 01       	movw	r14, r24
    16ec:	00 e0       	ldi	r16, 0x00	; 0
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	80 91 d0 01 	lds	r24, 0x01D0
    16f4:	90 91 d1 01 	lds	r25, 0x01D1
    16f8:	a0 91 d2 01 	lds	r26, 0x01D2
    16fc:	b0 91 d3 01 	lds	r27, 0x01D3
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8e 0d       	add	r24, r14
    1716:	9f 1d       	adc	r25, r15
    1718:	a0 1f       	adc	r26, r16
    171a:	b1 1f       	adc	r27, r17
    171c:	80 93 d8 01 	sts	0x01D8, r24
    1720:	90 93 d9 01 	sts	0x01D9, r25
    1724:	a0 93 da 01 	sts	0x01DA, r26
    1728:	b0 93 db 01 	sts	0x01DB, r27

	G_u32OverFlowCounts = 0 ;
    172c:	10 92 d0 01 	sts	0x01D0, r1
    1730:	10 92 d1 01 	sts	0x01D1, r1
    1734:	10 92 d2 01 	sts	0x01D2, r1
    1738:	10 92 d3 01 	sts	0x01D3, r1

	L_u32Period = G_u32CountsForFirstFaling - G_u32CountsForFirstRising ;
    173c:	20 91 d8 01 	lds	r18, 0x01D8
    1740:	30 91 d9 01 	lds	r19, 0x01D9
    1744:	40 91 da 01 	lds	r20, 0x01DA
    1748:	50 91 db 01 	lds	r21, 0x01DB
    174c:	80 91 d4 01 	lds	r24, 0x01D4
    1750:	90 91 d5 01 	lds	r25, 0x01D5
    1754:	a0 91 d6 01 	lds	r26, 0x01D6
    1758:	b0 91 d7 01 	lds	r27, 0x01D7
    175c:	79 01       	movw	r14, r18
    175e:	8a 01       	movw	r16, r20
    1760:	e8 1a       	sub	r14, r24
    1762:	f9 0a       	sbc	r15, r25
    1764:	0a 0b       	sbc	r16, r26
    1766:	1b 0b       	sbc	r17, r27
    1768:	d8 01       	movw	r26, r16
    176a:	c7 01       	movw	r24, r14
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	ab 83       	std	Y+3, r26	; 0x03
    1772:	bc 83       	std	Y+4, r27	; 0x04

	G_u32FrequancyOfTimeOn = CLOK_SYSTEM / (L_u32Period * (u32)TIMER1_PRESCALER) ;
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	92 e1       	ldi	r25, 0x12	; 18
    1778:	aa e7       	ldi	r26, 0x7A	; 122
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	29 81       	ldd	r18, Y+1	; 0x01
    177e:	3a 81       	ldd	r19, Y+2	; 0x02
    1780:	4b 81       	ldd	r20, Y+3	; 0x03
    1782:	5c 81       	ldd	r21, Y+4	; 0x04
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__udivmodsi4>
    178c:	da 01       	movw	r26, r20
    178e:	c9 01       	movw	r24, r18
    1790:	80 93 e0 01 	sts	0x01E0, r24
    1794:	90 93 e1 01 	sts	0x01E1, r25
    1798:	a0 93 e2 01 	sts	0x01E2, r26
    179c:	b0 93 e3 01 	sts	0x01E3, r27
	return G_u32FrequancyOfTimeOn ;
    17a0:	80 91 e0 01 	lds	r24, 0x01E0
    17a4:	90 91 e1 01 	lds	r25, 0x01E1
    17a8:	a0 91 e2 01 	lds	r26, 0x01E2
    17ac:	b0 91 e3 01 	lds	r27, 0x01E3

}
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret

000017ca <MTimerCalcDutyCycle>:

f32 MTimerCalcDutyCycle (void)
{
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	2c 97       	sbiw	r28, 0x0c	; 12
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32Period = 0 ;
    17e6:	19 86       	std	Y+9, r1	; 0x09
    17e8:	1a 86       	std	Y+10, r1	; 0x0a
    17ea:	1b 86       	std	Y+11, r1	; 0x0b
    17ec:	1c 86       	std	Y+12, r1	; 0x0c
	u32 L_u32High  = 0 ;
    17ee:	1d 82       	std	Y+5, r1	; 0x05
    17f0:	1e 82       	std	Y+6, r1	; 0x06
    17f2:	1f 82       	std	Y+7, r1	; 0x07
    17f4:	18 86       	std	Y+8, r1	; 0x08
	f32  L_f32Duty = 0.0 ;
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	ab 83       	std	Y+3, r26	; 0x03
    1804:	bc 83       	std	Y+4, r27	; 0x04
	G_u32OverFlowCounts = 0 ;
    1806:	10 92 d0 01 	sts	0x01D0, r1
    180a:	10 92 d1 01 	sts	0x01D1, r1
    180e:	10 92 d2 01 	sts	0x01D2, r1
    1812:	10 92 d3 01 	sts	0x01D3, r1

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1816:	a8 e5       	ldi	r26, 0x58	; 88
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e8 e5       	ldi	r30, 0x58	; 88
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 62       	ori	r24, 0x20	; 32
    1822:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 64       	ori	r24, 0x40	; 64
    1830:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1832:	e8 e5       	ldi	r30, 0x58	; 88
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	80 72       	andi	r24, 0x20	; 32
    183e:	90 70       	andi	r25, 0x00	; 0
    1840:	95 95       	asr	r25
    1842:	87 95       	ror	r24
    1844:	95 95       	asr	r25
    1846:	87 95       	ror	r24
    1848:	95 95       	asr	r25
    184a:	87 95       	ror	r24
    184c:	95 95       	asr	r25
    184e:	87 95       	ror	r24
    1850:	95 95       	asr	r25
    1852:	87 95       	ror	r24
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	69 f3       	breq	.-38     	; 0x1832 <MTimerCalcDutyCycle+0x68>
	G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1858:	e6 e4       	ldi	r30, 0x46	; 70
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	7c 01       	movw	r14, r24
    1862:	00 e0       	ldi	r16, 0x00	; 0
    1864:	10 e0       	ldi	r17, 0x00	; 0
    1866:	80 91 d0 01 	lds	r24, 0x01D0
    186a:	90 91 d1 01 	lds	r25, 0x01D1
    186e:	a0 91 d2 01 	lds	r26, 0x01D2
    1872:	b0 91 d3 01 	lds	r27, 0x01D3
    1876:	2f ef       	ldi	r18, 0xFF	; 255
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8e 0d       	add	r24, r14
    188c:	9f 1d       	adc	r25, r15
    188e:	a0 1f       	adc	r26, r16
    1890:	b1 1f       	adc	r27, r17
    1892:	80 93 d4 01 	sts	0x01D4, r24
    1896:	90 93 d5 01 	sts	0x01D5, r25
    189a:	a0 93 d6 01 	sts	0x01D6, r26
    189e:	b0 93 d7 01 	sts	0x01D7, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    18a2:	a8 e5       	ldi	r26, 0x58	; 88
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e8 e5       	ldi	r30, 0x58	; 88
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 62       	ori	r24, 0x20	; 32
    18ae:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect falling edge*/
    18b0:	ae e4       	ldi	r26, 0x4E	; 78
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ee e4       	ldi	r30, 0x4E	; 78
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 7b       	andi	r24, 0xBF	; 191
    18bc:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    18be:	e8 e5       	ldi	r30, 0x58	; 88
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	80 72       	andi	r24, 0x20	; 32
    18ca:	90 70       	andi	r25, 0x00	; 0
    18cc:	95 95       	asr	r25
    18ce:	87 95       	ror	r24
    18d0:	95 95       	asr	r25
    18d2:	87 95       	ror	r24
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	95 95       	asr	r25
    18da:	87 95       	ror	r24
    18dc:	95 95       	asr	r25
    18de:	87 95       	ror	r24
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	69 f3       	breq	.-38     	; 0x18be <MTimerCalcDutyCycle+0xf4>
	G_u32CountsForFirstFaling = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    18e4:	e6 e4       	ldi	r30, 0x46	; 70
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	7c 01       	movw	r14, r24
    18ee:	00 e0       	ldi	r16, 0x00	; 0
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	80 91 d0 01 	lds	r24, 0x01D0
    18f6:	90 91 d1 01 	lds	r25, 0x01D1
    18fa:	a0 91 d2 01 	lds	r26, 0x01D2
    18fe:	b0 91 d3 01 	lds	r27, 0x01D3
    1902:	2f ef       	ldi	r18, 0xFF	; 255
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8e 0d       	add	r24, r14
    1918:	9f 1d       	adc	r25, r15
    191a:	a0 1f       	adc	r26, r16
    191c:	b1 1f       	adc	r27, r17
    191e:	80 93 d8 01 	sts	0x01D8, r24
    1922:	90 93 d9 01 	sts	0x01D9, r25
    1926:	a0 93 da 01 	sts	0x01DA, r26
    192a:	b0 93 db 01 	sts	0x01DB, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    192e:	a8 e5       	ldi	r26, 0x58	; 88
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e8 e5       	ldi	r30, 0x58	; 88
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 62       	ori	r24, 0x20	; 32
    193a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    193c:	ae e4       	ldi	r26, 0x4E	; 78
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ee e4       	ldi	r30, 0x4E	; 78
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    194a:	e8 e5       	ldi	r30, 0x58	; 88
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	80 72       	andi	r24, 0x20	; 32
    1956:	90 70       	andi	r25, 0x00	; 0
    1958:	95 95       	asr	r25
    195a:	87 95       	ror	r24
    195c:	95 95       	asr	r25
    195e:	87 95       	ror	r24
    1960:	95 95       	asr	r25
    1962:	87 95       	ror	r24
    1964:	95 95       	asr	r25
    1966:	87 95       	ror	r24
    1968:	95 95       	asr	r25
    196a:	87 95       	ror	r24
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f3       	breq	.-38     	; 0x194a <MTimerCalcDutyCycle+0x180>
	G_u32CountsForSecondRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1970:	e6 e4       	ldi	r30, 0x46	; 70
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	7c 01       	movw	r14, r24
    197a:	00 e0       	ldi	r16, 0x00	; 0
    197c:	10 e0       	ldi	r17, 0x00	; 0
    197e:	80 91 d0 01 	lds	r24, 0x01D0
    1982:	90 91 d1 01 	lds	r25, 0x01D1
    1986:	a0 91 d2 01 	lds	r26, 0x01D2
    198a:	b0 91 d3 01 	lds	r27, 0x01D3
    198e:	2f ef       	ldi	r18, 0xFF	; 255
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8e 0d       	add	r24, r14
    19a4:	9f 1d       	adc	r25, r15
    19a6:	a0 1f       	adc	r26, r16
    19a8:	b1 1f       	adc	r27, r17
    19aa:	80 93 dc 01 	sts	0x01DC, r24
    19ae:	90 93 dd 01 	sts	0x01DD, r25
    19b2:	a0 93 de 01 	sts	0x01DE, r26
    19b6:	b0 93 df 01 	sts	0x01DF, r27
	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    19ba:	a8 e5       	ldi	r26, 0x58	; 88
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e8 e5       	ldi	r30, 0x58	; 88
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 62       	ori	r24, 0x20	; 32
    19c6:	8c 93       	st	X, r24

	G_u32OverFlowCounts = 0 ;
    19c8:	10 92 d0 01 	sts	0x01D0, r1
    19cc:	10 92 d1 01 	sts	0x01D1, r1
    19d0:	10 92 d2 01 	sts	0x01D2, r1
    19d4:	10 92 d3 01 	sts	0x01D3, r1

	L_u32High   = G_u32CountsForFirstFaling - G_u32CountsForFirstRising ;
    19d8:	20 91 d8 01 	lds	r18, 0x01D8
    19dc:	30 91 d9 01 	lds	r19, 0x01D9
    19e0:	40 91 da 01 	lds	r20, 0x01DA
    19e4:	50 91 db 01 	lds	r21, 0x01DB
    19e8:	80 91 d4 01 	lds	r24, 0x01D4
    19ec:	90 91 d5 01 	lds	r25, 0x01D5
    19f0:	a0 91 d6 01 	lds	r26, 0x01D6
    19f4:	b0 91 d7 01 	lds	r27, 0x01D7
    19f8:	79 01       	movw	r14, r18
    19fa:	8a 01       	movw	r16, r20
    19fc:	e8 1a       	sub	r14, r24
    19fe:	f9 0a       	sbc	r15, r25
    1a00:	0a 0b       	sbc	r16, r26
    1a02:	1b 0b       	sbc	r17, r27
    1a04:	d8 01       	movw	r26, r16
    1a06:	c7 01       	movw	r24, r14
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	af 83       	std	Y+7, r26	; 0x07
    1a0e:	b8 87       	std	Y+8, r27	; 0x08
	L_u32Period = G_u32CountsForSecondRising - G_u32CountsForFirstRising ;
    1a10:	20 91 dc 01 	lds	r18, 0x01DC
    1a14:	30 91 dd 01 	lds	r19, 0x01DD
    1a18:	40 91 de 01 	lds	r20, 0x01DE
    1a1c:	50 91 df 01 	lds	r21, 0x01DF
    1a20:	80 91 d4 01 	lds	r24, 0x01D4
    1a24:	90 91 d5 01 	lds	r25, 0x01D5
    1a28:	a0 91 d6 01 	lds	r26, 0x01D6
    1a2c:	b0 91 d7 01 	lds	r27, 0x01D7
    1a30:	79 01       	movw	r14, r18
    1a32:	8a 01       	movw	r16, r20
    1a34:	e8 1a       	sub	r14, r24
    1a36:	f9 0a       	sbc	r15, r25
    1a38:	0a 0b       	sbc	r16, r26
    1a3a:	1b 0b       	sbc	r17, r27
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	c7 01       	movw	r24, r14
    1a40:	89 87       	std	Y+9, r24	; 0x09
    1a42:	9a 87       	std	Y+10, r25	; 0x0a
    1a44:	ab 87       	std	Y+11, r26	; 0x0b
    1a46:	bc 87       	std	Y+12, r27	; 0x0c
	L_f32Duty = L_u32High * 100 ;
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	af 81       	ldd	r26, Y+7	; 0x07
    1a4e:	b8 85       	ldd	r27, Y+8	; 0x08
    1a50:	24 e6       	ldi	r18, 0x64	; 100
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	ab 83       	std	Y+3, r26	; 0x03
    1a76:	bc 83       	std	Y+4, r27	; 0x04
	L_f32Duty = L_f32Duty / (f32)L_u32Period ;
    1a78:	69 85       	ldd	r22, Y+9	; 0x09
    1a7a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a80:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	69 81       	ldd	r22, Y+1	; 0x01
    1a8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	ab 83       	std	Y+3, r26	; 0x03
    1a9e:	bc 83       	std	Y+4, r27	; 0x04
	return L_f32Duty ;
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	ab 81       	ldd	r26, Y+3	; 0x03
    1aa6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	2c 96       	adiw	r28, 0x0c	; 12
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	08 95       	ret

00001ac6 <MTimerCalcFreqofTtotal>:

u32 MTimerCalcFreqofTtotal (void)
{
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <MTimerCalcFreqofTtotal+0xe>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <MTimerCalcFreqofTtotal+0x10>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
		u32 L_u32Period = 0 ;
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	1a 82       	std	Y+2, r1	; 0x02
    1ade:	1b 82       	std	Y+3, r1	; 0x03
    1ae0:	1c 82       	std	Y+4, r1	; 0x04
		G_u32OverFlowCounts = 0 ;
    1ae2:	10 92 d0 01 	sts	0x01D0, r1
    1ae6:	10 92 d1 01 	sts	0x01D1, r1
    1aea:	10 92 d2 01 	sts	0x01D2, r1
    1aee:	10 92 d3 01 	sts	0x01D3, r1

		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1af2:	a8 e5       	ldi	r26, 0x58	; 88
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e8 e5       	ldi	r30, 0x58	; 88
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	80 62       	ori	r24, 0x20	; 32
    1afe:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1b00:	ae e4       	ldi	r26, 0x4E	; 78
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	ee e4       	ldi	r30, 0x4E	; 78
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	8c 93       	st	X, r24
		while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1b0e:	e8 e5       	ldi	r30, 0x58	; 88
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	80 72       	andi	r24, 0x20	; 32
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	95 95       	asr	r25
    1b1e:	87 95       	ror	r24
    1b20:	95 95       	asr	r25
    1b22:	87 95       	ror	r24
    1b24:	95 95       	asr	r25
    1b26:	87 95       	ror	r24
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	95 95       	asr	r25
    1b2e:	87 95       	ror	r24
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	69 f3       	breq	.-38     	; 0x1b0e <MTimerCalcFreqofTtotal+0x48>
		G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1b34:	e6 e4       	ldi	r30, 0x46	; 70
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	7c 01       	movw	r14, r24
    1b3e:	00 e0       	ldi	r16, 0x00	; 0
    1b40:	10 e0       	ldi	r17, 0x00	; 0
    1b42:	80 91 d0 01 	lds	r24, 0x01D0
    1b46:	90 91 d1 01 	lds	r25, 0x01D1
    1b4a:	a0 91 d2 01 	lds	r26, 0x01D2
    1b4e:	b0 91 d3 01 	lds	r27, 0x01D3
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8e 0d       	add	r24, r14
    1b68:	9f 1d       	adc	r25, r15
    1b6a:	a0 1f       	adc	r26, r16
    1b6c:	b1 1f       	adc	r27, r17
    1b6e:	80 93 d4 01 	sts	0x01D4, r24
    1b72:	90 93 d5 01 	sts	0x01D5, r25
    1b76:	a0 93 d6 01 	sts	0x01D6, r26
    1b7a:	b0 93 d7 01 	sts	0x01D7, r27

		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1b7e:	a8 e5       	ldi	r26, 0x58	; 88
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e8 e5       	ldi	r30, 0x58	; 88
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	80 62       	ori	r24, 0x20	; 32
    1b8a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1b8c:	ae e4       	ldi	r26, 0x4E	; 78
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ee e4       	ldi	r30, 0x4E	; 78
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	80 64       	ori	r24, 0x40	; 64
    1b98:	8c 93       	st	X, r24
		while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1b9a:	e8 e5       	ldi	r30, 0x58	; 88
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	80 72       	andi	r24, 0x20	; 32
    1ba6:	90 70       	andi	r25, 0x00	; 0
    1ba8:	95 95       	asr	r25
    1baa:	87 95       	ror	r24
    1bac:	95 95       	asr	r25
    1bae:	87 95       	ror	r24
    1bb0:	95 95       	asr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	95 95       	asr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	95 95       	asr	r25
    1bba:	87 95       	ror	r24
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f3       	breq	.-38     	; 0x1b9a <MTimerCalcFreqofTtotal+0xd4>
		G_u32CountsForSecondRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1bc0:	e6 e4       	ldi	r30, 0x46	; 70
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	7c 01       	movw	r14, r24
    1bca:	00 e0       	ldi	r16, 0x00	; 0
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
    1bce:	80 91 d0 01 	lds	r24, 0x01D0
    1bd2:	90 91 d1 01 	lds	r25, 0x01D1
    1bd6:	a0 91 d2 01 	lds	r26, 0x01D2
    1bda:	b0 91 d3 01 	lds	r27, 0x01D3
    1bde:	2f ef       	ldi	r18, 0xFF	; 255
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__mulsi3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8e 0d       	add	r24, r14
    1bf4:	9f 1d       	adc	r25, r15
    1bf6:	a0 1f       	adc	r26, r16
    1bf8:	b1 1f       	adc	r27, r17
    1bfa:	80 93 dc 01 	sts	0x01DC, r24
    1bfe:	90 93 dd 01 	sts	0x01DD, r25
    1c02:	a0 93 de 01 	sts	0x01DE, r26
    1c06:	b0 93 df 01 	sts	0x01DF, r27
		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1c0a:	a8 e5       	ldi	r26, 0x58	; 88
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e8 e5       	ldi	r30, 0x58	; 88
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 62       	ori	r24, 0x20	; 32
    1c16:	8c 93       	st	X, r24

		G_u32OverFlowCounts = 0 ;
    1c18:	10 92 d0 01 	sts	0x01D0, r1
    1c1c:	10 92 d1 01 	sts	0x01D1, r1
    1c20:	10 92 d2 01 	sts	0x01D2, r1
    1c24:	10 92 d3 01 	sts	0x01D3, r1

		L_u32Period = G_u32CountsForSecondRising - G_u32CountsForFirstRising ;
    1c28:	20 91 dc 01 	lds	r18, 0x01DC
    1c2c:	30 91 dd 01 	lds	r19, 0x01DD
    1c30:	40 91 de 01 	lds	r20, 0x01DE
    1c34:	50 91 df 01 	lds	r21, 0x01DF
    1c38:	80 91 d4 01 	lds	r24, 0x01D4
    1c3c:	90 91 d5 01 	lds	r25, 0x01D5
    1c40:	a0 91 d6 01 	lds	r26, 0x01D6
    1c44:	b0 91 d7 01 	lds	r27, 0x01D7
    1c48:	79 01       	movw	r14, r18
    1c4a:	8a 01       	movw	r16, r20
    1c4c:	e8 1a       	sub	r14, r24
    1c4e:	f9 0a       	sbc	r15, r25
    1c50:	0a 0b       	sbc	r16, r26
    1c52:	1b 0b       	sbc	r17, r27
    1c54:	d8 01       	movw	r26, r16
    1c56:	c7 01       	movw	r24, r14
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	ab 83       	std	Y+3, r26	; 0x03
    1c5e:	bc 83       	std	Y+4, r27	; 0x04
		G_u32FrequancyOfTimeTotal = CLOK_SYSTEM / (L_u32Period * (u32)TIMER1_PRESCALER) ;
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	92 e1       	ldi	r25, 0x12	; 18
    1c64:	aa e7       	ldi	r26, 0x7A	; 122
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	29 81       	ldd	r18, Y+1	; 0x01
    1c6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c6c:	4b 81       	ldd	r20, Y+3	; 0x03
    1c6e:	5c 81       	ldd	r21, Y+4	; 0x04
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__udivmodsi4>
    1c78:	da 01       	movw	r26, r20
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	80 93 e4 01 	sts	0x01E4, r24
    1c80:	90 93 e5 01 	sts	0x01E5, r25
    1c84:	a0 93 e6 01 	sts	0x01E6, r26
    1c88:	b0 93 e7 01 	sts	0x01E7, r27
		return G_u32FrequancyOfTimeTotal ;
    1c8c:	80 91 e4 01 	lds	r24, 0x01E4
    1c90:	90 91 e5 01 	lds	r25, 0x01E5
    1c94:	a0 91 e6 01 	lds	r26, 0x01E6
    1c98:	b0 91 e7 01 	lds	r27, 0x01E7
}
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	08 95       	ret

00001cb6 <__vector_10>:
//}

/*ISR of Timer0 compare match*/
void __vector_10(void)__attribute__((signal))__attribute__((interrupt));
void __vector_10(void)
{
    1cb6:	78 94       	sei
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	2f 93       	push	r18
    1cc4:	3f 93       	push	r19
    1cc6:	4f 93       	push	r20
    1cc8:	5f 93       	push	r21
    1cca:	6f 93       	push	r22
    1ccc:	7f 93       	push	r23
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	af 93       	push	r26
    1cd4:	bf 93       	push	r27
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    1ce2:	80 91 e8 01 	lds	r24, 0x01E8
    1ce6:	90 91 e9 01 	lds	r25, 0x01E9
    1cea:	a0 91 ea 01 	lds	r26, 0x01EA
    1cee:	b0 91 eb 01 	lds	r27, 0x01EB
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	b1 1d       	adc	r27, r1
    1cf8:	80 93 e8 01 	sts	0x01E8, r24
    1cfc:	90 93 e9 01 	sts	0x01E9, r25
    1d00:	a0 93 ea 01 	sts	0x01EA, r26
    1d04:	b0 93 eb 01 	sts	0x01EB, r27

	if(LS_u32Counter == G_u32Timer0IntervalCtcCount)
    1d08:	20 91 e8 01 	lds	r18, 0x01E8
    1d0c:	30 91 e9 01 	lds	r19, 0x01E9
    1d10:	40 91 ea 01 	lds	r20, 0x01EA
    1d14:	50 91 eb 01 	lds	r21, 0x01EB
    1d18:	80 91 b8 01 	lds	r24, 0x01B8
    1d1c:	90 91 b9 01 	lds	r25, 0x01B9
    1d20:	a0 91 ba 01 	lds	r26, 0x01BA
    1d24:	b0 91 bb 01 	lds	r27, 0x01BB
    1d28:	28 17       	cp	r18, r24
    1d2a:	39 07       	cpc	r19, r25
    1d2c:	4a 07       	cpc	r20, r26
    1d2e:	5b 07       	cpc	r21, r27
    1d30:	99 f4       	brne	.+38     	; 0x1d58 <__vector_10+0xa2>
	{
		if(Timer0_CTC_CallBack != NULL)
    1d32:	80 91 fa 01 	lds	r24, 0x01FA
    1d36:	90 91 fb 01 	lds	r25, 0x01FB
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f0       	breq	.+26     	; 0x1d58 <__vector_10+0xa2>
		{
			Timer0_CTC_CallBack();
    1d3e:	e0 91 fa 01 	lds	r30, 0x01FA
    1d42:	f0 91 fb 01 	lds	r31, 0x01FB
    1d46:	09 95       	icall
			LS_u32Counter = 0;
    1d48:	10 92 e8 01 	sts	0x01E8, r1
    1d4c:	10 92 e9 01 	sts	0x01E9, r1
    1d50:	10 92 ea 01 	sts	0x01EA, r1
    1d54:	10 92 eb 01 	sts	0x01EB, r1
		}
	}
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	ff 91       	pop	r31
    1d5e:	ef 91       	pop	r30
    1d60:	bf 91       	pop	r27
    1d62:	af 91       	pop	r26
    1d64:	9f 91       	pop	r25
    1d66:	8f 91       	pop	r24
    1d68:	7f 91       	pop	r23
    1d6a:	6f 91       	pop	r22
    1d6c:	5f 91       	pop	r21
    1d6e:	4f 91       	pop	r20
    1d70:	3f 91       	pop	r19
    1d72:	2f 91       	pop	r18
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <__vector_5>:

/*ISR of Timer2 over flow*/
void __vector_5(void)__attribute__((signal))__attribute__((interrupt));
void __vector_5(void)
{
    1d7e:	78 94       	sei
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    1daa:	80 91 ec 01 	lds	r24, 0x01EC
    1dae:	90 91 ed 01 	lds	r25, 0x01ED
    1db2:	a0 91 ee 01 	lds	r26, 0x01EE
    1db6:	b0 91 ef 01 	lds	r27, 0x01EF
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	b1 1d       	adc	r27, r1
    1dc0:	80 93 ec 01 	sts	0x01EC, r24
    1dc4:	90 93 ed 01 	sts	0x01ED, r25
    1dc8:	a0 93 ee 01 	sts	0x01EE, r26
    1dcc:	b0 93 ef 01 	sts	0x01EF, r27
	if(LS_u32Counter == G_u32Timer2IntervalCount)
    1dd0:	20 91 ec 01 	lds	r18, 0x01EC
    1dd4:	30 91 ed 01 	lds	r19, 0x01ED
    1dd8:	40 91 ee 01 	lds	r20, 0x01EE
    1ddc:	50 91 ef 01 	lds	r21, 0x01EF
    1de0:	80 91 bc 01 	lds	r24, 0x01BC
    1de4:	90 91 bd 01 	lds	r25, 0x01BD
    1de8:	a0 91 be 01 	lds	r26, 0x01BE
    1dec:	b0 91 bf 01 	lds	r27, 0x01BF
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	4a 07       	cpc	r20, r26
    1df6:	5b 07       	cpc	r21, r27
    1df8:	99 f4       	brne	.+38     	; 0x1e20 <__vector_5+0xa2>
	{
		if(Timer2_Overflow_CallBack != NULL)
    1dfa:	80 91 f8 01 	lds	r24, 0x01F8
    1dfe:	90 91 f9 01 	lds	r25, 0x01F9
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	69 f0       	breq	.+26     	; 0x1e20 <__vector_5+0xa2>
		{
			Timer2_Overflow_CallBack();
    1e06:	e0 91 f8 01 	lds	r30, 0x01F8
    1e0a:	f0 91 f9 01 	lds	r31, 0x01F9
    1e0e:	09 95       	icall
			LS_u32Counter = 0;
    1e10:	10 92 ec 01 	sts	0x01EC, r1
    1e14:	10 92 ed 01 	sts	0x01ED, r1
    1e18:	10 92 ee 01 	sts	0x01EE, r1
    1e1c:	10 92 ef 01 	sts	0x01EF, r1
		}
	}
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	ff 91       	pop	r31
    1e26:	ef 91       	pop	r30
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <__vector_4>:

/*ISR of Timer2 compare match*/
void __vector_4(void)__attribute__((signal))__attribute__((interrupt));
void __vector_4(void)
{
    1e46:	78 94       	sei
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	2f 93       	push	r18
    1e54:	3f 93       	push	r19
    1e56:	4f 93       	push	r20
    1e58:	5f 93       	push	r21
    1e5a:	6f 93       	push	r22
    1e5c:	7f 93       	push	r23
    1e5e:	8f 93       	push	r24
    1e60:	9f 93       	push	r25
    1e62:	af 93       	push	r26
    1e64:	bf 93       	push	r27
    1e66:	ef 93       	push	r30
    1e68:	ff 93       	push	r31
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    1e72:	80 91 f0 01 	lds	r24, 0x01F0
    1e76:	90 91 f1 01 	lds	r25, 0x01F1
    1e7a:	a0 91 f2 01 	lds	r26, 0x01F2
    1e7e:	b0 91 f3 01 	lds	r27, 0x01F3
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	a1 1d       	adc	r26, r1
    1e86:	b1 1d       	adc	r27, r1
    1e88:	80 93 f0 01 	sts	0x01F0, r24
    1e8c:	90 93 f1 01 	sts	0x01F1, r25
    1e90:	a0 93 f2 01 	sts	0x01F2, r26
    1e94:	b0 93 f3 01 	sts	0x01F3, r27

	if(LS_u32Counter == G_u32Timer2IntervalCtcCount)
    1e98:	20 91 f0 01 	lds	r18, 0x01F0
    1e9c:	30 91 f1 01 	lds	r19, 0x01F1
    1ea0:	40 91 f2 01 	lds	r20, 0x01F2
    1ea4:	50 91 f3 01 	lds	r21, 0x01F3
    1ea8:	80 91 c0 01 	lds	r24, 0x01C0
    1eac:	90 91 c1 01 	lds	r25, 0x01C1
    1eb0:	a0 91 c2 01 	lds	r26, 0x01C2
    1eb4:	b0 91 c3 01 	lds	r27, 0x01C3
    1eb8:	28 17       	cp	r18, r24
    1eba:	39 07       	cpc	r19, r25
    1ebc:	4a 07       	cpc	r20, r26
    1ebe:	5b 07       	cpc	r21, r27
    1ec0:	99 f4       	brne	.+38     	; 0x1ee8 <__vector_4+0xa2>
	{
		if(Timer2_CTC_CallBack != NULL)
    1ec2:	80 91 fc 01 	lds	r24, 0x01FC
    1ec6:	90 91 fd 01 	lds	r25, 0x01FD
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f0       	breq	.+26     	; 0x1ee8 <__vector_4+0xa2>
		{
			Timer2_CTC_CallBack();
    1ece:	e0 91 fc 01 	lds	r30, 0x01FC
    1ed2:	f0 91 fd 01 	lds	r31, 0x01FD
    1ed6:	09 95       	icall
			LS_u32Counter = 0;
    1ed8:	10 92 f0 01 	sts	0x01F0, r1
    1edc:	10 92 f1 01 	sts	0x01F1, r1
    1ee0:	10 92 f2 01 	sts	0x01F2, r1
    1ee4:	10 92 f3 01 	sts	0x01F3, r1
		}
	}
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0f 90       	pop	r0
    1f0a:	1f 90       	pop	r1
    1f0c:	18 95       	reti

00001f0e <TWI_INIT>:
#include "TWI_EEPROM.h"

volatile char PASS[] = "    ";

void TWI_INIT(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0x00;	/* PS 1 */
    1f16:	e1 e2       	ldi	r30, 0x21	; 33
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	10 82       	st	Z, r1
	TWBR = 0X20; /* BAUD = 20 --eq(8MHz)--> f_scl = 400 KHz */
    1f1c:	e0 e2       	ldi	r30, 0x20	; 32
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 e2       	ldi	r24, 0x20	; 32
    1f22:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);	/* Enabel TWI */
    1f24:	e6 e5       	ldi	r30, 0x56	; 86
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	84 e0       	ldi	r24, 0x04	; 4
    1f2a:	80 83       	st	Z, r24
}
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <TWI_START>:

void TWI_START (void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	/* Start communication -- Enable TWI -- Clear TWINT flag */
	TWCR = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);
    1f3a:	e6 e5       	ldi	r30, 0x56	; 86
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	84 ea       	ldi	r24, 0xA4	; 164
    1f40:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    1f42:	e6 e5       	ldi	r30, 0x56	; 86
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 23       	and	r24, r24
    1f4a:	dc f7       	brge	.-10     	; 0x1f42 <TWI_START+0x10>
}
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <TWI_STOP>:

void TWI_STOP (void)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWSTO) | (1<<TWEN) | (1<<TWINT);
    1f5a:	e6 e5       	ldi	r30, 0x56	; 86
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	84 e9       	ldi	r24, 0x94	; 148
    1f60:	80 83       	st	Z, r24
	while(TWCR & (1<<TWSTO)); /* Wait until it is 0 */
    1f62:	e6 e5       	ldi	r30, 0x56	; 86
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	80 71       	andi	r24, 0x10	; 16
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	b9 f7       	brne	.-18     	; 0x1f62 <TWI_STOP+0x10>
	//_delay_ms(10);	/* Or you can delay this time */
}
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <TWI_WRITE>:

void TWI_WRITE(char data)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	0f 92       	push	r0
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01
	/* THIS FUNCTION USED TO SEND ADDRESS & DATA through TWDR */

	TWDR = data;
    1f86:	e3 e2       	ldi	r30, 0x23	; 35
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f8e:	e6 e5       	ldi	r30, 0x56	; 86
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	84 e8       	ldi	r24, 0x84	; 132
    1f94:	80 83       	st	Z, r24

	while(!(TWCR & (1<<TWINT)));	/* wait until data transferred */
    1f96:	e6 e5       	ldi	r30, 0x56	; 86
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 23       	and	r24, r24
    1f9e:	dc f7       	brge	.-10     	; 0x1f96 <TWI_WRITE+0x1c>
}
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <TWI_READACK>:

char TWI_READACK (void)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	/* ENABLE ACK */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  /* Clear it after send address and enable TWI */
    1fb0:	e6 e5       	ldi	r30, 0x56	; 86
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	84 ec       	ldi	r24, 0xC4	; 196
    1fb6:	80 83       	st	Z, r24

	while(!(TWCR & (1<<TWINT)));	/* He sends there then awaits, I here await then get it */
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 23       	and	r24, r24
    1fc0:	dc f7       	brge	.-10     	; 0x1fb8 <TWI_READACK+0x10>
	return TWDR;
    1fc2:	e3 e2       	ldi	r30, 0x23	; 35
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <TWI_READNACK>:

char TWI_READNACK (void)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);  /* Clear it after send address and enable TWI */
    1fd6:	e6 e5       	ldi	r30, 0x56	; 86
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	84 e8       	ldi	r24, 0x84	; 132
    1fdc:	80 83       	st	Z, r24

	while(!(TWCR & (1<<TWINT)));	/* He sends there then awaits, I here await then get it */
    1fde:	e6 e5       	ldi	r30, 0x56	; 86
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	dc f7       	brge	.-10     	; 0x1fde <TWI_READNACK+0x10>
	return TWDR;
    1fe8:	e3 e2       	ldi	r30, 0x23	; 35
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
}
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <TWI_GETSTATUS>:

char TWI_GETSTATUS (void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
	return TWSR & 0xF8;
    1ffc:	e1 e2       	ldi	r30, 0x21	; 33
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	88 7f       	andi	r24, 0xF8	; 248
}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <READ_EEPROM>:

/* YOU ,THE MASTER * READ EEPROM as RX */
void READ_EEPROM(char Address, char*str)
{
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <READ_EEPROM+0xa>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <READ_EEPROM+0xc>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	7c 83       	std	Y+4, r23	; 0x04
    201e:	6b 83       	std	Y+3, r22	; 0x03
	char byte = 0;
    2020:	19 82       	std	Y+1, r1	; 0x01

	TWI_START();
    2022:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <TWI_START>

	/* Select EEPROM as a slave (sending WRITE as DATA SHEET said */
	TWI_WRITE(EEPROM_Write_Addess);
    2026:	80 ea       	ldi	r24, 0xA0	; 160
    2028:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <TWI_WRITE>

	/* Select the word address to be accessed */
	TWI_WRITE(Address);
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <TWI_WRITE>

	/* Send start bit again as data sheet says */
	TWI_START();
    2032:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <TWI_START>

	/* Send EEPROM slave address and READ */
	TWI_WRITE(EEPROM_Read_Addess);
    2036:	81 ea       	ldi	r24, 0xA1	; 161
    2038:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <TWI_WRITE>
    203c:	0c c0       	rjmp	.+24     	; 0x2056 <READ_EEPROM+0x4c>

	//for (char byte = 0; byte < strlen(str); byte++)
	while(str[byte] != 0)
	{
		PASS[byte] = TWI_READACK();
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	08 2f       	mov	r16, r24
    2042:	10 e0       	ldi	r17, 0x00	; 0
    2044:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <TWI_READACK>
    2048:	f8 01       	movw	r30, r16
    204a:	e2 57       	subi	r30, 0x72	; 114
    204c:	fe 4f       	sbci	r31, 0xFE	; 254
    204e:	80 83       	st	Z, r24
		byte++;
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	89 83       	std	Y+1, r24	; 0x01

	/* Send EEPROM slave address and READ */
	TWI_WRITE(EEPROM_Read_Addess);

	//for (char byte = 0; byte < strlen(str); byte++)
	while(str[byte] != 0)
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	80 81       	ld	r24, Z
    2068:	88 23       	and	r24, r24
    206a:	49 f7       	brne	.-46     	; 0x203e <READ_EEPROM+0x34>
	{
		PASS[byte] = TWI_READACK();
		byte++;
	}

	TWI_STOP();
    206c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <TWI_STOP>



}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	08 95       	ret

00002082 <WRITE_EEPROM>:

/* YOU ,THE MASTER* WRITE ON EEPROM as TX */
void WRITE_EEPROM(char Address,char*str)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	62 97       	sbiw	r28, 0x12	; 18
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	88 8b       	std	Y+16, r24	; 0x10
    2098:	7a 8b       	std	Y+18, r23	; 0x12
    209a:	69 8b       	std	Y+17, r22	; 0x11
	char byte = 0;
    209c:	1f 86       	std	Y+15, r1	; 0x0f

	TWI_START();
    209e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <TWI_START>

	/* Select EEPROM as a slave and WRITE */
	TWI_WRITE(EEPROM_Write_Addess);
    20a2:	80 ea       	ldi	r24, 0xA0	; 160
    20a4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <TWI_WRITE>

	/* Send Address of word to wirte on it */
	TWI_WRITE(Address);
    20a8:	88 89       	ldd	r24, Y+16	; 0x10
    20aa:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <TWI_WRITE>
    20ae:	0e c0       	rjmp	.+28     	; 0x20cc <WRITE_EEPROM+0x4a>

	/* Write byte by byte -- Write the array data */
	//for (char byte = 0; byte<strlen(str); byte++)
	while(str[byte] != 0)
	{
		TWI_WRITE(str[byte]);
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	89 89       	ldd	r24, Y+17	; 0x11
    20b8:	9a 89       	ldd	r25, Y+18	; 0x12
    20ba:	fc 01       	movw	r30, r24
    20bc:	e2 0f       	add	r30, r18
    20be:	f3 1f       	adc	r31, r19
    20c0:	80 81       	ld	r24, Z
    20c2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <TWI_WRITE>
		byte++;
    20c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	8f 87       	std	Y+15, r24	; 0x0f
	/* Send Address of word to wirte on it */
	TWI_WRITE(Address);

	/* Write byte by byte -- Write the array data */
	//for (char byte = 0; byte<strlen(str); byte++)
	while(str[byte] != 0)
    20cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	89 89       	ldd	r24, Y+17	; 0x11
    20d4:	9a 89       	ldd	r25, Y+18	; 0x12
    20d6:	fc 01       	movw	r30, r24
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	80 81       	ld	r24, Z
    20de:	88 23       	and	r24, r24
    20e0:	39 f7       	brne	.-50     	; 0x20b0 <WRITE_EEPROM+0x2e>
	{
		TWI_WRITE(str[byte]);
		byte++;
	}

	TWI_STOP();
    20e2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <TWI_STOP>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e2       	ldi	r26, 0x20	; 32
    20ec:	b1 e4       	ldi	r27, 0x41	; 65
    20ee:	8b 87       	std	Y+11, r24	; 0x0b
    20f0:	9c 87       	std	Y+12, r25	; 0x0c
    20f2:	ad 87       	std	Y+13, r26	; 0x0d
    20f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a ef       	ldi	r20, 0xFA	; 250
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8f 83       	std	Y+7, r24	; 0x07
    2110:	98 87       	std	Y+8, r25	; 0x08
    2112:	a9 87       	std	Y+9, r26	; 0x09
    2114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2116:	6f 81       	ldd	r22, Y+7	; 0x07
    2118:	78 85       	ldd	r23, Y+8	; 0x08
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <WRITE_EEPROM+0xb6>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <WRITE_EEPROM+0x134>
	else if (__tmp > 65535)
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <WRITE_EEPROM+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <WRITE_EEPROM+0x116>
    217a:	88 ec       	ldi	r24, 0xC8	; 200
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <WRITE_EEPROM+0x104>
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <WRITE_EEPROM+0xf8>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <WRITE_EEPROM+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <WRITE_EEPROM+0x140>
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    21ca:	62 96       	adiw	r28, 0x12	; 18
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <MINT_voidInit>:
static void (*INT0_CallBack1)(void) ;
static void (*INT0_CallBack2)(void) ;
static void (*INT0_CallBack3)(void) ;

void MINT_voidInit (void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
    21e4:	af e5       	ldi	r26, 0x5F	; 95
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ef e5       	ldi	r30, 0x5F	; 95
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
	/******************************************/
	/**         External interrupt 0          */
	#if   EXTI0 == ENABLE

	    /** Enable PIE of INT0 */
	    SET_BIT(GICR, INT0);
    21f2:	ab e5       	ldi	r26, 0x5B	; 91
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	eb e5       	ldi	r30, 0x5B	; 91
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 64       	ori	r24, 0x40	; 64
    21fe:	8c 93       	st	X, r24
		    	SET_BIT (MCUCR , ISC00 ) ;
		    	CLR_BIT (MCUCR , ISC01 ) ;

	        #elif EXTI0_SENCE == FALLING_EDGE
		        /** sense INT0 to falling edge */
		    	CLR_BIT (MCUCR , ISC00 ) ;
    2200:	a5 e5       	ldi	r26, 0x55	; 85
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e5 e5       	ldi	r30, 0x55	; 85
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8e 7f       	andi	r24, 0xFE	; 254
    220c:	8c 93       	st	X, r24
		    	SET_BIT (MCUCR , ISC01 ) ;
    220e:	a5 e5       	ldi	r26, 0x55	; 85
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e5       	ldi	r30, 0x55	; 85
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	82 60       	ori	r24, 0x02	; 2
    221a:	8c 93       	st	X, r24
		    	#error "EXTI1_SENCE must be LOW_LEVEL or ON_CHANGE or FALLING_EDGE or RISING_EDGE"
		    #endif

	#elif EXTI1 == DISABLE
	    /** disable PIE of INT1 */
	    CLR_BIT(GICR, INT1);
    221c:	ab e5       	ldi	r26, 0x5B	; 91
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	eb e5       	ldi	r30, 0x5B	; 91
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8f 77       	andi	r24, 0x7F	; 127
    2228:	8c 93       	st	X, r24
		    	#error "EXTI2_SENCE must be FALLING_EDGE or RISING_EDGE"
		    #endif

	#elif EXTI2 == DISABLE
	    /** disable PIE of INT2 */
	    CLR_BIT(GICR, INT2);
    222a:	ab e5       	ldi	r26, 0x5B	; 91
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	eb e5       	ldi	r30, 0x5B	; 91
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7d       	andi	r24, 0xDF	; 223
    2236:	8c 93       	st	X, r24

	#else
	    #error "EXTI2 must be ENABLE or DISABLE"
	#endif
}
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <MINT0_voidSetCallback>:

void MINT0_voidSetCallback( void (*A_fptr)(void)  )
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <MINT0_voidSetCallback+0x6>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
	INT0_CallBack = A_fptr;
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	90 93 04 02 	sts	0x0204, r25
    2254:	80 93 03 02 	sts	0x0203, r24
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <MINT1_voidSetCallback>:

void MINT1_voidSetCallback( void (*A_fptr)(void)  )
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <MINT1_voidSetCallback+0x6>
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	INT1_CallBack = A_fptr;
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	90 93 06 02 	sts	0x0206, r25
    2278:	80 93 05 02 	sts	0x0205, r24
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <MINT2_voidSetCallback>:

void MINT2_voidSetCallback( void (*A_fptr)(void)  )
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <MINT2_voidSetCallback+0x6>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
	INT2_CallBack = A_fptr;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	90 93 08 02 	sts	0x0208, r25
    229c:	80 93 07 02 	sts	0x0207, r24
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <MINT0_voidSetCallback_Three>:

void MINT0_voidSetCallback_Three( void (*A_fptr1)(void), void (*A_fptr2)(void), void (*A_fptr3)(void)  )
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <MINT0_voidSetCallback_Three+0x6>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <MINT0_voidSetCallback_Three+0x8>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <MINT0_voidSetCallback_Three+0xa>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	7c 83       	std	Y+4, r23	; 0x04
    22be:	6b 83       	std	Y+3, r22	; 0x03
    22c0:	5e 83       	std	Y+6, r21	; 0x06
    22c2:	4d 83       	std	Y+5, r20	; 0x05
	INT0_CallBack1 = A_fptr1;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	90 93 0a 02 	sts	0x020A, r25
    22cc:	80 93 09 02 	sts	0x0209, r24
	INT0_CallBack2 = A_fptr2;
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	90 93 0c 02 	sts	0x020C, r25
    22d8:	80 93 0b 02 	sts	0x020B, r24
	INT0_CallBack3 = A_fptr3;
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	90 93 0e 02 	sts	0x020E, r25
    22e4:	80 93 0d 02 	sts	0x020D, r24
}
    22e8:	26 96       	adiw	r28, 0x06	; 6
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <__vector_1>:


/**ISR of INT0*/
void __vector_1(void)__attribute__((signal))__attribute__((interrupt));
void __vector_1(void)
{
    22fa:	78 94       	sei
    22fc:	1f 92       	push	r1
    22fe:	0f 92       	push	r0
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	0f 92       	push	r0
    2304:	11 24       	eor	r1, r1
    2306:	2f 93       	push	r18
    2308:	3f 93       	push	r19
    230a:	4f 93       	push	r20
    230c:	5f 93       	push	r21
    230e:	6f 93       	push	r22
    2310:	7f 93       	push	r23
    2312:	8f 93       	push	r24
    2314:	9f 93       	push	r25
    2316:	af 93       	push	r26
    2318:	bf 93       	push	r27
    231a:	ef 93       	push	r30
    231c:	ff 93       	push	r31
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62

	u8 static L_State = 0;
	if(L_State == 0)
    2326:	80 91 02 02 	lds	r24, 0x0202
    232a:	88 23       	and	r24, r24
    232c:	71 f4       	brne	.+28     	; 0x234a <__vector_1+0x50>
	{
		L_State = 1; 	/* change it to the next state */
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	80 93 02 02 	sts	0x0202, r24
		if (INT0_CallBack1 != Null){
    2334:	80 91 09 02 	lds	r24, 0x0209
    2338:	90 91 0a 02 	lds	r25, 0x020A
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	29 f0       	breq	.+10     	; 0x234a <__vector_1+0x50>
			INT0_CallBack1 () ;
    2340:	e0 91 09 02 	lds	r30, 0x0209
    2344:	f0 91 0a 02 	lds	r31, 0x020A
    2348:	09 95       	icall
		}
	}

	if(L_State == 1)
    234a:	80 91 02 02 	lds	r24, 0x0202
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	71 f4       	brne	.+28     	; 0x236e <__vector_1+0x74>
	{
		L_State = 2;	/* change it to the next state */
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	80 93 02 02 	sts	0x0202, r24
		if (INT0_CallBack2 != Null){
    2358:	80 91 0b 02 	lds	r24, 0x020B
    235c:	90 91 0c 02 	lds	r25, 0x020C
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	29 f0       	breq	.+10     	; 0x236e <__vector_1+0x74>
			INT0_CallBack2 () ;
    2364:	e0 91 0b 02 	lds	r30, 0x020B
    2368:	f0 91 0c 02 	lds	r31, 0x020C
    236c:	09 95       	icall
		}
	}

	if(L_State == 2)
    236e:	80 91 02 02 	lds	r24, 0x0202
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	69 f4       	brne	.+26     	; 0x2390 <__vector_1+0x96>
	{
		L_State = 0;	/* reset */
    2376:	10 92 02 02 	sts	0x0202, r1
		if (INT0_CallBack3 != Null){
    237a:	80 91 0d 02 	lds	r24, 0x020D
    237e:	90 91 0e 02 	lds	r25, 0x020E
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	29 f0       	breq	.+10     	; 0x2390 <__vector_1+0x96>
			INT0_CallBack3 () ;
    2386:	e0 91 0d 02 	lds	r30, 0x020D
    238a:	f0 91 0e 02 	lds	r31, 0x020E
    238e:	09 95       	icall
		}
	}

}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	ff 91       	pop	r31
    2396:	ef 91       	pop	r30
    2398:	bf 91       	pop	r27
    239a:	af 91       	pop	r26
    239c:	9f 91       	pop	r25
    239e:	8f 91       	pop	r24
    23a0:	7f 91       	pop	r23
    23a2:	6f 91       	pop	r22
    23a4:	5f 91       	pop	r21
    23a6:	4f 91       	pop	r20
    23a8:	3f 91       	pop	r19
    23aa:	2f 91       	pop	r18
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	0f 90       	pop	r0
    23b2:	1f 90       	pop	r1
    23b4:	18 95       	reti

000023b6 <__vector_2>:


/**ISR of INT1*/
void __vector_2(void)__attribute__((signal))__attribute__((interrupt));
void __vector_2(void)
{
    23b6:	78 94       	sei
    23b8:	1f 92       	push	r1
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	0f 92       	push	r0
    23c0:	11 24       	eor	r1, r1
    23c2:	2f 93       	push	r18
    23c4:	3f 93       	push	r19
    23c6:	4f 93       	push	r20
    23c8:	5f 93       	push	r21
    23ca:	6f 93       	push	r22
    23cc:	7f 93       	push	r23
    23ce:	8f 93       	push	r24
    23d0:	9f 93       	push	r25
    23d2:	af 93       	push	r26
    23d4:	bf 93       	push	r27
    23d6:	ef 93       	push	r30
    23d8:	ff 93       	push	r31
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	if (INT1_CallBack != Null)
    23e2:	80 91 05 02 	lds	r24, 0x0205
    23e6:	90 91 06 02 	lds	r25, 0x0206
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	29 f0       	breq	.+10     	; 0x23f8 <__vector_2+0x42>
	{
		INT1_CallBack () ;
    23ee:	e0 91 05 02 	lds	r30, 0x0205
    23f2:	f0 91 06 02 	lds	r31, 0x0206
    23f6:	09 95       	icall
	}
}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	18 95       	reti

0000241e <__vector_3>:

/**ISR of INT2*/
void __vector_3(void)__attribute__((signal))__attribute__((interrupt));
void __vector_3(void)
{
    241e:	78 94       	sei
    2420:	1f 92       	push	r1
    2422:	0f 92       	push	r0
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	0f 92       	push	r0
    2428:	11 24       	eor	r1, r1
    242a:	2f 93       	push	r18
    242c:	3f 93       	push	r19
    242e:	4f 93       	push	r20
    2430:	5f 93       	push	r21
    2432:	6f 93       	push	r22
    2434:	7f 93       	push	r23
    2436:	8f 93       	push	r24
    2438:	9f 93       	push	r25
    243a:	af 93       	push	r26
    243c:	bf 93       	push	r27
    243e:	ef 93       	push	r30
    2440:	ff 93       	push	r31
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	if (INT2_CallBack != Null)
    244a:	80 91 07 02 	lds	r24, 0x0207
    244e:	90 91 08 02 	lds	r25, 0x0208
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	29 f0       	breq	.+10     	; 0x2460 <__vector_3+0x42>
	{
		INT2_CallBack () ;
    2456:	e0 91 07 02 	lds	r30, 0x0207
    245a:	f0 91 08 02 	lds	r31, 0x0208
    245e:	09 95       	icall
	}
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	ff 91       	pop	r31
    2466:	ef 91       	pop	r30
    2468:	bf 91       	pop	r27
    246a:	af 91       	pop	r26
    246c:	9f 91       	pop	r25
    246e:	8f 91       	pop	r24
    2470:	7f 91       	pop	r23
    2472:	6f 91       	pop	r22
    2474:	5f 91       	pop	r21
    2476:	4f 91       	pop	r20
    2478:	3f 91       	pop	r19
    247a:	2f 91       	pop	r18
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	0f 90       	pop	r0
    2482:	1f 90       	pop	r1
    2484:	18 95       	reti

00002486 <MDIO_voidSetPinDir>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_int.h"

void MDIO_voidSetPinDir (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDir)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <MDIO_voidSetPinDir+0x6>
    248c:	00 d0       	rcall	.+0      	; 0x248e <MDIO_voidSetPinDir+0x8>
    248e:	0f 92       	push	r0
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	6a 83       	std	Y+2, r22	; 0x02
    2498:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	3d 83       	std	Y+5, r19	; 0x05
    24a2:	2c 83       	std	Y+4, r18	; 0x04
    24a4:	6c 81       	ldd	r22, Y+4	; 0x04
    24a6:	7d 81       	ldd	r23, Y+5	; 0x05
    24a8:	62 30       	cpi	r22, 0x02	; 2
    24aa:	71 05       	cpc	r23, r1
    24ac:	d1 f1       	breq	.+116    	; 0x2522 <MDIO_voidSetPinDir+0x9c>
    24ae:	8c 81       	ldd	r24, Y+4	; 0x04
    24b0:	9d 81       	ldd	r25, Y+5	; 0x05
    24b2:	83 30       	cpi	r24, 0x03	; 3
    24b4:	91 05       	cpc	r25, r1
    24b6:	34 f4       	brge	.+12     	; 0x24c4 <MDIO_voidSetPinDir+0x3e>
    24b8:	2c 81       	ldd	r18, Y+4	; 0x04
    24ba:	3d 81       	ldd	r19, Y+5	; 0x05
    24bc:	21 30       	cpi	r18, 0x01	; 1
    24be:	31 05       	cpc	r19, r1
    24c0:	71 f0       	breq	.+28     	; 0x24de <MDIO_voidSetPinDir+0x58>
    24c2:	94 c0       	rjmp	.+296    	; 0x25ec <MDIO_voidSetPinDir+0x166>
    24c4:	6c 81       	ldd	r22, Y+4	; 0x04
    24c6:	7d 81       	ldd	r23, Y+5	; 0x05
    24c8:	63 30       	cpi	r22, 0x03	; 3
    24ca:	71 05       	cpc	r23, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <MDIO_voidSetPinDir+0x4a>
    24ce:	4b c0       	rjmp	.+150    	; 0x2566 <MDIO_voidSetPinDir+0xe0>
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	9d 81       	ldd	r25, Y+5	; 0x05
    24d4:	84 30       	cpi	r24, 0x04	; 4
    24d6:	91 05       	cpc	r25, r1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <MDIO_voidSetPinDir+0x56>
    24da:	67 c0       	rjmp	.+206    	; 0x25aa <MDIO_voidSetPinDir+0x124>
    24dc:	87 c0       	rjmp	.+270    	; 0x25ec <MDIO_voidSetPinDir+0x166>
	    {
	    case DIO_PORTA : WRT_BIT(DDRA , A_u8PinNo , A_u8PinDir) ; break ;
    24de:	aa e3       	ldi	r26, 0x3A	; 58
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	ea e3       	ldi	r30, 0x3A	; 58
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	48 2f       	mov	r20, r24
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <MDIO_voidSetPinDir+0x74>
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	2a 95       	dec	r18
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <MDIO_voidSetPinDir+0x70>
    24fe:	80 95       	com	r24
    2500:	48 23       	and	r20, r24
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	b9 01       	movw	r22, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <MDIO_voidSetPinDir+0x90>
    2512:	66 0f       	add	r22, r22
    2514:	77 1f       	adc	r23, r23
    2516:	8a 95       	dec	r24
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <MDIO_voidSetPinDir+0x8c>
    251a:	cb 01       	movw	r24, r22
    251c:	84 2b       	or	r24, r20
    251e:	8c 93       	st	X, r24
    2520:	65 c0       	rjmp	.+202    	; 0x25ec <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTB : WRT_BIT(DDRB , A_u8PinNo , A_u8PinDir) ; break ;
    2522:	a7 e3       	ldi	r26, 0x37	; 55
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e7 e3       	ldi	r30, 0x37	; 55
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 c0       	rjmp	.+4      	; 0x253e <MDIO_voidSetPinDir+0xb8>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	2a 95       	dec	r18
    2540:	e2 f7       	brpl	.-8      	; 0x253a <MDIO_voidSetPinDir+0xb4>
    2542:	80 95       	com	r24
    2544:	48 23       	and	r20, r24
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	b9 01       	movw	r22, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <MDIO_voidSetPinDir+0xd4>
    2556:	66 0f       	add	r22, r22
    2558:	77 1f       	adc	r23, r23
    255a:	8a 95       	dec	r24
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <MDIO_voidSetPinDir+0xd0>
    255e:	cb 01       	movw	r24, r22
    2560:	84 2b       	or	r24, r20
    2562:	8c 93       	st	X, r24
    2564:	43 c0       	rjmp	.+134    	; 0x25ec <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTC : WRT_BIT(DDRC , A_u8PinNo , A_u8PinDir) ; break ;
    2566:	a4 e3       	ldi	r26, 0x34	; 52
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e4 e3       	ldi	r30, 0x34	; 52
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <MDIO_voidSetPinDir+0xfc>
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	2a 95       	dec	r18
    2584:	e2 f7       	brpl	.-8      	; 0x257e <MDIO_voidSetPinDir+0xf8>
    2586:	80 95       	com	r24
    2588:	48 23       	and	r20, r24
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	b9 01       	movw	r22, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <MDIO_voidSetPinDir+0x118>
    259a:	66 0f       	add	r22, r22
    259c:	77 1f       	adc	r23, r23
    259e:	8a 95       	dec	r24
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <MDIO_voidSetPinDir+0x114>
    25a2:	cb 01       	movw	r24, r22
    25a4:	84 2b       	or	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	21 c0       	rjmp	.+66     	; 0x25ec <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTD : WRT_BIT(DDRD , A_u8PinNo , A_u8PinDir) ; break ;
    25aa:	a1 e3       	ldi	r26, 0x31	; 49
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e1 e3       	ldi	r30, 0x31	; 49
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <MDIO_voidSetPinDir+0x140>
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	2a 95       	dec	r18
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <MDIO_voidSetPinDir+0x13c>
    25ca:	80 95       	com	r24
    25cc:	48 23       	and	r20, r24
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	b9 01       	movw	r22, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <MDIO_voidSetPinDir+0x15c>
    25de:	66 0f       	add	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	8a 95       	dec	r24
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <MDIO_voidSetPinDir+0x158>
    25e6:	cb 01       	movw	r24, r22
    25e8:	84 2b       	or	r24, r20
    25ea:	8c 93       	st	X, r24
	    default : /**Error*/ break ;
	    }
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <MDIO_voidSetPinVal>:

void MDIO_voidSetPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <MDIO_voidSetPinVal+0x6>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <MDIO_voidSetPinVal+0x8>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	3c 83       	std	Y+4, r19	; 0x04
    2614:	2b 83       	std	Y+3, r18	; 0x03
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	91 05       	cpc	r25, r1
    261e:	51 f1       	breq	.+84     	; 0x2674 <MDIO_voidSetPinVal+0x78>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	23 30       	cpi	r18, 0x03	; 3
    2626:	31 05       	cpc	r19, r1
    2628:	34 f4       	brge	.+12     	; 0x2636 <MDIO_voidSetPinVal+0x3a>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	81 30       	cpi	r24, 0x01	; 1
    2630:	91 05       	cpc	r25, r1
    2632:	61 f0       	breq	.+24     	; 0x264c <MDIO_voidSetPinVal+0x50>
    2634:	5a c0       	rjmp	.+180    	; 0x26ea <MDIO_voidSetPinVal+0xee>
    2636:	2b 81       	ldd	r18, Y+3	; 0x03
    2638:	3c 81       	ldd	r19, Y+4	; 0x04
    263a:	23 30       	cpi	r18, 0x03	; 3
    263c:	31 05       	cpc	r19, r1
    263e:	71 f1       	breq	.+92     	; 0x269c <MDIO_voidSetPinVal+0xa0>
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	84 30       	cpi	r24, 0x04	; 4
    2646:	91 05       	cpc	r25, r1
    2648:	e9 f1       	breq	.+122    	; 0x26c4 <MDIO_voidSetPinVal+0xc8>
    264a:	4f c0       	rjmp	.+158    	; 0x26ea <MDIO_voidSetPinVal+0xee>
		{
		case DIO_PORTA : SET_BIT(PORTA , A_u8PinNo ) ; break ;
    264c:	ab e3       	ldi	r26, 0x3B	; 59
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	eb e3       	ldi	r30, 0x3B	; 59
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	48 2f       	mov	r20, r24
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	02 2e       	mov	r0, r18
    2664:	02 c0       	rjmp	.+4      	; 0x266a <MDIO_voidSetPinVal+0x6e>
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	0a 94       	dec	r0
    266c:	e2 f7       	brpl	.-8      	; 0x2666 <MDIO_voidSetPinVal+0x6a>
    266e:	84 2b       	or	r24, r20
    2670:	8c 93       	st	X, r24
    2672:	3b c0       	rjmp	.+118    	; 0x26ea <MDIO_voidSetPinVal+0xee>
		case DIO_PORTB : SET_BIT(PORTB , A_u8PinNo ) ; break ;
    2674:	a8 e3       	ldi	r26, 0x38	; 56
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e8 e3       	ldi	r30, 0x38	; 56
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	48 2f       	mov	r20, r24
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 2e       	mov	r0, r18
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <MDIO_voidSetPinVal+0x96>
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	0a 94       	dec	r0
    2694:	e2 f7       	brpl	.-8      	; 0x268e <MDIO_voidSetPinVal+0x92>
    2696:	84 2b       	or	r24, r20
    2698:	8c 93       	st	X, r24
    269a:	27 c0       	rjmp	.+78     	; 0x26ea <MDIO_voidSetPinVal+0xee>
		case DIO_PORTC : SET_BIT(PORTC , A_u8PinNo ) ; break ;
    269c:	a5 e3       	ldi	r26, 0x35	; 53
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e5 e3       	ldi	r30, 0x35	; 53
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	48 2f       	mov	r20, r24
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	02 2e       	mov	r0, r18
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <MDIO_voidSetPinVal+0xbe>
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	0a 94       	dec	r0
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <MDIO_voidSetPinVal+0xba>
    26be:	84 2b       	or	r24, r20
    26c0:	8c 93       	st	X, r24
    26c2:	13 c0       	rjmp	.+38     	; 0x26ea <MDIO_voidSetPinVal+0xee>
		case DIO_PORTD : SET_BIT(PORTD , A_u8PinNo ) ; break ;
    26c4:	a2 e3       	ldi	r26, 0x32	; 50
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e2 e3       	ldi	r30, 0x32	; 50
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <MDIO_voidSetPinVal+0xe6>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <MDIO_voidSetPinVal+0xe2>
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <MDIO_u8GetPinVal>:

u8   MDIO_u8GetPinVal   (u8 A_u8PortNo , u8 A_u8PinNo)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <MDIO_u8GetPinVal+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <MDIO_u8GetPinVal+0x8>
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	8a 83       	std	Y+2, r24	; 0x02
    2708:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	3d 83       	std	Y+5, r19	; 0x05
    2712:	2c 83       	std	Y+4, r18	; 0x04
    2714:	4c 81       	ldd	r20, Y+4	; 0x04
    2716:	5d 81       	ldd	r21, Y+5	; 0x05
    2718:	42 30       	cpi	r20, 0x02	; 2
    271a:	51 05       	cpc	r21, r1
    271c:	b1 f1       	breq	.+108    	; 0x278a <MDIO_u8GetPinVal+0x92>
    271e:	8c 81       	ldd	r24, Y+4	; 0x04
    2720:	9d 81       	ldd	r25, Y+5	; 0x05
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	91 05       	cpc	r25, r1
    2726:	34 f4       	brge	.+12     	; 0x2734 <MDIO_u8GetPinVal+0x3c>
    2728:	2c 81       	ldd	r18, Y+4	; 0x04
    272a:	3d 81       	ldd	r19, Y+5	; 0x05
    272c:	21 30       	cpi	r18, 0x01	; 1
    272e:	31 05       	cpc	r19, r1
    2730:	71 f0       	breq	.+28     	; 0x274e <MDIO_u8GetPinVal+0x56>
    2732:	84 c0       	rjmp	.+264    	; 0x283c <MDIO_u8GetPinVal+0x144>
    2734:	4c 81       	ldd	r20, Y+4	; 0x04
    2736:	5d 81       	ldd	r21, Y+5	; 0x05
    2738:	43 30       	cpi	r20, 0x03	; 3
    273a:	51 05       	cpc	r21, r1
    273c:	09 f4       	brne	.+2      	; 0x2740 <MDIO_u8GetPinVal+0x48>
    273e:	43 c0       	rjmp	.+134    	; 0x27c6 <MDIO_u8GetPinVal+0xce>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	84 30       	cpi	r24, 0x04	; 4
    2746:	91 05       	cpc	r25, r1
    2748:	09 f4       	brne	.+2      	; 0x274c <MDIO_u8GetPinVal+0x54>
    274a:	5b c0       	rjmp	.+182    	; 0x2802 <MDIO_u8GetPinVal+0x10a>
    274c:	77 c0       	rjmp	.+238    	; 0x283c <MDIO_u8GetPinVal+0x144>
		{
		case DIO_PORTA : L_u8PinVal = READ_BIT(PINA , A_u8PinNo) ; break ;
    274e:	e9 e3       	ldi	r30, 0x39	; 57
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	48 2f       	mov	r20, r24
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <MDIO_u8GetPinVal+0x70>
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	2a 95       	dec	r18
    276a:	e2 f7       	brpl	.-8      	; 0x2764 <MDIO_u8GetPinVal+0x6c>
    276c:	9a 01       	movw	r18, r20
    276e:	28 23       	and	r18, r24
    2770:	39 23       	and	r19, r25
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a9 01       	movw	r20, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <MDIO_u8GetPinVal+0x88>
    277c:	55 95       	asr	r21
    277e:	47 95       	ror	r20
    2780:	8a 95       	dec	r24
    2782:	e2 f7       	brpl	.-8      	; 0x277c <MDIO_u8GetPinVal+0x84>
    2784:	ca 01       	movw	r24, r20
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	59 c0       	rjmp	.+178    	; 0x283c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTB : L_u8PinVal = READ_BIT(PINB , A_u8PinNo) ; break ;
    278a:	e6 e3       	ldi	r30, 0x36	; 54
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	48 2f       	mov	r20, r24
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <MDIO_u8GetPinVal+0xac>
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	2a 95       	dec	r18
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <MDIO_u8GetPinVal+0xa8>
    27a8:	9a 01       	movw	r18, r20
    27aa:	28 23       	and	r18, r24
    27ac:	39 23       	and	r19, r25
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a9 01       	movw	r20, r18
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <MDIO_u8GetPinVal+0xc4>
    27b8:	55 95       	asr	r21
    27ba:	47 95       	ror	r20
    27bc:	8a 95       	dec	r24
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <MDIO_u8GetPinVal+0xc0>
    27c0:	ca 01       	movw	r24, r20
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	3b c0       	rjmp	.+118    	; 0x283c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTC : L_u8PinVal = READ_BIT(PINC , A_u8PinNo) ; break ;
    27c6:	e3 e3       	ldi	r30, 0x33	; 51
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	48 2f       	mov	r20, r24
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <MDIO_u8GetPinVal+0xe8>
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	2a 95       	dec	r18
    27e2:	e2 f7       	brpl	.-8      	; 0x27dc <MDIO_u8GetPinVal+0xe4>
    27e4:	9a 01       	movw	r18, r20
    27e6:	28 23       	and	r18, r24
    27e8:	39 23       	and	r19, r25
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a9 01       	movw	r20, r18
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <MDIO_u8GetPinVal+0x100>
    27f4:	55 95       	asr	r21
    27f6:	47 95       	ror	r20
    27f8:	8a 95       	dec	r24
    27fa:	e2 f7       	brpl	.-8      	; 0x27f4 <MDIO_u8GetPinVal+0xfc>
    27fc:	ca 01       	movw	r24, r20
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	1d c0       	rjmp	.+58     	; 0x283c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTD : L_u8PinVal = READ_BIT(PIND , A_u8PinNo) ; break ;
    2802:	e0 e3       	ldi	r30, 0x30	; 48
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	48 2f       	mov	r20, r24
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	02 c0       	rjmp	.+4      	; 0x281c <MDIO_u8GetPinVal+0x124>
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	2a 95       	dec	r18
    281e:	e2 f7       	brpl	.-8      	; 0x2818 <MDIO_u8GetPinVal+0x120>
    2820:	9a 01       	movw	r18, r20
    2822:	28 23       	and	r18, r24
    2824:	39 23       	and	r19, r25
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a9 01       	movw	r20, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <MDIO_u8GetPinVal+0x13c>
    2830:	55 95       	asr	r21
    2832:	47 95       	ror	r20
    2834:	8a 95       	dec	r24
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <MDIO_u8GetPinVal+0x138>
    2838:	ca 01       	movw	r24, r20
    283a:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <MDIO_voidSetPortVal>:

void MDIO_voidSetPortVal (u8 A_u8PortNo , u8 A_u8PortVal)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <MDIO_voidSetPortVal+0x6>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <MDIO_voidSetPortVal+0x8>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	3c 83       	std	Y+4, r19	; 0x04
    2866:	2b 83       	std	Y+3, r18	; 0x03
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	82 30       	cpi	r24, 0x02	; 2
    286e:	91 05       	cpc	r25, r1
    2870:	d9 f0       	breq	.+54     	; 0x28a8 <MDIO_voidSetPortVal+0x5a>
    2872:	2b 81       	ldd	r18, Y+3	; 0x03
    2874:	3c 81       	ldd	r19, Y+4	; 0x04
    2876:	23 30       	cpi	r18, 0x03	; 3
    2878:	31 05       	cpc	r19, r1
    287a:	34 f4       	brge	.+12     	; 0x2888 <MDIO_voidSetPortVal+0x3a>
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	91 05       	cpc	r25, r1
    2884:	61 f0       	breq	.+24     	; 0x289e <MDIO_voidSetPortVal+0x50>
    2886:	1e c0       	rjmp	.+60     	; 0x28c4 <MDIO_voidSetPortVal+0x76>
    2888:	2b 81       	ldd	r18, Y+3	; 0x03
    288a:	3c 81       	ldd	r19, Y+4	; 0x04
    288c:	23 30       	cpi	r18, 0x03	; 3
    288e:	31 05       	cpc	r19, r1
    2890:	81 f0       	breq	.+32     	; 0x28b2 <MDIO_voidSetPortVal+0x64>
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	91 05       	cpc	r25, r1
    289a:	81 f0       	breq	.+32     	; 0x28bc <MDIO_voidSetPortVal+0x6e>
    289c:	13 c0       	rjmp	.+38     	; 0x28c4 <MDIO_voidSetPortVal+0x76>
		{
		case DIO_PORTA : PORTA = A_u8PortVal  ; break ;
    289e:	eb e3       	ldi	r30, 0x3B	; 59
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	80 83       	st	Z, r24
    28a6:	0e c0       	rjmp	.+28     	; 0x28c4 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTB : PORTB = A_u8PortVal  ; break ;
    28a8:	e8 e3       	ldi	r30, 0x38	; 56
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	80 83       	st	Z, r24
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTC : PORTC = A_u8PortVal  ; break ;
    28b2:	e5 e3       	ldi	r30, 0x35	; 53
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	80 83       	st	Z, r24
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTD : PORTD = A_u8PortVal  ; break ;
    28bc:	e2 e3       	ldi	r30, 0x32	; 50
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <MDIO_voidSetPortDir>:

void MDIO_voidSetPortDir (u8 A_u8PortNo , u8 A_u8PortVal)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <MDIO_voidSetPortDir+0x6>
    28d8:	00 d0       	rcall	.+0      	; 0x28da <MDIO_voidSetPortDir+0x8>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	3c 83       	std	Y+4, r19	; 0x04
    28ea:	2b 83       	std	Y+3, r18	; 0x03
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	82 30       	cpi	r24, 0x02	; 2
    28f2:	91 05       	cpc	r25, r1
    28f4:	d9 f0       	breq	.+54     	; 0x292c <MDIO_voidSetPortDir+0x5a>
    28f6:	2b 81       	ldd	r18, Y+3	; 0x03
    28f8:	3c 81       	ldd	r19, Y+4	; 0x04
    28fa:	23 30       	cpi	r18, 0x03	; 3
    28fc:	31 05       	cpc	r19, r1
    28fe:	34 f4       	brge	.+12     	; 0x290c <MDIO_voidSetPortDir+0x3a>
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	9c 81       	ldd	r25, Y+4	; 0x04
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	91 05       	cpc	r25, r1
    2908:	61 f0       	breq	.+24     	; 0x2922 <MDIO_voidSetPortDir+0x50>
    290a:	1e c0       	rjmp	.+60     	; 0x2948 <MDIO_voidSetPortDir+0x76>
    290c:	2b 81       	ldd	r18, Y+3	; 0x03
    290e:	3c 81       	ldd	r19, Y+4	; 0x04
    2910:	23 30       	cpi	r18, 0x03	; 3
    2912:	31 05       	cpc	r19, r1
    2914:	81 f0       	breq	.+32     	; 0x2936 <MDIO_voidSetPortDir+0x64>
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	84 30       	cpi	r24, 0x04	; 4
    291c:	91 05       	cpc	r25, r1
    291e:	81 f0       	breq	.+32     	; 0x2940 <MDIO_voidSetPortDir+0x6e>
    2920:	13 c0       	rjmp	.+38     	; 0x2948 <MDIO_voidSetPortDir+0x76>
		{
		case DIO_PORTA : DDRA = A_u8PortVal  ; break ;
    2922:	ea e3       	ldi	r30, 0x3A	; 58
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	80 83       	st	Z, r24
    292a:	0e c0       	rjmp	.+28     	; 0x2948 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTB : DDRB = A_u8PortVal  ; break ;
    292c:	e7 e3       	ldi	r30, 0x37	; 55
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	80 83       	st	Z, r24
    2934:	09 c0       	rjmp	.+18     	; 0x2948 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTC : DDRC = A_u8PortVal  ; break ;
    2936:	e4 e3       	ldi	r30, 0x34	; 52
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	80 83       	st	Z, r24
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTD : DDRD = A_u8PortVal  ; break ;
    2940:	e1 e3       	ldi	r30, 0x31	; 49
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <MDIO_u8GetPortVal>:

u8   MDIO_u8GetPortVal   (u8 A_u8PortNo)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	00 d0       	rcall	.+0      	; 0x295c <MDIO_u8GetPortVal+0x6>
    295c:	00 d0       	rcall	.+0      	; 0x295e <MDIO_u8GetPortVal+0x8>
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3c 83       	std	Y+4, r19	; 0x04
    296c:	2b 83       	std	Y+3, r18	; 0x03
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	82 30       	cpi	r24, 0x02	; 2
    2974:	91 05       	cpc	r25, r1
    2976:	d9 f0       	breq	.+54     	; 0x29ae <MDIO_u8GetPortVal+0x58>
    2978:	2b 81       	ldd	r18, Y+3	; 0x03
    297a:	3c 81       	ldd	r19, Y+4	; 0x04
    297c:	23 30       	cpi	r18, 0x03	; 3
    297e:	31 05       	cpc	r19, r1
    2980:	34 f4       	brge	.+12     	; 0x298e <MDIO_u8GetPortVal+0x38>
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	91 05       	cpc	r25, r1
    298a:	61 f0       	breq	.+24     	; 0x29a4 <MDIO_u8GetPortVal+0x4e>
    298c:	1e c0       	rjmp	.+60     	; 0x29ca <MDIO_u8GetPortVal+0x74>
    298e:	2b 81       	ldd	r18, Y+3	; 0x03
    2990:	3c 81       	ldd	r19, Y+4	; 0x04
    2992:	23 30       	cpi	r18, 0x03	; 3
    2994:	31 05       	cpc	r19, r1
    2996:	81 f0       	breq	.+32     	; 0x29b8 <MDIO_u8GetPortVal+0x62>
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	84 30       	cpi	r24, 0x04	; 4
    299e:	91 05       	cpc	r25, r1
    29a0:	81 f0       	breq	.+32     	; 0x29c2 <MDIO_u8GetPortVal+0x6c>
    29a2:	13 c0       	rjmp	.+38     	; 0x29ca <MDIO_u8GetPortVal+0x74>
		{
		case DIO_PORTA : L_u8PinVal = PINA ; break ;
    29a4:	e9 e3       	ldi	r30, 0x39	; 57
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	0e c0       	rjmp	.+28     	; 0x29ca <MDIO_u8GetPortVal+0x74>
		case DIO_PORTB : L_u8PinVal = PINB ; break ;
    29ae:	e6 e3       	ldi	r30, 0x36	; 54
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	09 c0       	rjmp	.+18     	; 0x29ca <MDIO_u8GetPortVal+0x74>
		case DIO_PORTC : L_u8PinVal = PINC ; break ;
    29b8:	e3 e3       	ldi	r30, 0x33	; 51
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	04 c0       	rjmp	.+8      	; 0x29ca <MDIO_u8GetPortVal+0x74>
		case DIO_PORTD : L_u8PinVal = PIND ; break ;
    29c2:	e0 e3       	ldi	r30, 0x30	; 48
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <MDIO_voidClrPinVal>:

void MDIO_voidClrPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <MDIO_voidClrPinVal+0x6>
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <MDIO_voidClrPinVal+0x8>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	3c 83       	std	Y+4, r19	; 0x04
    29f2:	2b 83       	std	Y+3, r18	; 0x03
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	82 30       	cpi	r24, 0x02	; 2
    29fa:	91 05       	cpc	r25, r1
    29fc:	61 f1       	breq	.+88     	; 0x2a56 <MDIO_voidClrPinVal+0x7c>
    29fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2a00:	3c 81       	ldd	r19, Y+4	; 0x04
    2a02:	23 30       	cpi	r18, 0x03	; 3
    2a04:	31 05       	cpc	r19, r1
    2a06:	34 f4       	brge	.+12     	; 0x2a14 <MDIO_voidClrPinVal+0x3a>
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	91 05       	cpc	r25, r1
    2a10:	69 f0       	breq	.+26     	; 0x2a2c <MDIO_voidClrPinVal+0x52>
    2a12:	5f c0       	rjmp	.+190    	; 0x2ad2 <MDIO_voidClrPinVal+0xf8>
    2a14:	2b 81       	ldd	r18, Y+3	; 0x03
    2a16:	3c 81       	ldd	r19, Y+4	; 0x04
    2a18:	23 30       	cpi	r18, 0x03	; 3
    2a1a:	31 05       	cpc	r19, r1
    2a1c:	89 f1       	breq	.+98     	; 0x2a80 <MDIO_voidClrPinVal+0xa6>
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	84 30       	cpi	r24, 0x04	; 4
    2a24:	91 05       	cpc	r25, r1
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <MDIO_voidClrPinVal+0x50>
    2a28:	40 c0       	rjmp	.+128    	; 0x2aaa <MDIO_voidClrPinVal+0xd0>
    2a2a:	53 c0       	rjmp	.+166    	; 0x2ad2 <MDIO_voidClrPinVal+0xf8>
		{
		case DIO_PORTA : CLR_BIT(PORTA , A_u8PinNo) ; break ;
    2a2c:	ab e3       	ldi	r26, 0x3B	; 59
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	eb e3       	ldi	r30, 0x3B	; 59
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	48 2f       	mov	r20, r24
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	02 2e       	mov	r0, r18
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <MDIO_voidClrPinVal+0x70>
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	0a 94       	dec	r0
    2a4c:	e2 f7       	brpl	.-8      	; 0x2a46 <MDIO_voidClrPinVal+0x6c>
    2a4e:	80 95       	com	r24
    2a50:	84 23       	and	r24, r20
    2a52:	8c 93       	st	X, r24
    2a54:	3e c0       	rjmp	.+124    	; 0x2ad2 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTB : CLR_BIT(PORTB , A_u8PinNo) ; break ;
    2a56:	a8 e3       	ldi	r26, 0x38	; 56
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e8 e3       	ldi	r30, 0x38	; 56
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	48 2f       	mov	r20, r24
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	02 2e       	mov	r0, r18
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <MDIO_voidClrPinVal+0x9a>
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	0a 94       	dec	r0
    2a76:	e2 f7       	brpl	.-8      	; 0x2a70 <MDIO_voidClrPinVal+0x96>
    2a78:	80 95       	com	r24
    2a7a:	84 23       	and	r24, r20
    2a7c:	8c 93       	st	X, r24
    2a7e:	29 c0       	rjmp	.+82     	; 0x2ad2 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTC : CLR_BIT(PORTC , A_u8PinNo) ; break ;
    2a80:	a5 e3       	ldi	r26, 0x35	; 53
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e5 e3       	ldi	r30, 0x35	; 53
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	48 2f       	mov	r20, r24
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	02 2e       	mov	r0, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <MDIO_voidClrPinVal+0xc4>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	0a 94       	dec	r0
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <MDIO_voidClrPinVal+0xc0>
    2aa2:	80 95       	com	r24
    2aa4:	84 23       	and	r24, r20
    2aa6:	8c 93       	st	X, r24
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTD : CLR_BIT(PORTD , A_u8PinNo) ; break ;
    2aaa:	a2 e3       	ldi	r26, 0x32	; 50
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e2 e3       	ldi	r30, 0x32	; 50
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	48 2f       	mov	r20, r24
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	02 2e       	mov	r0, r18
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <MDIO_voidClrPinVal+0xee>
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	0a 94       	dec	r0
    2aca:	e2 f7       	brpl	.-8      	; 0x2ac4 <MDIO_voidClrPinVal+0xea>
    2acc:	80 95       	com	r24
    2ace:	84 23       	and	r24, r20
    2ad0:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	08 95       	ret

00002ae0 <MDIO_voidClrPort>:

void MDIO_voidClrPort (u8 A_u8PortNo)
{
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	00 d0       	rcall	.+0      	; 0x2ae6 <MDIO_voidClrPort+0x6>
    2ae6:	0f 92       	push	r0
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	3b 83       	std	Y+3, r19	; 0x03
    2af6:	2a 83       	std	Y+2, r18	; 0x02
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	91 05       	cpc	r25, r1
    2b00:	d1 f0       	breq	.+52     	; 0x2b36 <MDIO_voidClrPort+0x56>
    2b02:	2a 81       	ldd	r18, Y+2	; 0x02
    2b04:	3b 81       	ldd	r19, Y+3	; 0x03
    2b06:	23 30       	cpi	r18, 0x03	; 3
    2b08:	31 05       	cpc	r19, r1
    2b0a:	34 f4       	brge	.+12     	; 0x2b18 <MDIO_voidClrPort+0x38>
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	91 05       	cpc	r25, r1
    2b14:	61 f0       	breq	.+24     	; 0x2b2e <MDIO_voidClrPort+0x4e>
    2b16:	1a c0       	rjmp	.+52     	; 0x2b4c <MDIO_voidClrPort+0x6c>
    2b18:	2a 81       	ldd	r18, Y+2	; 0x02
    2b1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b1c:	23 30       	cpi	r18, 0x03	; 3
    2b1e:	31 05       	cpc	r19, r1
    2b20:	71 f0       	breq	.+28     	; 0x2b3e <MDIO_voidClrPort+0x5e>
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	84 30       	cpi	r24, 0x04	; 4
    2b28:	91 05       	cpc	r25, r1
    2b2a:	69 f0       	breq	.+26     	; 0x2b46 <MDIO_voidClrPort+0x66>
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <MDIO_voidClrPort+0x6c>
		{
		case DIO_PORTA : PORTA = ALL_PINS_ZERO ; break ;
    2b2e:	eb e3       	ldi	r30, 0x3B	; 59
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	10 82       	st	Z, r1
    2b34:	0b c0       	rjmp	.+22     	; 0x2b4c <MDIO_voidClrPort+0x6c>
		case DIO_PORTB : PORTB = ALL_PINS_ZERO ; break ;
    2b36:	e8 e3       	ldi	r30, 0x38	; 56
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	10 82       	st	Z, r1
    2b3c:	07 c0       	rjmp	.+14     	; 0x2b4c <MDIO_voidClrPort+0x6c>
		case DIO_PORTC : PORTC = ALL_PINS_ZERO ; break ;
    2b3e:	e5 e3       	ldi	r30, 0x35	; 53
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	10 82       	st	Z, r1
    2b44:	03 c0       	rjmp	.+6      	; 0x2b4c <MDIO_voidClrPort+0x6c>
		case DIO_PORTD : PORTD = ALL_PINS_ZERO ; break ;
    2b46:	e2 e3       	ldi	r30, 0x32	; 50
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	10 82       	st	Z, r1
		default : /**Error*/ break ;
		}
}
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <MDIO_voidTogPinVal>:

void MDIO_voidTogPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <MDIO_voidTogPinVal+0x6>
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <MDIO_voidTogPinVal+0x8>
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3c 83       	std	Y+4, r19	; 0x04
    2b70:	2b 83       	std	Y+3, r18	; 0x03
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	82 30       	cpi	r24, 0x02	; 2
    2b78:	91 05       	cpc	r25, r1
    2b7a:	51 f1       	breq	.+84     	; 0x2bd0 <MDIO_voidTogPinVal+0x78>
    2b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b80:	23 30       	cpi	r18, 0x03	; 3
    2b82:	31 05       	cpc	r19, r1
    2b84:	34 f4       	brge	.+12     	; 0x2b92 <MDIO_voidTogPinVal+0x3a>
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	61 f0       	breq	.+24     	; 0x2ba8 <MDIO_voidTogPinVal+0x50>
    2b90:	5a c0       	rjmp	.+180    	; 0x2c46 <MDIO_voidTogPinVal+0xee>
    2b92:	2b 81       	ldd	r18, Y+3	; 0x03
    2b94:	3c 81       	ldd	r19, Y+4	; 0x04
    2b96:	23 30       	cpi	r18, 0x03	; 3
    2b98:	31 05       	cpc	r19, r1
    2b9a:	71 f1       	breq	.+92     	; 0x2bf8 <MDIO_voidTogPinVal+0xa0>
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba0:	84 30       	cpi	r24, 0x04	; 4
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	e9 f1       	breq	.+122    	; 0x2c20 <MDIO_voidTogPinVal+0xc8>
    2ba6:	4f c0       	rjmp	.+158    	; 0x2c46 <MDIO_voidTogPinVal+0xee>
		{
		case DIO_PORTA : TOG_BIT(PORTA , A_u8PinNo) ; break ;
    2ba8:	ab e3       	ldi	r26, 0x3B	; 59
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	eb e3       	ldi	r30, 0x3B	; 59
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	48 2f       	mov	r20, r24
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 2e       	mov	r0, r18
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <MDIO_voidTogPinVal+0x6e>
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	0a 94       	dec	r0
    2bc8:	e2 f7       	brpl	.-8      	; 0x2bc2 <MDIO_voidTogPinVal+0x6a>
    2bca:	84 27       	eor	r24, r20
    2bcc:	8c 93       	st	X, r24
    2bce:	3b c0       	rjmp	.+118    	; 0x2c46 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTB : TOG_BIT(PORTB , A_u8PinNo) ; break ;
    2bd0:	a8 e3       	ldi	r26, 0x38	; 56
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e8 e3       	ldi	r30, 0x38	; 56
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	48 2f       	mov	r20, r24
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 2e       	mov	r0, r18
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <MDIO_voidTogPinVal+0x96>
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	0a 94       	dec	r0
    2bf0:	e2 f7       	brpl	.-8      	; 0x2bea <MDIO_voidTogPinVal+0x92>
    2bf2:	84 27       	eor	r24, r20
    2bf4:	8c 93       	st	X, r24
    2bf6:	27 c0       	rjmp	.+78     	; 0x2c46 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTC : TOG_BIT(PORTC , A_u8PinNo) ; break ;
    2bf8:	a5 e3       	ldi	r26, 0x35	; 53
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e5 e3       	ldi	r30, 0x35	; 53
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	48 2f       	mov	r20, r24
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 2e       	mov	r0, r18
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <MDIO_voidTogPinVal+0xbe>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0a 94       	dec	r0
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <MDIO_voidTogPinVal+0xba>
    2c1a:	84 27       	eor	r24, r20
    2c1c:	8c 93       	st	X, r24
    2c1e:	13 c0       	rjmp	.+38     	; 0x2c46 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTD : TOG_BIT(PORTD , A_u8PinNo) ; break ;
    2c20:	a2 e3       	ldi	r26, 0x32	; 50
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e2 e3       	ldi	r30, 0x32	; 50
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	48 2f       	mov	r20, r24
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	02 2e       	mov	r0, r18
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <MDIO_voidTogPinVal+0xe6>
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	0a 94       	dec	r0
    2c40:	e2 f7       	brpl	.-8      	; 0x2c3a <MDIO_voidTogPinVal+0xe2>
    2c42:	84 27       	eor	r24, r20
    2c44:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <MDIO_voidTogPort>:

void MDIO_voidTogPort (u8 A_u8PortNo)
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <MDIO_voidTogPort+0x6>
    2c5a:	0f 92       	push	r0
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	3b 83       	std	Y+3, r19	; 0x03
    2c6a:	2a 83       	std	Y+2, r18	; 0x02
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	91 05       	cpc	r25, r1
    2c74:	f1 f0       	breq	.+60     	; 0x2cb2 <MDIO_voidTogPort+0x5e>
    2c76:	2a 81       	ldd	r18, Y+2	; 0x02
    2c78:	3b 81       	ldd	r19, Y+3	; 0x03
    2c7a:	23 30       	cpi	r18, 0x03	; 3
    2c7c:	31 05       	cpc	r19, r1
    2c7e:	34 f4       	brge	.+12     	; 0x2c8c <MDIO_voidTogPort+0x38>
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	91 05       	cpc	r25, r1
    2c88:	61 f0       	breq	.+24     	; 0x2ca2 <MDIO_voidTogPort+0x4e>
    2c8a:	2a c0       	rjmp	.+84     	; 0x2ce0 <MDIO_voidTogPort+0x8c>
    2c8c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c8e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c90:	23 30       	cpi	r18, 0x03	; 3
    2c92:	31 05       	cpc	r19, r1
    2c94:	b1 f0       	breq	.+44     	; 0x2cc2 <MDIO_voidTogPort+0x6e>
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	84 30       	cpi	r24, 0x04	; 4
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	c9 f0       	breq	.+50     	; 0x2cd2 <MDIO_voidTogPort+0x7e>
    2ca0:	1f c0       	rjmp	.+62     	; 0x2ce0 <MDIO_voidTogPort+0x8c>
		{
		case DIO_PORTA : PORTA = ~PORTA ; break ;
    2ca2:	ab e3       	ldi	r26, 0x3B	; 59
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	eb e3       	ldi	r30, 0x3B	; 59
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 95       	com	r24
    2cae:	8c 93       	st	X, r24
    2cb0:	17 c0       	rjmp	.+46     	; 0x2ce0 <MDIO_voidTogPort+0x8c>
		case DIO_PORTB : PORTB = ~PORTB ; break ;
    2cb2:	a8 e3       	ldi	r26, 0x38	; 56
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e8 e3       	ldi	r30, 0x38	; 56
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 95       	com	r24
    2cbe:	8c 93       	st	X, r24
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <MDIO_voidTogPort+0x8c>
		case DIO_PORTC : PORTC = ~PORTC ; break ;
    2cc2:	a5 e3       	ldi	r26, 0x35	; 53
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e5 e3       	ldi	r30, 0x35	; 53
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	80 95       	com	r24
    2cce:	8c 93       	st	X, r24
    2cd0:	07 c0       	rjmp	.+14     	; 0x2ce0 <MDIO_voidTogPort+0x8c>
		case DIO_PORTD : PORTD = ~PORTD ; break ;
    2cd2:	a2 e3       	ldi	r26, 0x32	; 50
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e2 e3       	ldi	r30, 0x32	; 50
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 95       	com	r24
    2cde:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <MDIO_voidWriteLowNibble>:

void MDIO_voidWriteLowNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <MDIO_voidWriteLowNibble+0x6>
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <MDIO_voidWriteLowNibble+0x8>
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal & LOW_NIBBLE_OUTPUT ;
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	8f 70       	andi	r24, 0x0F	; 15
    2d00:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	3c 83       	std	Y+4, r19	; 0x04
    2d0a:	2b 83       	std	Y+3, r18	; 0x03
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	91 05       	cpc	r25, r1
    2d14:	31 f1       	breq	.+76     	; 0x2d62 <MDIO_voidWriteLowNibble+0x76>
    2d16:	2b 81       	ldd	r18, Y+3	; 0x03
    2d18:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1a:	23 30       	cpi	r18, 0x03	; 3
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	34 f4       	brge	.+12     	; 0x2d2c <MDIO_voidWriteLowNibble+0x40>
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	91 05       	cpc	r25, r1
    2d28:	61 f0       	breq	.+24     	; 0x2d42 <MDIO_voidWriteLowNibble+0x56>
    2d2a:	4a c0       	rjmp	.+148    	; 0x2dc0 <MDIO_voidWriteLowNibble+0xd4>
    2d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d30:	23 30       	cpi	r18, 0x03	; 3
    2d32:	31 05       	cpc	r19, r1
    2d34:	31 f1       	breq	.+76     	; 0x2d82 <MDIO_voidWriteLowNibble+0x96>
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3a:	84 30       	cpi	r24, 0x04	; 4
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	89 f1       	breq	.+98     	; 0x2da2 <MDIO_voidWriteLowNibble+0xb6>
    2d40:	3f c0       	rjmp	.+126    	; 0x2dc0 <MDIO_voidWriteLowNibble+0xd4>
		{
		case DIO_PORTA : PORTA = PORTA & HIGH_NIBBLE_OUTPUT ;
    2d42:	ab e3       	ldi	r26, 0x3B	; 59
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	eb e3       	ldi	r30, 0x3B	; 59
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 7f       	andi	r24, 0xF0	; 240
    2d4e:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal        ;
    2d50:	ab e3       	ldi	r26, 0x3B	; 59
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	eb e3       	ldi	r30, 0x3B	; 59
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	90 81       	ld	r25, Z
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	89 2b       	or	r24, r25
    2d5e:	8c 93       	st	X, r24
    2d60:	2f c0       	rjmp	.+94     	; 0x2dc0 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTB : PORTB = PORTB & HIGH_NIBBLE_OUTPUT ;
    2d62:	a8 e3       	ldi	r26, 0x38	; 56
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e8 e3       	ldi	r30, 0x38	; 56
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	80 7f       	andi	r24, 0xF0	; 240
    2d6e:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal        ;		
    2d70:	a8 e3       	ldi	r26, 0x38	; 56
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e8 e3       	ldi	r30, 0x38	; 56
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	90 81       	ld	r25, Z
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	89 2b       	or	r24, r25
    2d7e:	8c 93       	st	X, r24
    2d80:	1f c0       	rjmp	.+62     	; 0x2dc0 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTC : PORTC = PORTC & HIGH_NIBBLE_OUTPUT ; 
    2d82:	a5 e3       	ldi	r26, 0x35	; 53
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e5 e3       	ldi	r30, 0x35	; 53
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 7f       	andi	r24, 0xF0	; 240
    2d8e:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal        ;		
    2d90:	a5 e3       	ldi	r26, 0x35	; 53
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e5 e3       	ldi	r30, 0x35	; 53
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	90 81       	ld	r25, Z
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	89 2b       	or	r24, r25
    2d9e:	8c 93       	st	X, r24
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & HIGH_NIBBLE_OUTPUT ;
    2da2:	a2 e3       	ldi	r26, 0x32	; 50
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e2 e3       	ldi	r30, 0x32	; 50
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	80 7f       	andi	r24, 0xF0	; 240
    2dae:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal        ;		
    2db0:	a2 e3       	ldi	r26, 0x32	; 50
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e2 e3       	ldi	r30, 0x32	; 50
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	90 81       	ld	r25, Z
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	89 2b       	or	r24, r25
    2dbe:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <MDIO_voidWriteHighNibble>:

void MDIO_voidWriteHighNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <MDIO_voidWriteHighNibble+0x6>
    2dd4:	00 d0       	rcall	.+0      	; 0x2dd6 <MDIO_voidWriteHighNibble+0x8>
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal << FOUR_BITS ;
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	82 95       	swap	r24
    2de2:	80 7f       	andi	r24, 0xF0	; 240
    2de4:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	3c 83       	std	Y+4, r19	; 0x04
    2dee:	2b 83       	std	Y+3, r18	; 0x03
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
    2df4:	82 30       	cpi	r24, 0x02	; 2
    2df6:	91 05       	cpc	r25, r1
    2df8:	31 f1       	breq	.+76     	; 0x2e46 <MDIO_voidWriteHighNibble+0x78>
    2dfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2dfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dfe:	23 30       	cpi	r18, 0x03	; 3
    2e00:	31 05       	cpc	r19, r1
    2e02:	34 f4       	brge	.+12     	; 0x2e10 <MDIO_voidWriteHighNibble+0x42>
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	61 f0       	breq	.+24     	; 0x2e26 <MDIO_voidWriteHighNibble+0x58>
    2e0e:	4a c0       	rjmp	.+148    	; 0x2ea4 <MDIO_voidWriteHighNibble+0xd6>
    2e10:	2b 81       	ldd	r18, Y+3	; 0x03
    2e12:	3c 81       	ldd	r19, Y+4	; 0x04
    2e14:	23 30       	cpi	r18, 0x03	; 3
    2e16:	31 05       	cpc	r19, r1
    2e18:	31 f1       	breq	.+76     	; 0x2e66 <MDIO_voidWriteHighNibble+0x98>
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1e:	84 30       	cpi	r24, 0x04	; 4
    2e20:	91 05       	cpc	r25, r1
    2e22:	89 f1       	breq	.+98     	; 0x2e86 <MDIO_voidWriteHighNibble+0xb8>
    2e24:	3f c0       	rjmp	.+126    	; 0x2ea4 <MDIO_voidWriteHighNibble+0xd6>
		{
		case DIO_PORTA : PORTA = PORTA & LOW_NIBBLE_OUTPUT ; 
    2e26:	ab e3       	ldi	r26, 0x3B	; 59
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	eb e3       	ldi	r30, 0x3B	; 59
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 70       	andi	r24, 0x0F	; 15
    2e32:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal       ;
    2e34:	ab e3       	ldi	r26, 0x3B	; 59
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	eb e3       	ldi	r30, 0x3B	; 59
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	90 81       	ld	r25, Z
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	89 2b       	or	r24, r25
    2e42:	8c 93       	st	X, r24
    2e44:	2f c0       	rjmp	.+94     	; 0x2ea4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                      
		case DIO_PORTB : PORTB = PORTB & LOW_NIBBLE_OUTPUT ; 
    2e46:	a8 e3       	ldi	r26, 0x38	; 56
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e8 e3       	ldi	r30, 0x38	; 56
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	8f 70       	andi	r24, 0x0F	; 15
    2e52:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal       ;
    2e54:	a8 e3       	ldi	r26, 0x38	; 56
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e8 e3       	ldi	r30, 0x38	; 56
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	90 81       	ld	r25, Z
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	89 2b       	or	r24, r25
    2e62:	8c 93       	st	X, r24
    2e64:	1f c0       	rjmp	.+62     	; 0x2ea4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;               
		case DIO_PORTC : PORTC = PORTC & LOW_NIBBLE_OUTPUT ; 
    2e66:	a5 e3       	ldi	r26, 0x35	; 53
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e5 e3       	ldi	r30, 0x35	; 53
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8f 70       	andi	r24, 0x0F	; 15
    2e72:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal       ;
    2e74:	a5 e3       	ldi	r26, 0x35	; 53
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e5 e3       	ldi	r30, 0x35	; 53
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	90 81       	ld	r25, Z
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	89 2b       	or	r24, r25
    2e82:	8c 93       	st	X, r24
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & LOW_NIBBLE_OUTPUT ;
    2e86:	a2 e3       	ldi	r26, 0x32	; 50
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e2 e3       	ldi	r30, 0x32	; 50
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	8f 70       	andi	r24, 0x0F	; 15
    2e92:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal       ;
    2e94:	a2 e3       	ldi	r26, 0x32	; 50
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e2 e3       	ldi	r30, 0x32	; 50
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	90 81       	ld	r25, Z
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	89 2b       	or	r24, r25
    2ea2:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <MDIO_voidConnectPullup>:

void MDIO_voidConnectPullup(u8 A_u8PortNo ,u8 A_u8PinNo, u8 A_u8ConnectPullup)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <MDIO_voidConnectPullup+0x6>
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <MDIO_voidConnectPullup+0x8>
    2eba:	0f 92       	push	r0
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	6a 83       	std	Y+2, r22	; 0x02
    2ec4:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8ConnectPullup)
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	28 2f       	mov	r18, r24
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	3d 83       	std	Y+5, r19	; 0x05
    2ece:	2c 83       	std	Y+4, r18	; 0x04
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	31 f0       	breq	.+12     	; 0x2ee6 <MDIO_voidConnectPullup+0x34>
    2eda:	2c 81       	ldd	r18, Y+4	; 0x04
    2edc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ede:	22 30       	cpi	r18, 0x02	; 2
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	31 f0       	breq	.+12     	; 0x2ef0 <MDIO_voidConnectPullup+0x3e>
    2ee4:	09 c0       	rjmp	.+18     	; 0x2ef8 <MDIO_voidConnectPullup+0x46>
	{
	case ENABLE_PULLUP  : MDIO_voidSetPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	6a 81       	ldd	r22, Y+2	; 0x02
    2eea:	0e 94 fe 12 	call	0x25fc	; 0x25fc <MDIO_voidSetPinVal>
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <MDIO_voidConnectPullup+0x46>
	case DISABLE_PULLUP : MDIO_voidClrPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ef4:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>
	default : /**Error*/ break ;
	}
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <MADC_voidInt>:

/**pointer to function to set call back of ADC*/
void (*ADC_Callback) (void) ;

void MADC_voidInt (void)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
	/** referance voltage selection*/
	#if   ADC_REF_VOLT == AREF          /**external ADC referance voltage (internal Vref turrned off)*/
	    CLR_BIT(ADMUX , REFS0) ;
	    CLR_BIT(ADMUX , REFS1) ;
	#elif ADC_REF_VOLT == AVCC          /**Vcc of ADC*/
	    SET_BIT(ADMUX , REFS0) ;
    2f10:	a7 e2       	ldi	r26, 0x27	; 39
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e7 e2       	ldi	r30, 0x27	; 39
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	80 64       	ori	r24, 0x40	; 64
    2f1c:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX , REFS1) ;
    2f1e:	a7 e2       	ldi	r26, 0x27	; 39
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e7 e2       	ldi	r30, 0x27	; 39
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	8f 77       	andi	r24, 0x7F	; 127
    2f2a:	8c 93       	st	X, r24
	#else
		#error "Please select correct refence voltage"
	#endif
	
	/**set adjust result to right adjust*/
	CLR_BIT(ADMUX , ADLAR) ;
    2f2c:	a7 e2       	ldi	r26, 0x27	; 39
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e7 e2       	ldi	r30, 0x27	; 39
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	8f 7d       	andi	r24, 0xDF	; 223
    2f38:	8c 93       	st	X, r24
	
	/**set prescaller of ADC clk*/
	#if   ADC_PRESCALER == ADC_PS_2 /**clk = 4MHZ*/
	    SET_BIT(ADCSRA , ADPS0) ;
    2f3a:	a6 e2       	ldi	r26, 0x26	; 38
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e6 e2       	ldi	r30, 0x26	; 38
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	81 60       	ori	r24, 0x01	; 1
    2f46:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA , ADPS1) ;
    2f48:	a6 e2       	ldi	r26, 0x26	; 38
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e6 e2       	ldi	r30, 0x26	; 38
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	8d 7f       	andi	r24, 0xFD	; 253
    2f54:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA , ADPS2) ;
    2f56:	a6 e2       	ldi	r26, 0x26	; 38
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e6 e2       	ldi	r30, 0x26	; 38
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8b 7f       	andi	r24, 0xFB	; 251
    2f62:	8c 93       	st	X, r24
	#else 
		#error "select correct division factor"
	#endif
	
	/**Enable ADC peripheral*/
	SET_BIT(ADCSRA, ADEN);
    2f64:	a6 e2       	ldi	r26, 0x26	; 38
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e6 e2       	ldi	r30, 0x26	; 38
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 68       	ori	r24, 0x80	; 128
    2f70:	8c 93       	st	X, r24
	
	/**ADC Interrupt Enable*/
    SET_BIT(ADCSRA, ADIE);
    2f72:	a6 e2       	ldi	r26, 0x26	; 38
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e6 e2       	ldi	r30, 0x26	; 38
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	88 60       	ori	r24, 0x08	; 8
    2f7e:	8c 93       	st	X, r24
	
	/**Auto trigger Disable*/
	CLR_BIT(ADCSRA, ADATE);		// ??
    2f80:	a6 e2       	ldi	r26, 0x26	; 38
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e6 e2       	ldi	r30, 0x26	; 38
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	8f 7d       	andi	r24, 0xDF	; 223
    2f8c:	8c 93       	st	X, r24
	
	/**Enable global interrupt flag*/
	SET_BIT (SREG , I_BIT) ;
    2f8e:	af e5       	ldi	r26, 0x5F	; 95
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ef e5       	ldi	r30, 0x5F	; 95
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	80 68       	ori	r24, 0x80	; 128
    2f9a:	8c 93       	st	X, r24
}
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <MADC_voidStartConversion>:

void MADC_voidStartConversion(u8 A_u8ChannelNo)
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <MADC_voidStartConversion+0x6>
    2fa8:	0f 92       	push	r0
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8ChannelNo)
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	3b 83       	std	Y+3, r19	; 0x03
    2fb8:	2a 83       	std	Y+2, r18	; 0x02
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	83 30       	cpi	r24, 0x03	; 3
    2fc0:	91 05       	cpc	r25, r1
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <MADC_voidStartConversion+0x24>
    2fc4:	9b c0       	rjmp	.+310    	; 0x30fc <MADC_voidStartConversion+0x15a>
    2fc6:	2a 81       	ldd	r18, Y+2	; 0x02
    2fc8:	3b 81       	ldd	r19, Y+3	; 0x03
    2fca:	24 30       	cpi	r18, 0x04	; 4
    2fcc:	31 05       	cpc	r19, r1
    2fce:	8c f4       	brge	.+34     	; 0x2ff2 <MADC_voidStartConversion+0x50>
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <MADC_voidStartConversion+0x3a>
    2fda:	48 c0       	rjmp	.+144    	; 0x306c <MADC_voidStartConversion+0xca>
    2fdc:	2a 81       	ldd	r18, Y+2	; 0x02
    2fde:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe0:	22 30       	cpi	r18, 0x02	; 2
    2fe2:	31 05       	cpc	r19, r1
    2fe4:	0c f0       	brlt	.+2      	; 0x2fe8 <MADC_voidStartConversion+0x46>
    2fe6:	66 c0       	rjmp	.+204    	; 0x30b4 <MADC_voidStartConversion+0x112>
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	9b 81       	ldd	r25, Y+3	; 0x03
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	d1 f0       	breq	.+52     	; 0x3024 <MADC_voidStartConversion+0x82>
    2ff0:	38 c1       	rjmp	.+624    	; 0x3262 <MADC_voidStartConversion+0x2c0>
    2ff2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ff4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ff6:	25 30       	cpi	r18, 0x05	; 5
    2ff8:	31 05       	cpc	r19, r1
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <MADC_voidStartConversion+0x5c>
    2ffc:	c7 c0       	rjmp	.+398    	; 0x318c <MADC_voidStartConversion+0x1ea>
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	85 30       	cpi	r24, 0x05	; 5
    3004:	91 05       	cpc	r25, r1
    3006:	0c f4       	brge	.+2      	; 0x300a <MADC_voidStartConversion+0x68>
    3008:	9d c0       	rjmp	.+314    	; 0x3144 <MADC_voidStartConversion+0x1a2>
    300a:	2a 81       	ldd	r18, Y+2	; 0x02
    300c:	3b 81       	ldd	r19, Y+3	; 0x03
    300e:	26 30       	cpi	r18, 0x06	; 6
    3010:	31 05       	cpc	r19, r1
    3012:	09 f4       	brne	.+2      	; 0x3016 <MADC_voidStartConversion+0x74>
    3014:	df c0       	rjmp	.+446    	; 0x31d4 <MADC_voidStartConversion+0x232>
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	9b 81       	ldd	r25, Y+3	; 0x03
    301a:	87 30       	cpi	r24, 0x07	; 7
    301c:	91 05       	cpc	r25, r1
    301e:	09 f4       	brne	.+2      	; 0x3022 <MADC_voidStartConversion+0x80>
    3020:	fd c0       	rjmp	.+506    	; 0x321c <MADC_voidStartConversion+0x27a>
    3022:	1f c1       	rjmp	.+574    	; 0x3262 <MADC_voidStartConversion+0x2c0>
	{
		case CHANNEL_0 :  CLR_BIT(ADMUX , MUX0) ;
    3024:	a7 e2       	ldi	r26, 0x27	; 39
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e7 e2       	ldi	r30, 0x27	; 39
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	8e 7f       	andi	r24, 0xFE	; 254
    3030:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3032:	a7 e2       	ldi	r26, 0x27	; 39
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	e7 e2       	ldi	r30, 0x27	; 39
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	8d 7f       	andi	r24, 0xFD	; 253
    303e:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3040:	a7 e2       	ldi	r26, 0x27	; 39
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e7 e2       	ldi	r30, 0x27	; 39
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	8b 7f       	andi	r24, 0xFB	; 251
    304c:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    304e:	a7 e2       	ldi	r26, 0x27	; 39
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e7 e2       	ldi	r30, 0x27	; 39
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	87 7f       	andi	r24, 0xF7	; 247
    305a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    305c:	a7 e2       	ldi	r26, 0x27	; 39
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e7 e2       	ldi	r30, 0x27	; 39
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	8f 7e       	andi	r24, 0xEF	; 239
    3068:	8c 93       	st	X, r24
    306a:	fb c0       	rjmp	.+502    	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_1 :  SET_BIT(ADMUX , MUX0) ;
    306c:	a7 e2       	ldi	r26, 0x27	; 39
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e7 e2       	ldi	r30, 0x27	; 39
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	81 60       	ori	r24, 0x01	; 1
    3078:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    307a:	a7 e2       	ldi	r26, 0x27	; 39
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e7 e2       	ldi	r30, 0x27	; 39
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	8d 7f       	andi	r24, 0xFD	; 253
    3086:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3088:	a7 e2       	ldi	r26, 0x27	; 39
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e7 e2       	ldi	r30, 0x27	; 39
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	8b 7f       	andi	r24, 0xFB	; 251
    3094:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3096:	a7 e2       	ldi	r26, 0x27	; 39
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e7 e2       	ldi	r30, 0x27	; 39
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	87 7f       	andi	r24, 0xF7	; 247
    30a2:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    30a4:	a7 e2       	ldi	r26, 0x27	; 39
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e7 e2       	ldi	r30, 0x27	; 39
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	8f 7e       	andi	r24, 0xEF	; 239
    30b0:	8c 93       	st	X, r24
    30b2:	d7 c0       	rjmp	.+430    	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_2 :  CLR_BIT(ADMUX , MUX0) ;
    30b4:	a7 e2       	ldi	r26, 0x27	; 39
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e7 e2       	ldi	r30, 0x27	; 39
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8e 7f       	andi	r24, 0xFE	; 254
    30c0:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    30c2:	a7 e2       	ldi	r26, 0x27	; 39
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e7 e2       	ldi	r30, 0x27	; 39
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	82 60       	ori	r24, 0x02	; 2
    30ce:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    30d0:	a7 e2       	ldi	r26, 0x27	; 39
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e7 e2       	ldi	r30, 0x27	; 39
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	8b 7f       	andi	r24, 0xFB	; 251
    30dc:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    30de:	a7 e2       	ldi	r26, 0x27	; 39
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e7 e2       	ldi	r30, 0x27	; 39
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	87 7f       	andi	r24, 0xF7	; 247
    30ea:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    30ec:	a7 e2       	ldi	r26, 0x27	; 39
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e7 e2       	ldi	r30, 0x27	; 39
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	8f 7e       	andi	r24, 0xEF	; 239
    30f8:	8c 93       	st	X, r24
    30fa:	b3 c0       	rjmp	.+358    	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_3 :  SET_BIT(ADMUX , MUX0) ;
    30fc:	a7 e2       	ldi	r26, 0x27	; 39
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e7 e2       	ldi	r30, 0x27	; 39
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	81 60       	ori	r24, 0x01	; 1
    3108:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    310a:	a7 e2       	ldi	r26, 0x27	; 39
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e7 e2       	ldi	r30, 0x27	; 39
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	82 60       	ori	r24, 0x02	; 2
    3116:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3118:	a7 e2       	ldi	r26, 0x27	; 39
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e7 e2       	ldi	r30, 0x27	; 39
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	8b 7f       	andi	r24, 0xFB	; 251
    3124:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3126:	a7 e2       	ldi	r26, 0x27	; 39
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e7 e2       	ldi	r30, 0x27	; 39
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	87 7f       	andi	r24, 0xF7	; 247
    3132:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3134:	a7 e2       	ldi	r26, 0x27	; 39
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e7 e2       	ldi	r30, 0x27	; 39
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	8f 7e       	andi	r24, 0xEF	; 239
    3140:	8c 93       	st	X, r24
    3142:	8f c0       	rjmp	.+286    	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_4 :  CLR_BIT(ADMUX , MUX0) ;
    3144:	a7 e2       	ldi	r26, 0x27	; 39
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e7 e2       	ldi	r30, 0x27	; 39
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	8e 7f       	andi	r24, 0xFE	; 254
    3150:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3152:	a7 e2       	ldi	r26, 0x27	; 39
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e7 e2       	ldi	r30, 0x27	; 39
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	8d 7f       	andi	r24, 0xFD	; 253
    315e:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    3160:	a7 e2       	ldi	r26, 0x27	; 39
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e7 e2       	ldi	r30, 0x27	; 39
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	84 60       	ori	r24, 0x04	; 4
    316c:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    316e:	a7 e2       	ldi	r26, 0x27	; 39
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e7 e2       	ldi	r30, 0x27	; 39
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	87 7f       	andi	r24, 0xF7	; 247
    317a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    317c:	a7 e2       	ldi	r26, 0x27	; 39
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e7 e2       	ldi	r30, 0x27	; 39
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	8f 7e       	andi	r24, 0xEF	; 239
    3188:	8c 93       	st	X, r24
    318a:	6b c0       	rjmp	.+214    	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_5 :  SET_BIT(ADMUX , MUX0) ;
    318c:	a7 e2       	ldi	r26, 0x27	; 39
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e7 e2       	ldi	r30, 0x27	; 39
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	81 60       	ori	r24, 0x01	; 1
    3198:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    319a:	a7 e2       	ldi	r26, 0x27	; 39
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e7 e2       	ldi	r30, 0x27	; 39
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	8d 7f       	andi	r24, 0xFD	; 253
    31a6:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    31a8:	a7 e2       	ldi	r26, 0x27	; 39
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e7 e2       	ldi	r30, 0x27	; 39
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	84 60       	ori	r24, 0x04	; 4
    31b4:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    31b6:	a7 e2       	ldi	r26, 0x27	; 39
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e7 e2       	ldi	r30, 0x27	; 39
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	87 7f       	andi	r24, 0xF7	; 247
    31c2:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    31c4:	a7 e2       	ldi	r26, 0x27	; 39
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e7 e2       	ldi	r30, 0x27	; 39
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	8f 7e       	andi	r24, 0xEF	; 239
    31d0:	8c 93       	st	X, r24
    31d2:	47 c0       	rjmp	.+142    	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_6 :  CLR_BIT(ADMUX , MUX0) ;
    31d4:	a7 e2       	ldi	r26, 0x27	; 39
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e7 e2       	ldi	r30, 0x27	; 39
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8e 7f       	andi	r24, 0xFE	; 254
    31e0:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    31e2:	a7 e2       	ldi	r26, 0x27	; 39
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e7 e2       	ldi	r30, 0x27	; 39
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	82 60       	ori	r24, 0x02	; 2
    31ee:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    31f0:	a7 e2       	ldi	r26, 0x27	; 39
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	e7 e2       	ldi	r30, 0x27	; 39
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	84 60       	ori	r24, 0x04	; 4
    31fc:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    31fe:	a7 e2       	ldi	r26, 0x27	; 39
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e7 e2       	ldi	r30, 0x27	; 39
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	87 7f       	andi	r24, 0xF7	; 247
    320a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    320c:	a7 e2       	ldi	r26, 0x27	; 39
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e7 e2       	ldi	r30, 0x27	; 39
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	8f 7e       	andi	r24, 0xEF	; 239
    3218:	8c 93       	st	X, r24
    321a:	23 c0       	rjmp	.+70     	; 0x3262 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_7 :  SET_BIT(ADMUX , MUX0) ;
    321c:	a7 e2       	ldi	r26, 0x27	; 39
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e7 e2       	ldi	r30, 0x27	; 39
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	81 60       	ori	r24, 0x01	; 1
    3228:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    322a:	a7 e2       	ldi	r26, 0x27	; 39
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e7 e2       	ldi	r30, 0x27	; 39
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	82 60       	ori	r24, 0x02	; 2
    3236:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    3238:	a7 e2       	ldi	r26, 0x27	; 39
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e7 e2       	ldi	r30, 0x27	; 39
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	84 60       	ori	r24, 0x04	; 4
    3244:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3246:	a7 e2       	ldi	r26, 0x27	; 39
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	e7 e2       	ldi	r30, 0x27	; 39
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	87 7f       	andi	r24, 0xF7	; 247
    3252:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3254:	a7 e2       	ldi	r26, 0x27	; 39
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e7 e2       	ldi	r30, 0x27	; 39
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	8f 7e       	andi	r24, 0xEF	; 239
    3260:	8c 93       	st	X, r24
		default         : /**ERROR*/
		                  break ;				  
	}
	
	/**Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    3262:	a6 e2       	ldi	r26, 0x26	; 38
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e6 e2       	ldi	r30, 0x26	; 38
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	80 64       	ori	r24, 0x40	; 64
    326e:	8c 93       	st	X, r24
}
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <MADC_u16GetADCData>:
	 */


/* You can benefit from this function : either by pooling or by ISR */
u16  MADC_u16GetADCData(void)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
//	while ((READ_BIT(ADCSRA,ADIF)) == 1);
//	SET_BIT(ADCSRA,ADIF);

	/**return ADC Data  */
	return ADC ;
    3284:	e4 e2       	ldi	r30, 0x24	; 36
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01

}
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <MADC_voidSetCallback>:

void MADC_voidSetCallback( void (*A_fptr)(void)  )
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	00 d0       	rcall	.+0      	; 0x3298 <MADC_voidSetCallback+0x6>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	ADC_Callback = A_fptr;
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	90 93 12 02 	sts	0x0212, r25
    32a8:	80 93 11 02 	sts	0x0211, r24
}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <__vector_16>:

/**ISR of ADC*/
void __vector_16(void)__attribute__((signal))__attribute__((interrupt));
void __vector_16(void)
{
    32b6:	78 94       	sei
    32b8:	1f 92       	push	r1
    32ba:	0f 92       	push	r0
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	0f 92       	push	r0
    32c0:	11 24       	eor	r1, r1
    32c2:	2f 93       	push	r18
    32c4:	3f 93       	push	r19
    32c6:	4f 93       	push	r20
    32c8:	5f 93       	push	r21
    32ca:	6f 93       	push	r22
    32cc:	7f 93       	push	r23
    32ce:	8f 93       	push	r24
    32d0:	9f 93       	push	r25
    32d2:	af 93       	push	r26
    32d4:	bf 93       	push	r27
    32d6:	ef 93       	push	r30
    32d8:	ff 93       	push	r31
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
	if (ADC_Callback != Null)
    32e2:	80 91 11 02 	lds	r24, 0x0211
    32e6:	90 91 12 02 	lds	r25, 0x0212
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	29 f0       	breq	.+10     	; 0x32f8 <__vector_16+0x42>
	{
		ADC_Callback () ;
    32ee:	e0 91 11 02 	lds	r30, 0x0211
    32f2:	f0 91 12 02 	lds	r31, 0x0212
    32f6:	09 95       	icall
	}
}
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	ff 91       	pop	r31
    32fe:	ef 91       	pop	r30
    3300:	bf 91       	pop	r27
    3302:	af 91       	pop	r26
    3304:	9f 91       	pop	r25
    3306:	8f 91       	pop	r24
    3308:	7f 91       	pop	r23
    330a:	6f 91       	pop	r22
    330c:	5f 91       	pop	r21
    330e:	4f 91       	pop	r20
    3310:	3f 91       	pop	r19
    3312:	2f 91       	pop	r18
    3314:	0f 90       	pop	r0
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	0f 90       	pop	r0
    331a:	1f 90       	pop	r1
    331c:	18 95       	reti

0000331e <HPushBotton_voidPbInt>:
#include "Pb_conf.h"
#include <util/delay.h>


void HPushBotton_voidPbInt (u8 A_u8PbID)
{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <HPushBotton_voidPbInt+0x6>
    3324:	0f 92       	push	r0
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PbID)
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	3b 83       	std	Y+3, r19	; 0x03
    3334:	2a 83       	std	Y+2, r18	; 0x02
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	9b 81       	ldd	r25, Y+3	; 0x03
    333a:	82 30       	cpi	r24, 0x02	; 2
    333c:	91 05       	cpc	r25, r1
    333e:	a9 f0       	breq	.+42     	; 0x336a <HPushBotton_voidPbInt+0x4c>
    3340:	2a 81       	ldd	r18, Y+2	; 0x02
    3342:	3b 81       	ldd	r19, Y+3	; 0x03
    3344:	23 30       	cpi	r18, 0x03	; 3
    3346:	31 05       	cpc	r19, r1
    3348:	d9 f0       	breq	.+54     	; 0x3380 <HPushBotton_voidPbInt+0x62>
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	9b 81       	ldd	r25, Y+3	; 0x03
    334e:	81 30       	cpi	r24, 0x01	; 1
    3350:	91 05       	cpc	r25, r1
    3352:	01 f5       	brne	.+64     	; 0x3394 <HPushBotton_voidPbInt+0x76>
	{                  /** make direction of Pb1 is input */
		case Pb1_ID :  MDIO_voidSetPinDir     (Pb1_PORT , Pb1_PIN , Pb_INPUT) ;
    3354:	84 e0       	ldi	r24, 0x04	; 4
    3356:	62 e0       	ldi	r22, 0x02	; 2
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	0e 94 43 12 	call	0x2486	; 0x2486 <MDIO_voidSetPinDir>
		
		               /**active pull up of Pb1 */
		               MDIO_voidConnectPullup (Pb1_PORT , Pb1_PIN , ENABLE_PULLUP) ;
    335e:	84 e0       	ldi	r24, 0x04	; 4
    3360:	62 e0       	ldi	r22, 0x02	; 2
    3362:	41 e0       	ldi	r20, 0x01	; 1
    3364:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <MDIO_voidConnectPullup>
    3368:	15 c0       	rjmp	.+42     	; 0x3394 <HPushBotton_voidPbInt+0x76>
					   break ;
					   
					   /** make direction of Pb2 is input */
		case Pb2_ID :  MDIO_voidSetPinDir     (Pb2_PORT , Pb2_PIN , Pb_INPUT) ;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	0e 94 43 12 	call	0x2486	; 0x2486 <MDIO_voidSetPinDir>
		 
		               /**active pull up of Pb2 */
		               MDIO_voidConnectPullup (Pb2_PORT , Pb2_PIN , ENABLE_PULLUP) ;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	61 e0       	ldi	r22, 0x01	; 1
    3378:	41 e0       	ldi	r20, 0x01	; 1
    337a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <MDIO_voidConnectPullup>
    337e:	0a c0       	rjmp	.+20     	; 0x3394 <HPushBotton_voidPbInt+0x76>
					   break ;
					   
					   /** make direction of Pb3 is input */
		case Pb3_ID :  MDIO_voidSetPinDir     (Pb3_PORT , Pb3_PIN , Pb_INPUT) ;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	62 e0       	ldi	r22, 0x02	; 2
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	0e 94 43 12 	call	0x2486	; 0x2486 <MDIO_voidSetPinDir>
		      
			           /**active pull up of Pb3 */
		               MDIO_voidConnectPullup (Pb3_PORT , Pb3_PIN , ENABLE_PULLUP) ;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	62 e0       	ldi	r22, 0x02	; 2
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <MDIO_voidConnectPullup>
					   break ;
		default     :  /** Error */
		               break ;
	}
}
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	cf 91       	pop	r28
    339c:	df 91       	pop	r29
    339e:	08 95       	ret

000033a0 <HPushBotton_u8PbStatus>:

u8 HPushBotton_u8PbStatus (u8 A_u8PbID)
{
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	ec 97       	sbiw	r28, 0x3c	; 60
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	8a af       	std	Y+58, r24	; 0x3a
	u8 L_u8PbStatus = NOT_PRESSED ;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	89 af       	std	Y+57, r24	; 0x39
	switch (A_u8PbID)
    33ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	3c af       	std	Y+60, r19	; 0x3c
    33c2:	2b af       	std	Y+59, r18	; 0x3b
    33c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    33c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    33c8:	82 30       	cpi	r24, 0x02	; 2
    33ca:	91 05       	cpc	r25, r1
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <HPushBotton_u8PbStatus+0x30>
    33ce:	8e c0       	rjmp	.+284    	; 0x34ec <HPushBotton_u8PbStatus+0x14c>
    33d0:	2b ad       	ldd	r18, Y+59	; 0x3b
    33d2:	3c ad       	ldd	r19, Y+60	; 0x3c
    33d4:	23 30       	cpi	r18, 0x03	; 3
    33d6:	31 05       	cpc	r19, r1
    33d8:	09 f4       	brne	.+2      	; 0x33dc <HPushBotton_u8PbStatus+0x3c>
    33da:	0a c1       	rjmp	.+532    	; 0x35f0 <HPushBotton_u8PbStatus+0x250>
    33dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    33de:	9c ad       	ldd	r25, Y+60	; 0x3c
    33e0:	81 30       	cpi	r24, 0x01	; 1
    33e2:	91 05       	cpc	r25, r1
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <HPushBotton_u8PbStatus+0x48>
    33e6:	84 c1       	rjmp	.+776    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
	{                  /**check Pb1 is pressed or not*/
		case Pb1_ID :  if (MDIO_u8GetPinVal (Pb1_PORT , Pb1_PIN) == PRESSED)
    33e8:	84 e0       	ldi	r24, 0x04	; 4
    33ea:	62 e0       	ldi	r22, 0x02	; 2
    33ec:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    33f0:	88 23       	and	r24, r24
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <HPushBotton_u8PbStatus+0x56>
    33f4:	7d c1       	rjmp	.+762    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	a0 ea       	ldi	r26, 0xA0	; 160
    33fc:	b1 e4       	ldi	r27, 0x41	; 65
    33fe:	8d ab       	std	Y+53, r24	; 0x35
    3400:	9e ab       	std	Y+54, r25	; 0x36
    3402:	af ab       	std	Y+55, r26	; 0x37
    3404:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3406:	6d a9       	ldd	r22, Y+53	; 0x35
    3408:	7e a9       	ldd	r23, Y+54	; 0x36
    340a:	8f a9       	ldd	r24, Y+55	; 0x37
    340c:	98 ad       	ldd	r25, Y+56	; 0x38
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	4a ef       	ldi	r20, 0xFA	; 250
    3414:	54 e4       	ldi	r21, 0x44	; 68
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	89 ab       	std	Y+49, r24	; 0x31
    3420:	9a ab       	std	Y+50, r25	; 0x32
    3422:	ab ab       	std	Y+51, r26	; 0x33
    3424:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3426:	69 a9       	ldd	r22, Y+49	; 0x31
    3428:	7a a9       	ldd	r23, Y+50	; 0x32
    342a:	8b a9       	ldd	r24, Y+51	; 0x33
    342c:	9c a9       	ldd	r25, Y+52	; 0x34
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	2c f4       	brge	.+10     	; 0x3448 <HPushBotton_u8PbStatus+0xa8>
		__ticks = 1;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	98 ab       	std	Y+48, r25	; 0x30
    3444:	8f a7       	std	Y+47, r24	; 0x2f
    3446:	3f c0       	rjmp	.+126    	; 0x34c6 <HPushBotton_u8PbStatus+0x126>
	else if (__tmp > 65535)
    3448:	69 a9       	ldd	r22, Y+49	; 0x31
    344a:	7a a9       	ldd	r23, Y+50	; 0x32
    344c:	8b a9       	ldd	r24, Y+51	; 0x33
    344e:	9c a9       	ldd	r25, Y+52	; 0x34
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	3f ef       	ldi	r19, 0xFF	; 255
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	57 e4       	ldi	r21, 0x47	; 71
    3458:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    345c:	18 16       	cp	r1, r24
    345e:	4c f5       	brge	.+82     	; 0x34b2 <HPushBotton_u8PbStatus+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	6d a9       	ldd	r22, Y+53	; 0x35
    3462:	7e a9       	ldd	r23, Y+54	; 0x36
    3464:	8f a9       	ldd	r24, Y+55	; 0x37
    3466:	98 ad       	ldd	r25, Y+56	; 0x38
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	98 ab       	std	Y+48, r25	; 0x30
    3486:	8f a7       	std	Y+47, r24	; 0x2f
    3488:	0f c0       	rjmp	.+30     	; 0x34a8 <HPushBotton_u8PbStatus+0x108>
    348a:	88 ec       	ldi	r24, 0xC8	; 200
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9e a7       	std	Y+46, r25	; 0x2e
    3490:	8d a7       	std	Y+45, r24	; 0x2d
    3492:	8d a5       	ldd	r24, Y+45	; 0x2d
    3494:	9e a5       	ldd	r25, Y+46	; 0x2e
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <HPushBotton_u8PbStatus+0xf6>
    349a:	9e a7       	std	Y+46, r25	; 0x2e
    349c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349e:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a0:	98 a9       	ldd	r25, Y+48	; 0x30
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	98 ab       	std	Y+48, r25	; 0x30
    34a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    34aa:	98 a9       	ldd	r25, Y+48	; 0x30
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	69 f7       	brne	.-38     	; 0x348a <HPushBotton_u8PbStatus+0xea>
    34b0:	14 c0       	rjmp	.+40     	; 0x34da <HPushBotton_u8PbStatus+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b2:	69 a9       	ldd	r22, Y+49	; 0x31
    34b4:	7a a9       	ldd	r23, Y+50	; 0x32
    34b6:	8b a9       	ldd	r24, Y+51	; 0x33
    34b8:	9c a9       	ldd	r25, Y+52	; 0x34
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	98 ab       	std	Y+48, r25	; 0x30
    34c4:	8f a7       	std	Y+47, r24	; 0x2f
    34c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34c8:	98 a9       	ldd	r25, Y+48	; 0x30
    34ca:	9c a7       	std	Y+44, r25	; 0x2c
    34cc:	8b a7       	std	Y+43, r24	; 0x2b
    34ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <HPushBotton_u8PbStatus+0x132>
    34d6:	9c a7       	std	Y+44, r25	; 0x2c
    34d8:	8b a7       	std	Y+43, r24	; 0x2b
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb1 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb1_PORT , Pb1_PIN) == PRESSED)
    34da:	84 e0       	ldi	r24, 0x04	; 4
    34dc:	62 e0       	ldi	r22, 0x02	; 2
    34de:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    34e2:	88 23       	and	r24, r24
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <HPushBotton_u8PbStatus+0x148>
    34e6:	04 c1       	rjmp	.+520    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    34e8:	19 ae       	std	Y+57, r1	; 0x39
    34ea:	02 c1       	rjmp	.+516    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
							}
		                }
					   break ;
					   
					   /**check Pb2 is pressed or not*/
		case Pb2_ID :  if (MDIO_u8GetPinVal (Pb2_PORT , Pb2_PIN) == PRESSED)
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	61 e0       	ldi	r22, 0x01	; 1
    34f0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    34f4:	88 23       	and	r24, r24
    34f6:	09 f0       	breq	.+2      	; 0x34fa <HPushBotton_u8PbStatus+0x15a>
    34f8:	fb c0       	rjmp	.+502    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3500:	b1 e4       	ldi	r27, 0x41	; 65
    3502:	8f a3       	std	Y+39, r24	; 0x27
    3504:	98 a7       	std	Y+40, r25	; 0x28
    3506:	a9 a7       	std	Y+41, r26	; 0x29
    3508:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350a:	6f a1       	ldd	r22, Y+39	; 0x27
    350c:	78 a5       	ldd	r23, Y+40	; 0x28
    350e:	89 a5       	ldd	r24, Y+41	; 0x29
    3510:	9a a5       	ldd	r25, Y+42	; 0x2a
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a ef       	ldi	r20, 0xFA	; 250
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	8b a3       	std	Y+35, r24	; 0x23
    3524:	9c a3       	std	Y+36, r25	; 0x24
    3526:	ad a3       	std	Y+37, r26	; 0x25
    3528:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    352a:	6b a1       	ldd	r22, Y+35	; 0x23
    352c:	7c a1       	ldd	r23, Y+36	; 0x24
    352e:	8d a1       	ldd	r24, Y+37	; 0x25
    3530:	9e a1       	ldd	r25, Y+38	; 0x26
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e8       	ldi	r20, 0x80	; 128
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    353e:	88 23       	and	r24, r24
    3540:	2c f4       	brge	.+10     	; 0x354c <HPushBotton_u8PbStatus+0x1ac>
		__ticks = 1;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9a a3       	std	Y+34, r25	; 0x22
    3548:	89 a3       	std	Y+33, r24	; 0x21
    354a:	3f c0       	rjmp	.+126    	; 0x35ca <HPushBotton_u8PbStatus+0x22a>
	else if (__tmp > 65535)
    354c:	6b a1       	ldd	r22, Y+35	; 0x23
    354e:	7c a1       	ldd	r23, Y+36	; 0x24
    3550:	8d a1       	ldd	r24, Y+37	; 0x25
    3552:	9e a1       	ldd	r25, Y+38	; 0x26
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	3f ef       	ldi	r19, 0xFF	; 255
    3558:	4f e7       	ldi	r20, 0x7F	; 127
    355a:	57 e4       	ldi	r21, 0x47	; 71
    355c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3560:	18 16       	cp	r1, r24
    3562:	4c f5       	brge	.+82     	; 0x35b6 <HPushBotton_u8PbStatus+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3564:	6f a1       	ldd	r22, Y+39	; 0x27
    3566:	78 a5       	ldd	r23, Y+40	; 0x28
    3568:	89 a5       	ldd	r24, Y+41	; 0x29
    356a:	9a a5       	ldd	r25, Y+42	; 0x2a
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e2       	ldi	r20, 0x20	; 32
    3572:	51 e4       	ldi	r21, 0x41	; 65
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9a a3       	std	Y+34, r25	; 0x22
    358a:	89 a3       	std	Y+33, r24	; 0x21
    358c:	0f c0       	rjmp	.+30     	; 0x35ac <HPushBotton_u8PbStatus+0x20c>
    358e:	88 ec       	ldi	r24, 0xC8	; 200
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	98 a3       	std	Y+32, r25	; 0x20
    3594:	8f 8f       	std	Y+31, r24	; 0x1f
    3596:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3598:	98 a1       	ldd	r25, Y+32	; 0x20
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <HPushBotton_u8PbStatus+0x1fa>
    359e:	98 a3       	std	Y+32, r25	; 0x20
    35a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a2:	89 a1       	ldd	r24, Y+33	; 0x21
    35a4:	9a a1       	ldd	r25, Y+34	; 0x22
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	9a a3       	std	Y+34, r25	; 0x22
    35aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ac:	89 a1       	ldd	r24, Y+33	; 0x21
    35ae:	9a a1       	ldd	r25, Y+34	; 0x22
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	69 f7       	brne	.-38     	; 0x358e <HPushBotton_u8PbStatus+0x1ee>
    35b4:	14 c0       	rjmp	.+40     	; 0x35de <HPushBotton_u8PbStatus+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b6:	6b a1       	ldd	r22, Y+35	; 0x23
    35b8:	7c a1       	ldd	r23, Y+36	; 0x24
    35ba:	8d a1       	ldd	r24, Y+37	; 0x25
    35bc:	9e a1       	ldd	r25, Y+38	; 0x26
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9a a3       	std	Y+34, r25	; 0x22
    35c8:	89 a3       	std	Y+33, r24	; 0x21
    35ca:	89 a1       	ldd	r24, Y+33	; 0x21
    35cc:	9a a1       	ldd	r25, Y+34	; 0x22
    35ce:	9e 8f       	std	Y+30, r25	; 0x1e
    35d0:	8d 8f       	std	Y+29, r24	; 0x1d
    35d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <HPushBotton_u8PbStatus+0x236>
    35da:	9e 8f       	std	Y+30, r25	; 0x1e
    35dc:	8d 8f       	std	Y+29, r24	; 0x1d
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb2 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb2_PORT , Pb2_PIN) == PRESSED)
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	61 e0       	ldi	r22, 0x01	; 1
    35e2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    35e6:	88 23       	and	r24, r24
    35e8:	09 f0       	breq	.+2      	; 0x35ec <HPushBotton_u8PbStatus+0x24c>
    35ea:	82 c0       	rjmp	.+260    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    35ec:	19 ae       	std	Y+57, r1	; 0x39
    35ee:	80 c0       	rjmp	.+256    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
							}
		                }
					   break ;
					   
					   /**check Pb3 is pressed or not*/
		case Pb3_ID :  if (MDIO_u8GetPinVal (Pb3_PORT , Pb3_PIN) == PRESSED)
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	62 e0       	ldi	r22, 0x02	; 2
    35f4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    35f8:	88 23       	and	r24, r24
    35fa:	09 f0       	breq	.+2      	; 0x35fe <HPushBotton_u8PbStatus+0x25e>
    35fc:	79 c0       	rjmp	.+242    	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	a0 ea       	ldi	r26, 0xA0	; 160
    3604:	b1 e4       	ldi	r27, 0x41	; 65
    3606:	89 8f       	std	Y+25, r24	; 0x19
    3608:	9a 8f       	std	Y+26, r25	; 0x1a
    360a:	ab 8f       	std	Y+27, r26	; 0x1b
    360c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	69 8d       	ldd	r22, Y+25	; 0x19
    3610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a ef       	ldi	r20, 0xFA	; 250
    361c:	54 e4       	ldi	r21, 0x44	; 68
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8d 8b       	std	Y+21, r24	; 0x15
    3628:	9e 8b       	std	Y+22, r25	; 0x16
    362a:	af 8b       	std	Y+23, r26	; 0x17
    362c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    362e:	6d 89       	ldd	r22, Y+21	; 0x15
    3630:	7e 89       	ldd	r23, Y+22	; 0x16
    3632:	8f 89       	ldd	r24, Y+23	; 0x17
    3634:	98 8d       	ldd	r25, Y+24	; 0x18
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	2c f4       	brge	.+10     	; 0x3650 <HPushBotton_u8PbStatus+0x2b0>
		__ticks = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 8b       	std	Y+20, r25	; 0x14
    364c:	8b 8b       	std	Y+19, r24	; 0x13
    364e:	3f c0       	rjmp	.+126    	; 0x36ce <HPushBotton_u8PbStatus+0x32e>
	else if (__tmp > 65535)
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	7e 89       	ldd	r23, Y+22	; 0x16
    3654:	8f 89       	ldd	r24, Y+23	; 0x17
    3656:	98 8d       	ldd	r25, Y+24	; 0x18
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	4c f5       	brge	.+82     	; 0x36ba <HPushBotton_u8PbStatus+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	69 8d       	ldd	r22, Y+25	; 0x19
    366a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9c 8b       	std	Y+20, r25	; 0x14
    368e:	8b 8b       	std	Y+19, r24	; 0x13
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <HPushBotton_u8PbStatus+0x310>
    3692:	88 ec       	ldi	r24, 0xC8	; 200
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	9a 8b       	std	Y+18, r25	; 0x12
    3698:	89 8b       	std	Y+17, r24	; 0x11
    369a:	89 89       	ldd	r24, Y+17	; 0x11
    369c:	9a 89       	ldd	r25, Y+18	; 0x12
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <HPushBotton_u8PbStatus+0x2fe>
    36a2:	9a 8b       	std	Y+18, r25	; 0x12
    36a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	8b 89       	ldd	r24, Y+19	; 0x13
    36a8:	9c 89       	ldd	r25, Y+20	; 0x14
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	9c 8b       	std	Y+20, r25	; 0x14
    36ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	8b 89       	ldd	r24, Y+19	; 0x13
    36b2:	9c 89       	ldd	r25, Y+20	; 0x14
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	69 f7       	brne	.-38     	; 0x3692 <HPushBotton_u8PbStatus+0x2f2>
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <HPushBotton_u8PbStatus+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ba:	6d 89       	ldd	r22, Y+21	; 0x15
    36bc:	7e 89       	ldd	r23, Y+22	; 0x16
    36be:	8f 89       	ldd	r24, Y+23	; 0x17
    36c0:	98 8d       	ldd	r25, Y+24	; 0x18
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9c 8b       	std	Y+20, r25	; 0x14
    36cc:	8b 8b       	std	Y+19, r24	; 0x13
    36ce:	8b 89       	ldd	r24, Y+19	; 0x13
    36d0:	9c 89       	ldd	r25, Y+20	; 0x14
    36d2:	98 8b       	std	Y+16, r25	; 0x10
    36d4:	8f 87       	std	Y+15, r24	; 0x0f
    36d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d8:	98 89       	ldd	r25, Y+16	; 0x10
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <HPushBotton_u8PbStatus+0x33a>
    36de:	98 8b       	std	Y+16, r25	; 0x10
    36e0:	8f 87       	std	Y+15, r24	; 0x0f
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb3 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb3_PORT , Pb3_PIN) == PRESSED)
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	62 e0       	ldi	r22, 0x02	; 2
    36e6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    36ea:	88 23       	and	r24, r24
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    36ee:	19 ae       	std	Y+57, r1	; 0x39
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	a0 ea       	ldi	r26, 0xA0	; 160
    36f6:	b1 e4       	ldi	r27, 0x41	; 65
    36f8:	8b 87       	std	Y+11, r24	; 0x0b
    36fa:	9c 87       	std	Y+12, r25	; 0x0c
    36fc:	ad 87       	std	Y+13, r26	; 0x0d
    36fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3700:	6b 85       	ldd	r22, Y+11	; 0x0b
    3702:	7c 85       	ldd	r23, Y+12	; 0x0c
    3704:	8d 85       	ldd	r24, Y+13	; 0x0d
    3706:	9e 85       	ldd	r25, Y+14	; 0x0e
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4a ef       	ldi	r20, 0xFA	; 250
    370e:	54 e4       	ldi	r21, 0x44	; 68
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	8f 83       	std	Y+7, r24	; 0x07
    371a:	98 87       	std	Y+8, r25	; 0x08
    371c:	a9 87       	std	Y+9, r26	; 0x09
    371e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3720:	6f 81       	ldd	r22, Y+7	; 0x07
    3722:	78 85       	ldd	r23, Y+8	; 0x08
    3724:	89 85       	ldd	r24, Y+9	; 0x09
    3726:	9a 85       	ldd	r25, Y+10	; 0x0a
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e8       	ldi	r20, 0x80	; 128
    372e:	5f e3       	ldi	r21, 0x3F	; 63
    3730:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3734:	88 23       	and	r24, r24
    3736:	2c f4       	brge	.+10     	; 0x3742 <HPushBotton_u8PbStatus+0x3a2>
		__ticks = 1;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	9e 83       	std	Y+6, r25	; 0x06
    373e:	8d 83       	std	Y+5, r24	; 0x05
    3740:	3f c0       	rjmp	.+126    	; 0x37c0 <HPushBotton_u8PbStatus+0x420>
	else if (__tmp > 65535)
    3742:	6f 81       	ldd	r22, Y+7	; 0x07
    3744:	78 85       	ldd	r23, Y+8	; 0x08
    3746:	89 85       	ldd	r24, Y+9	; 0x09
    3748:	9a 85       	ldd	r25, Y+10	; 0x0a
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	3f ef       	ldi	r19, 0xFF	; 255
    374e:	4f e7       	ldi	r20, 0x7F	; 127
    3750:	57 e4       	ldi	r21, 0x47	; 71
    3752:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3756:	18 16       	cp	r1, r24
    3758:	4c f5       	brge	.+82     	; 0x37ac <HPushBotton_u8PbStatus+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375a:	6b 85       	ldd	r22, Y+11	; 0x0b
    375c:	7c 85       	ldd	r23, Y+12	; 0x0c
    375e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3760:	9e 85       	ldd	r25, Y+14	; 0x0e
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	9e 83       	std	Y+6, r25	; 0x06
    3780:	8d 83       	std	Y+5, r24	; 0x05
    3782:	0f c0       	rjmp	.+30     	; 0x37a2 <HPushBotton_u8PbStatus+0x402>
    3784:	88 ec       	ldi	r24, 0xC8	; 200
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9c 83       	std	Y+4, r25	; 0x04
    378a:	8b 83       	std	Y+3, r24	; 0x03
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	9c 81       	ldd	r25, Y+4	; 0x04
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <HPushBotton_u8PbStatus+0x3f0>
    3794:	9c 83       	std	Y+4, r25	; 0x04
    3796:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3798:	8d 81       	ldd	r24, Y+5	; 0x05
    379a:	9e 81       	ldd	r25, Y+6	; 0x06
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	9e 83       	std	Y+6, r25	; 0x06
    37a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	69 f7       	brne	.-38     	; 0x3784 <HPushBotton_u8PbStatus+0x3e4>
    37aa:	14 c0       	rjmp	.+40     	; 0x37d4 <HPushBotton_u8PbStatus+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	6f 81       	ldd	r22, Y+7	; 0x07
    37ae:	78 85       	ldd	r23, Y+8	; 0x08
    37b0:	89 85       	ldd	r24, Y+9	; 0x09
    37b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9e 83       	std	Y+6, r25	; 0x06
    37be:	8d 83       	std	Y+5, r24	; 0x05
    37c0:	8d 81       	ldd	r24, Y+5	; 0x05
    37c2:	9e 81       	ldd	r25, Y+6	; 0x06
    37c4:	9a 83       	std	Y+2, r25	; 0x02
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <HPushBotton_u8PbStatus+0x42c>
    37d0:	9a 83       	std	Y+2, r25	; 0x02
    37d2:	89 83       	std	Y+1, r24	; 0x01
		default     :  /** Error */
		               break ;
	}
	/**delay 20ms to detect bouncing*/
	_delay_ms (DELAY_FOR_DEPOUNCING) ;
	return L_u8PbStatus ;
    37d4:	89 ad       	ldd	r24, Y+57	; 0x39
}
    37d6:	ec 96       	adiw	r28, 0x3c	; 60
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <HLCD_voidSendCmd>:
#include <util/delay.h>
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	ab 97       	sbiw	r28, 0x2b	; 43
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	8b a7       	std	Y+43, r24	; 0x2b
	#if MODE == EIGHT_BIT_CONNECTION
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    37fe:	84 e0       	ldi	r24, 0x04	; 4
    3800:	66 e0       	ldi	r22, 0x06	; 6
    3802:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>
	    
	    /**send cmd to control register */
	    MDIO_voidSetPortVal (LCD_DATA_PORT , A_u8CmdID) ;
    3806:	82 e0       	ldi	r24, 0x02	; 2
    3808:	6b a5       	ldd	r22, Y+43	; 0x2b
    380a:	0e 94 27 14 	call	0x284e	; 0x284e <MDIO_voidSetPortVal>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal (LCD_RS_PORT , LCD_RS_PIN ) ;
    380e:	84 e0       	ldi	r24, 0x04	; 4
    3810:	67 e0       	ldi	r22, 0x07	; 7
    3812:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    3816:	84 e0       	ldi	r24, 0x04	; 4
    3818:	65 e0       	ldi	r22, 0x05	; 5
    381a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <MDIO_voidSetPinVal>
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	a0 e0       	ldi	r26, 0x00	; 0
    3824:	b0 e4       	ldi	r27, 0x40	; 64
    3826:	8f a3       	std	Y+39, r24	; 0x27
    3828:	98 a7       	std	Y+40, r25	; 0x28
    382a:	a9 a7       	std	Y+41, r26	; 0x29
    382c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382e:	6f a1       	ldd	r22, Y+39	; 0x27
    3830:	78 a5       	ldd	r23, Y+40	; 0x28
    3832:	89 a5       	ldd	r24, Y+41	; 0x29
    3834:	9a a5       	ldd	r25, Y+42	; 0x2a
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	4a ef       	ldi	r20, 0xFA	; 250
    383c:	54 e4       	ldi	r21, 0x44	; 68
    383e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	8b a3       	std	Y+35, r24	; 0x23
    3848:	9c a3       	std	Y+36, r25	; 0x24
    384a:	ad a3       	std	Y+37, r26	; 0x25
    384c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    384e:	6b a1       	ldd	r22, Y+35	; 0x23
    3850:	7c a1       	ldd	r23, Y+36	; 0x24
    3852:	8d a1       	ldd	r24, Y+37	; 0x25
    3854:	9e a1       	ldd	r25, Y+38	; 0x26
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e8       	ldi	r20, 0x80	; 128
    385c:	5f e3       	ldi	r21, 0x3F	; 63
    385e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3862:	88 23       	and	r24, r24
    3864:	2c f4       	brge	.+10     	; 0x3870 <HLCD_voidSendCmd+0x88>
		__ticks = 1;
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	9a a3       	std	Y+34, r25	; 0x22
    386c:	89 a3       	std	Y+33, r24	; 0x21
    386e:	3f c0       	rjmp	.+126    	; 0x38ee <HLCD_voidSendCmd+0x106>
	else if (__tmp > 65535)
    3870:	6b a1       	ldd	r22, Y+35	; 0x23
    3872:	7c a1       	ldd	r23, Y+36	; 0x24
    3874:	8d a1       	ldd	r24, Y+37	; 0x25
    3876:	9e a1       	ldd	r25, Y+38	; 0x26
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	3f ef       	ldi	r19, 0xFF	; 255
    387c:	4f e7       	ldi	r20, 0x7F	; 127
    387e:	57 e4       	ldi	r21, 0x47	; 71
    3880:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3884:	18 16       	cp	r1, r24
    3886:	4c f5       	brge	.+82     	; 0x38da <HLCD_voidSendCmd+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3888:	6f a1       	ldd	r22, Y+39	; 0x27
    388a:	78 a5       	ldd	r23, Y+40	; 0x28
    388c:	89 a5       	ldd	r24, Y+41	; 0x29
    388e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e2       	ldi	r20, 0x20	; 32
    3896:	51 e4       	ldi	r21, 0x41	; 65
    3898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9a a3       	std	Y+34, r25	; 0x22
    38ae:	89 a3       	std	Y+33, r24	; 0x21
    38b0:	0f c0       	rjmp	.+30     	; 0x38d0 <HLCD_voidSendCmd+0xe8>
    38b2:	88 ec       	ldi	r24, 0xC8	; 200
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	98 a3       	std	Y+32, r25	; 0x20
    38b8:	8f 8f       	std	Y+31, r24	; 0x1f
    38ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38bc:	98 a1       	ldd	r25, Y+32	; 0x20
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <HLCD_voidSendCmd+0xd6>
    38c2:	98 a3       	std	Y+32, r25	; 0x20
    38c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c6:	89 a1       	ldd	r24, Y+33	; 0x21
    38c8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	9a a3       	std	Y+34, r25	; 0x22
    38ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d0:	89 a1       	ldd	r24, Y+33	; 0x21
    38d2:	9a a1       	ldd	r25, Y+34	; 0x22
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	69 f7       	brne	.-38     	; 0x38b2 <HLCD_voidSendCmd+0xca>
    38d8:	14 c0       	rjmp	.+40     	; 0x3902 <HLCD_voidSendCmd+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38da:	6b a1       	ldd	r22, Y+35	; 0x23
    38dc:	7c a1       	ldd	r23, Y+36	; 0x24
    38de:	8d a1       	ldd	r24, Y+37	; 0x25
    38e0:	9e a1       	ldd	r25, Y+38	; 0x26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9a a3       	std	Y+34, r25	; 0x22
    38ec:	89 a3       	std	Y+33, r24	; 0x21
    38ee:	89 a1       	ldd	r24, Y+33	; 0x21
    38f0:	9a a1       	ldd	r25, Y+34	; 0x22
    38f2:	9e 8f       	std	Y+30, r25	; 0x1e
    38f4:	8d 8f       	std	Y+29, r24	; 0x1d
    38f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <HLCD_voidSendCmd+0x112>
    38fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3900:	8d 8f       	std	Y+29, r24	; 0x1d
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    3902:	84 e0       	ldi	r24, 0x04	; 4
    3904:	65 e0       	ldi	r22, 0x05	; 5
    3906:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	a0 e0       	ldi	r26, 0x00	; 0
    3910:	b0 e4       	ldi	r27, 0x40	; 64
    3912:	89 8f       	std	Y+25, r24	; 0x19
    3914:	9a 8f       	std	Y+26, r25	; 0x1a
    3916:	ab 8f       	std	Y+27, r26	; 0x1b
    3918:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391a:	69 8d       	ldd	r22, Y+25	; 0x19
    391c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3920:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	4a ef       	ldi	r20, 0xFA	; 250
    3928:	54 e4       	ldi	r21, 0x44	; 68
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8d 8b       	std	Y+21, r24	; 0x15
    3934:	9e 8b       	std	Y+22, r25	; 0x16
    3936:	af 8b       	std	Y+23, r26	; 0x17
    3938:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    393a:	6d 89       	ldd	r22, Y+21	; 0x15
    393c:	7e 89       	ldd	r23, Y+22	; 0x16
    393e:	8f 89       	ldd	r24, Y+23	; 0x17
    3940:	98 8d       	ldd	r25, Y+24	; 0x18
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    394e:	88 23       	and	r24, r24
    3950:	2c f4       	brge	.+10     	; 0x395c <HLCD_voidSendCmd+0x174>
		__ticks = 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9c 8b       	std	Y+20, r25	; 0x14
    3958:	8b 8b       	std	Y+19, r24	; 0x13
    395a:	3f c0       	rjmp	.+126    	; 0x39da <HLCD_voidSendCmd+0x1f2>
	else if (__tmp > 65535)
    395c:	6d 89       	ldd	r22, Y+21	; 0x15
    395e:	7e 89       	ldd	r23, Y+22	; 0x16
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	4c f5       	brge	.+82     	; 0x39c6 <HLCD_voidSendCmd+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	69 8d       	ldd	r22, Y+25	; 0x19
    3976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    397a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e2       	ldi	r20, 0x20	; 32
    3982:	51 e4       	ldi	r21, 0x41	; 65
    3984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9c 8b       	std	Y+20, r25	; 0x14
    399a:	8b 8b       	std	Y+19, r24	; 0x13
    399c:	0f c0       	rjmp	.+30     	; 0x39bc <HLCD_voidSendCmd+0x1d4>
    399e:	88 ec       	ldi	r24, 0xC8	; 200
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	9a 8b       	std	Y+18, r25	; 0x12
    39a4:	89 8b       	std	Y+17, r24	; 0x11
    39a6:	89 89       	ldd	r24, Y+17	; 0x11
    39a8:	9a 89       	ldd	r25, Y+18	; 0x12
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <HLCD_voidSendCmd+0x1c2>
    39ae:	9a 8b       	std	Y+18, r25	; 0x12
    39b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	9c 8b       	std	Y+20, r25	; 0x14
    39ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39bc:	8b 89       	ldd	r24, Y+19	; 0x13
    39be:	9c 89       	ldd	r25, Y+20	; 0x14
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	69 f7       	brne	.-38     	; 0x399e <HLCD_voidSendCmd+0x1b6>
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <HLCD_voidSendCmd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c6:	6d 89       	ldd	r22, Y+21	; 0x15
    39c8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	98 8d       	ldd	r25, Y+24	; 0x18
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9c 8b       	std	Y+20, r25	; 0x14
    39d8:	8b 8b       	std	Y+19, r24	; 0x13
    39da:	8b 89       	ldd	r24, Y+19	; 0x13
    39dc:	9c 89       	ldd	r25, Y+20	; 0x14
    39de:	98 8b       	std	Y+16, r25	; 0x10
    39e0:	8f 87       	std	Y+15, r24	; 0x0f
    39e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e4:	98 89       	ldd	r25, Y+16	; 0x10
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <HLCD_voidSendCmd+0x1fe>
    39ea:	98 8b       	std	Y+16, r25	; 0x10
    39ec:	8f 87       	std	Y+15, r24	; 0x0f
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	a0 e8       	ldi	r26, 0x80	; 128
    39f4:	bf e3       	ldi	r27, 0x3F	; 63
    39f6:	8b 87       	std	Y+11, r24	; 0x0b
    39f8:	9c 87       	std	Y+12, r25	; 0x0c
    39fa:	ad 87       	std	Y+13, r26	; 0x0d
    39fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	4a ef       	ldi	r20, 0xFA	; 250
    3a0c:	54 e4       	ldi	r21, 0x44	; 68
    3a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	8f 83       	std	Y+7, r24	; 0x07
    3a18:	98 87       	std	Y+8, r25	; 0x08
    3a1a:	a9 87       	std	Y+9, r26	; 0x09
    3a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a20:	78 85       	ldd	r23, Y+8	; 0x08
    3a22:	89 85       	ldd	r24, Y+9	; 0x09
    3a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e8       	ldi	r20, 0x80	; 128
    3a2c:	5f e3       	ldi	r21, 0x3F	; 63
    3a2e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a32:	88 23       	and	r24, r24
    3a34:	2c f4       	brge	.+10     	; 0x3a40 <HLCD_voidSendCmd+0x258>
		__ticks = 1;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	9e 83       	std	Y+6, r25	; 0x06
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
    3a3e:	3f c0       	rjmp	.+126    	; 0x3abe <HLCD_voidSendCmd+0x2d6>
	else if (__tmp > 65535)
    3a40:	6f 81       	ldd	r22, Y+7	; 0x07
    3a42:	78 85       	ldd	r23, Y+8	; 0x08
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	3f ef       	ldi	r19, 0xFF	; 255
    3a4c:	4f e7       	ldi	r20, 0x7F	; 127
    3a4e:	57 e4       	ldi	r21, 0x47	; 71
    3a50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a54:	18 16       	cp	r1, r24
    3a56:	4c f5       	brge	.+82     	; 0x3aaa <HLCD_voidSendCmd+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e2       	ldi	r20, 0x20	; 32
    3a66:	51 e4       	ldi	r21, 0x41	; 65
    3a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	bc 01       	movw	r22, r24
    3a72:	cd 01       	movw	r24, r26
    3a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	9e 83       	std	Y+6, r25	; 0x06
    3a7e:	8d 83       	std	Y+5, r24	; 0x05
    3a80:	0f c0       	rjmp	.+30     	; 0x3aa0 <HLCD_voidSendCmd+0x2b8>
    3a82:	88 ec       	ldi	r24, 0xC8	; 200
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	9c 83       	std	Y+4, r25	; 0x04
    3a88:	8b 83       	std	Y+3, r24	; 0x03
    3a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <HLCD_voidSendCmd+0x2a6>
    3a92:	9c 83       	std	Y+4, r25	; 0x04
    3a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	69 f7       	brne	.-38     	; 0x3a82 <HLCD_voidSendCmd+0x29a>
    3aa8:	14 c0       	rjmp	.+40     	; 0x3ad2 <HLCD_voidSendCmd+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    3aac:	78 85       	ldd	r23, Y+8	; 0x08
    3aae:	89 85       	ldd	r24, Y+9	; 0x09
    3ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	9e 83       	std	Y+6, r25	; 0x06
    3abc:	8d 83       	std	Y+5, r24	; 0x05
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	9a 83       	std	Y+2, r25	; 0x02
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <HLCD_voidSendCmd+0x2e2>
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms (2) ;
	    #else
	    #error "select write mode"
	    #endif
	    _delay_ms(1) ;
    3ad2:	ab 96       	adiw	r28, 0x2b	; 43
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <HLCD_voidInit>:
#include "LCD_private.h"
#include "LCD_conf.h"
#include "LCD_int.h"

void HLCD_voidInit(void)
{
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	c6 54       	subi	r28, 0x46	; 70
    3af2:	d0 40       	sbci	r29, 0x00	; 0
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	f8 94       	cli
    3af8:	de bf       	out	0x3e, r29	; 62
    3afa:	0f be       	out	0x3f, r0	; 63
    3afc:	cd bf       	out	0x3d, r28	; 61
    3afe:	fe 01       	movw	r30, r28
    3b00:	ed 5b       	subi	r30, 0xBD	; 189
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a8 e4       	ldi	r26, 0x48	; 72
    3b0a:	b3 e4       	ldi	r27, 0x43	; 67
    3b0c:	80 83       	st	Z, r24
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	a2 83       	std	Z+2, r26	; 0x02
    3b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	8e 01       	movw	r16, r28
    3b16:	01 5c       	subi	r16, 0xC1	; 193
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	ed 5b       	subi	r30, 0xBD	; 189
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	4a ef       	ldi	r20, 0xFA	; 250
    3b2e:	54 e4       	ldi	r21, 0x44	; 68
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	a2 83       	std	Z+2, r26	; 0x02
    3b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b42:	fe 01       	movw	r30, r28
    3b44:	ff 96       	adiw	r30, 0x3f	; 63
    3b46:	60 81       	ld	r22, Z
    3b48:	71 81       	ldd	r23, Z+1	; 0x01
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <HLCD_voidInit+0x84>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9e af       	std	Y+62, r25	; 0x3e
    3b64:	8d af       	std	Y+61, r24	; 0x3d
    3b66:	46 c0       	rjmp	.+140    	; 0x3bf4 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    3b68:	fe 01       	movw	r30, r28
    3b6a:	ff 96       	adiw	r30, 0x3f	; 63
    3b6c:	60 81       	ld	r22, Z
    3b6e:	71 81       	ldd	r23, Z+1	; 0x01
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	3f ef       	ldi	r19, 0xFF	; 255
    3b78:	4f e7       	ldi	r20, 0x7F	; 127
    3b7a:	57 e4       	ldi	r21, 0x47	; 71
    3b7c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b80:	18 16       	cp	r1, r24
    3b82:	64 f5       	brge	.+88     	; 0x3bdc <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b84:	fe 01       	movw	r30, r28
    3b86:	ed 5b       	subi	r30, 0xBD	; 189
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	60 81       	ld	r22, Z
    3b8c:	71 81       	ldd	r23, Z+1	; 0x01
    3b8e:	82 81       	ldd	r24, Z+2	; 0x02
    3b90:	93 81       	ldd	r25, Z+3	; 0x03
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	40 e2       	ldi	r20, 0x20	; 32
    3b98:	51 e4       	ldi	r21, 0x41	; 65
    3b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	bc 01       	movw	r22, r24
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	9e af       	std	Y+62, r25	; 0x3e
    3bb0:	8d af       	std	Y+61, r24	; 0x3d
    3bb2:	0f c0       	rjmp	.+30     	; 0x3bd2 <HLCD_voidInit+0xee>
    3bb4:	88 ec       	ldi	r24, 0xC8	; 200
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	9c af       	std	Y+60, r25	; 0x3c
    3bba:	8b af       	std	Y+59, r24	; 0x3b
    3bbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <HLCD_voidInit+0xdc>
    3bc4:	9c af       	std	Y+60, r25	; 0x3c
    3bc6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bca:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	9e af       	std	Y+62, r25	; 0x3e
    3bd0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	69 f7       	brne	.-38     	; 0x3bb4 <HLCD_voidInit+0xd0>
    3bda:	16 c0       	rjmp	.+44     	; 0x3c08 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bdc:	fe 01       	movw	r30, r28
    3bde:	ff 96       	adiw	r30, 0x3f	; 63
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9e af       	std	Y+62, r25	; 0x3e
    3bf2:	8d af       	std	Y+61, r24	; 0x3d
    3bf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bf8:	9a af       	std	Y+58, r25	; 0x3a
    3bfa:	89 af       	std	Y+57, r24	; 0x39
    3bfc:	89 ad       	ldd	r24, Y+57	; 0x39
    3bfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <HLCD_voidInit+0x11c>
    3c04:	9a af       	std	Y+58, r25	; 0x3a
    3c06:	89 af       	std	Y+57, r24	; 0x39
	    _delay_ms (200) ;
		
	#if MODE == EIGHT_BIT_CONNECTION
	
	    /** set direction of PORT data to be output */
	    MDIO_voidSetPortDir (LCD_DATA_PORT , ALL_PINS_ONE) ;
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	6f ef       	ldi	r22, 0xFF	; 255
    3c0c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidSetPortDir>
		
		/** set direction of register select to be output */
	    MDIO_voidSetPinDir  (LCD_RS_PORT   , LCD_RS_PIN  , DIO_HIGH) ;
    3c10:	84 e0       	ldi	r24, 0x04	; 4
    3c12:	67 e0       	ldi	r22, 0x07	; 7
    3c14:	41 e0       	ldi	r20, 0x01	; 1
    3c16:	0e 94 43 12 	call	0x2486	; 0x2486 <MDIO_voidSetPinDir>
		
		/** set direction of Enable pin to be output */
	    MDIO_voidSetPinDir  (LCD_EN_PORT   , LCD_EN_PIN  , DIO_HIGH) ;
    3c1a:	84 e0       	ldi	r24, 0x04	; 4
    3c1c:	65 e0       	ldi	r22, 0x05	; 5
    3c1e:	41 e0       	ldi	r20, 0x01	; 1
    3c20:	0e 94 43 12 	call	0x2486	; 0x2486 <MDIO_voidSetPinDir>

		/** set direction of read/write pin to be output */
	    MDIO_voidSetPinDir  (LCD_RW_PORT   , LCD_RW_PIN  , DIO_HIGH) ;
    3c24:	84 e0       	ldi	r24, 0x04	; 4
    3c26:	66 e0       	ldi	r22, 0x06	; 6
    3c28:	41 e0       	ldi	r20, 0x01	; 1
    3c2a:	0e 94 43 12 	call	0x2486	; 0x2486 <MDIO_voidSetPinDir>
	    
	    /** function set */
	    HLCD_voidSendCmd (EIGHT_BIT_CONNECTION) ;
    3c2e:	88 e3       	ldi	r24, 0x38	; 56
    3c30:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	a0 e8       	ldi	r26, 0x80	; 128
    3c3a:	bf e3       	ldi	r27, 0x3F	; 63
    3c3c:	8d ab       	std	Y+53, r24	; 0x35
    3c3e:	9e ab       	std	Y+54, r25	; 0x36
    3c40:	af ab       	std	Y+55, r26	; 0x37
    3c42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c44:	6d a9       	ldd	r22, Y+53	; 0x35
    3c46:	7e a9       	ldd	r23, Y+54	; 0x36
    3c48:	8f a9       	ldd	r24, Y+55	; 0x37
    3c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	4a ef       	ldi	r20, 0xFA	; 250
    3c52:	54 e4       	ldi	r21, 0x44	; 68
    3c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	89 ab       	std	Y+49, r24	; 0x31
    3c5e:	9a ab       	std	Y+50, r25	; 0x32
    3c60:	ab ab       	std	Y+51, r26	; 0x33
    3c62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c64:	69 a9       	ldd	r22, Y+49	; 0x31
    3c66:	7a a9       	ldd	r23, Y+50	; 0x32
    3c68:	8b a9       	ldd	r24, Y+51	; 0x33
    3c6a:	9c a9       	ldd	r25, Y+52	; 0x34
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	2c f4       	brge	.+10     	; 0x3c86 <HLCD_voidInit+0x1a2>
		__ticks = 1;
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	98 ab       	std	Y+48, r25	; 0x30
    3c82:	8f a7       	std	Y+47, r24	; 0x2f
    3c84:	3f c0       	rjmp	.+126    	; 0x3d04 <HLCD_voidInit+0x220>
	else if (__tmp > 65535)
    3c86:	69 a9       	ldd	r22, Y+49	; 0x31
    3c88:	7a a9       	ldd	r23, Y+50	; 0x32
    3c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	3f ef       	ldi	r19, 0xFF	; 255
    3c92:	4f e7       	ldi	r20, 0x7F	; 127
    3c94:	57 e4       	ldi	r21, 0x47	; 71
    3c96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c9a:	18 16       	cp	r1, r24
    3c9c:	4c f5       	brge	.+82     	; 0x3cf0 <HLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    3ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e2       	ldi	r20, 0x20	; 32
    3cac:	51 e4       	ldi	r21, 0x41	; 65
    3cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	bc 01       	movw	r22, r24
    3cb8:	cd 01       	movw	r24, r26
    3cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	98 ab       	std	Y+48, r25	; 0x30
    3cc4:	8f a7       	std	Y+47, r24	; 0x2f
    3cc6:	0f c0       	rjmp	.+30     	; 0x3ce6 <HLCD_voidInit+0x202>
    3cc8:	88 ec       	ldi	r24, 0xC8	; 200
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	9e a7       	std	Y+46, r25	; 0x2e
    3cce:	8d a7       	std	Y+45, r24	; 0x2d
    3cd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <HLCD_voidInit+0x1f0>
    3cd8:	9e a7       	std	Y+46, r25	; 0x2e
    3cda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cde:	98 a9       	ldd	r25, Y+48	; 0x30
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	98 ab       	std	Y+48, r25	; 0x30
    3ce4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ce8:	98 a9       	ldd	r25, Y+48	; 0x30
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	69 f7       	brne	.-38     	; 0x3cc8 <HLCD_voidInit+0x1e4>
    3cee:	14 c0       	rjmp	.+40     	; 0x3d18 <HLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    3cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    3cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    3cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    3cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	98 ab       	std	Y+48, r25	; 0x30
    3d02:	8f a7       	std	Y+47, r24	; 0x2f
    3d04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d06:	98 a9       	ldd	r25, Y+48	; 0x30
    3d08:	9c a7       	std	Y+44, r25	; 0x2c
    3d0a:	8b a7       	std	Y+43, r24	; 0x2b
    3d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <HLCD_voidInit+0x22c>
    3d14:	9c a7       	std	Y+44, r25	; 0x2c
    3d16:	8b a7       	std	Y+43, r24	; 0x2b
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_On_DISPLAY_ON) ;
    3d18:	8e e0       	ldi	r24, 0x0E	; 14
    3d1a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	a0 e8       	ldi	r26, 0x80	; 128
    3d24:	bf e3       	ldi	r27, 0x3F	; 63
    3d26:	8f a3       	std	Y+39, r24	; 0x27
    3d28:	98 a7       	std	Y+40, r25	; 0x28
    3d2a:	a9 a7       	std	Y+41, r26	; 0x29
    3d2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2e:	6f a1       	ldd	r22, Y+39	; 0x27
    3d30:	78 a5       	ldd	r23, Y+40	; 0x28
    3d32:	89 a5       	ldd	r24, Y+41	; 0x29
    3d34:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a ef       	ldi	r20, 0xFA	; 250
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	8b a3       	std	Y+35, r24	; 0x23
    3d48:	9c a3       	std	Y+36, r25	; 0x24
    3d4a:	ad a3       	std	Y+37, r26	; 0x25
    3d4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d50:	7c a1       	ldd	r23, Y+36	; 0x24
    3d52:	8d a1       	ldd	r24, Y+37	; 0x25
    3d54:	9e a1       	ldd	r25, Y+38	; 0x26
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d62:	88 23       	and	r24, r24
    3d64:	2c f4       	brge	.+10     	; 0x3d70 <HLCD_voidInit+0x28c>
		__ticks = 1;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9a a3       	std	Y+34, r25	; 0x22
    3d6c:	89 a3       	std	Y+33, r24	; 0x21
    3d6e:	3f c0       	rjmp	.+126    	; 0x3dee <HLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    3d70:	6b a1       	ldd	r22, Y+35	; 0x23
    3d72:	7c a1       	ldd	r23, Y+36	; 0x24
    3d74:	8d a1       	ldd	r24, Y+37	; 0x25
    3d76:	9e a1       	ldd	r25, Y+38	; 0x26
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	3f ef       	ldi	r19, 0xFF	; 255
    3d7c:	4f e7       	ldi	r20, 0x7F	; 127
    3d7e:	57 e4       	ldi	r21, 0x47	; 71
    3d80:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d84:	18 16       	cp	r1, r24
    3d86:	4c f5       	brge	.+82     	; 0x3dda <HLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d88:	6f a1       	ldd	r22, Y+39	; 0x27
    3d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	40 e2       	ldi	r20, 0x20	; 32
    3d96:	51 e4       	ldi	r21, 0x41	; 65
    3d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	bc 01       	movw	r22, r24
    3da2:	cd 01       	movw	r24, r26
    3da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	9a a3       	std	Y+34, r25	; 0x22
    3dae:	89 a3       	std	Y+33, r24	; 0x21
    3db0:	0f c0       	rjmp	.+30     	; 0x3dd0 <HLCD_voidInit+0x2ec>
    3db2:	88 ec       	ldi	r24, 0xC8	; 200
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	98 a3       	std	Y+32, r25	; 0x20
    3db8:	8f 8f       	std	Y+31, r24	; 0x1f
    3dba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dbc:	98 a1       	ldd	r25, Y+32	; 0x20
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <HLCD_voidInit+0x2da>
    3dc2:	98 a3       	std	Y+32, r25	; 0x20
    3dc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    3dc8:	9a a1       	ldd	r25, Y+34	; 0x22
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	9a a3       	std	Y+34, r25	; 0x22
    3dce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	69 f7       	brne	.-38     	; 0x3db2 <HLCD_voidInit+0x2ce>
    3dd8:	14 c0       	rjmp	.+40     	; 0x3e02 <HLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dda:	6b a1       	ldd	r22, Y+35	; 0x23
    3ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    3dde:	8d a1       	ldd	r24, Y+37	; 0x25
    3de0:	9e a1       	ldd	r25, Y+38	; 0x26
    3de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	9a a3       	std	Y+34, r25	; 0x22
    3dec:	89 a3       	std	Y+33, r24	; 0x21
    3dee:	89 a1       	ldd	r24, Y+33	; 0x21
    3df0:	9a a1       	ldd	r25, Y+34	; 0x22
    3df2:	9e 8f       	std	Y+30, r25	; 0x1e
    3df4:	8d 8f       	std	Y+29, r24	; 0x1d
    3df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3df8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dfa:	01 97       	sbiw	r24, 0x01	; 1
    3dfc:	f1 f7       	brne	.-4      	; 0x3dfa <HLCD_voidInit+0x316>
    3dfe:	9e 8f       	std	Y+30, r25	; 0x1e
    3e00:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	a0 e2       	ldi	r26, 0x20	; 32
    3e0e:	b1 e4       	ldi	r27, 0x41	; 65
    3e10:	89 8f       	std	Y+25, r24	; 0x19
    3e12:	9a 8f       	std	Y+26, r25	; 0x1a
    3e14:	ab 8f       	std	Y+27, r26	; 0x1b
    3e16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e18:	69 8d       	ldd	r22, Y+25	; 0x19
    3e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	4a ef       	ldi	r20, 0xFA	; 250
    3e26:	54 e4       	ldi	r21, 0x44	; 68
    3e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	8d 8b       	std	Y+21, r24	; 0x15
    3e32:	9e 8b       	std	Y+22, r25	; 0x16
    3e34:	af 8b       	std	Y+23, r26	; 0x17
    3e36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e38:	6d 89       	ldd	r22, Y+21	; 0x15
    3e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e4c:	88 23       	and	r24, r24
    3e4e:	2c f4       	brge	.+10     	; 0x3e5a <HLCD_voidInit+0x376>
		__ticks = 1;
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	9c 8b       	std	Y+20, r25	; 0x14
    3e56:	8b 8b       	std	Y+19, r24	; 0x13
    3e58:	3f c0       	rjmp	.+126    	; 0x3ed8 <HLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e60:	98 8d       	ldd	r25, Y+24	; 0x18
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	3f ef       	ldi	r19, 0xFF	; 255
    3e66:	4f e7       	ldi	r20, 0x7F	; 127
    3e68:	57 e4       	ldi	r21, 0x47	; 71
    3e6a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e6e:	18 16       	cp	r1, r24
    3e70:	4c f5       	brge	.+82     	; 0x3ec4 <HLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e72:	69 8d       	ldd	r22, Y+25	; 0x19
    3e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e2       	ldi	r20, 0x20	; 32
    3e80:	51 e4       	ldi	r21, 0x41	; 65
    3e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	bc 01       	movw	r22, r24
    3e8c:	cd 01       	movw	r24, r26
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9c 8b       	std	Y+20, r25	; 0x14
    3e98:	8b 8b       	std	Y+19, r24	; 0x13
    3e9a:	0f c0       	rjmp	.+30     	; 0x3eba <HLCD_voidInit+0x3d6>
    3e9c:	88 ec       	ldi	r24, 0xC8	; 200
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	9a 8b       	std	Y+18, r25	; 0x12
    3ea2:	89 8b       	std	Y+17, r24	; 0x11
    3ea4:	89 89       	ldd	r24, Y+17	; 0x11
    3ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <HLCD_voidInit+0x3c4>
    3eac:	9a 8b       	std	Y+18, r25	; 0x12
    3eae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    3eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	9c 8b       	std	Y+20, r25	; 0x14
    3eb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eba:	8b 89       	ldd	r24, Y+19	; 0x13
    3ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	69 f7       	brne	.-38     	; 0x3e9c <HLCD_voidInit+0x3b8>
    3ec2:	14 c0       	rjmp	.+40     	; 0x3eec <HLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eca:	98 8d       	ldd	r25, Y+24	; 0x18
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9c 8b       	std	Y+20, r25	; 0x14
    3ed6:	8b 8b       	std	Y+19, r24	; 0x13
    3ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eda:	9c 89       	ldd	r25, Y+20	; 0x14
    3edc:	98 8b       	std	Y+16, r25	; 0x10
    3ede:	8f 87       	std	Y+15, r24	; 0x0f
    3ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee2:	98 89       	ldd	r25, Y+16	; 0x10
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <HLCD_voidInit+0x400>
    3ee8:	98 8b       	std	Y+16, r25	; 0x10
    3eea:	8f 87       	std	Y+15, r24	; 0x0f
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
    3eec:	86 e0       	ldi	r24, 0x06	; 6
    3eee:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	a0 e8       	ldi	r26, 0x80	; 128
    3ef8:	bf e3       	ldi	r27, 0x3F	; 63
    3efa:	8b 87       	std	Y+11, r24	; 0x0b
    3efc:	9c 87       	std	Y+12, r25	; 0x0c
    3efe:	ad 87       	std	Y+13, r26	; 0x0d
    3f00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	4a ef       	ldi	r20, 0xFA	; 250
    3f10:	54 e4       	ldi	r21, 0x44	; 68
    3f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	8f 83       	std	Y+7, r24	; 0x07
    3f1c:	98 87       	std	Y+8, r25	; 0x08
    3f1e:	a9 87       	std	Y+9, r26	; 0x09
    3f20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f22:	6f 81       	ldd	r22, Y+7	; 0x07
    3f24:	78 85       	ldd	r23, Y+8	; 0x08
    3f26:	89 85       	ldd	r24, Y+9	; 0x09
    3f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e8       	ldi	r20, 0x80	; 128
    3f30:	5f e3       	ldi	r21, 0x3F	; 63
    3f32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f36:	88 23       	and	r24, r24
    3f38:	2c f4       	brge	.+10     	; 0x3f44 <HLCD_voidInit+0x460>
		__ticks = 1;
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	9e 83       	std	Y+6, r25	; 0x06
    3f40:	8d 83       	std	Y+5, r24	; 0x05
    3f42:	3f c0       	rjmp	.+126    	; 0x3fc2 <HLCD_voidInit+0x4de>
	else if (__tmp > 65535)
    3f44:	6f 81       	ldd	r22, Y+7	; 0x07
    3f46:	78 85       	ldd	r23, Y+8	; 0x08
    3f48:	89 85       	ldd	r24, Y+9	; 0x09
    3f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	3f ef       	ldi	r19, 0xFF	; 255
    3f50:	4f e7       	ldi	r20, 0x7F	; 127
    3f52:	57 e4       	ldi	r21, 0x47	; 71
    3f54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f58:	18 16       	cp	r1, r24
    3f5a:	4c f5       	brge	.+82     	; 0x3fae <HLCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e2       	ldi	r20, 0x20	; 32
    3f6a:	51 e4       	ldi	r21, 0x41	; 65
    3f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
    3f84:	0f c0       	rjmp	.+30     	; 0x3fa4 <HLCD_voidInit+0x4c0>
    3f86:	88 ec       	ldi	r24, 0xC8	; 200
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	9c 83       	std	Y+4, r25	; 0x04
    3f8c:	8b 83       	std	Y+3, r24	; 0x03
    3f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f90:	9c 81       	ldd	r25, Y+4	; 0x04
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	f1 f7       	brne	.-4      	; 0x3f92 <HLCD_voidInit+0x4ae>
    3f96:	9c 83       	std	Y+4, r25	; 0x04
    3f98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	9e 83       	std	Y+6, r25	; 0x06
    3fa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa8:	00 97       	sbiw	r24, 0x00	; 0
    3faa:	69 f7       	brne	.-38     	; 0x3f86 <HLCD_voidInit+0x4a2>
    3fac:	14 c0       	rjmp	.+40     	; 0x3fd6 <HLCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fae:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb0:	78 85       	ldd	r23, Y+8	; 0x08
    3fb2:	89 85       	ldd	r24, Y+9	; 0x09
    3fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	9e 83       	std	Y+6, r25	; 0x06
    3fc0:	8d 83       	std	Y+5, r24	; 0x05
    3fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc6:	9a 83       	std	Y+2, r25	; 0x02
    3fc8:	89 83       	std	Y+1, r24	; 0x01
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <HLCD_voidInit+0x4ea>
    3fd2:	9a 83       	std	Y+2, r25	; 0x02
    3fd4:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for command to settle */
	    _delay_ms (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
    3fd6:	ca 5b       	subi	r28, 0xBA	; 186
    3fd8:	df 4f       	sbci	r29, 0xFF	; 255
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	cf 91       	pop	r28
    3fe6:	df 91       	pop	r29
    3fe8:	1f 91       	pop	r17
    3fea:	0f 91       	pop	r16
    3fec:	08 95       	ret

00003fee <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
    3fee:	df 93       	push	r29
    3ff0:	cf 93       	push	r28
    3ff2:	cd b7       	in	r28, 0x3d	; 61
    3ff4:	de b7       	in	r29, 0x3e	; 62
    3ff6:	ab 97       	sbiw	r28, 0x2b	; 43
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	8b a7       	std	Y+43, r24	; 0x2b
	#if MODE == EIGHT_BIT_CONNECTION
	    
		/**set read/write to low */
		MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    4004:	84 e0       	ldi	r24, 0x04	; 4
    4006:	66 e0       	ldi	r22, 0x06	; 6
    4008:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidSetPortVal (LCD_DATA_PORT , A_u8Char) ;
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	6b a5       	ldd	r22, Y+43	; 0x2b
    4010:	0e 94 27 14 	call	0x284e	; 0x284e <MDIO_voidSetPortVal>
		
		/**set register select to high */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    4014:	84 e0       	ldi	r24, 0x04	; 4
    4016:	67 e0       	ldi	r22, 0x07	; 7
    4018:	0e 94 fe 12 	call	0x25fc	; 0x25fc <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    401c:	84 e0       	ldi	r24, 0x04	; 4
    401e:	65 e0       	ldi	r22, 0x05	; 5
    4020:	0e 94 fe 12 	call	0x25fc	; 0x25fc <MDIO_voidSetPinVal>
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	a0 e0       	ldi	r26, 0x00	; 0
    402a:	b0 e4       	ldi	r27, 0x40	; 64
    402c:	8f a3       	std	Y+39, r24	; 0x27
    402e:	98 a7       	std	Y+40, r25	; 0x28
    4030:	a9 a7       	std	Y+41, r26	; 0x29
    4032:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4034:	6f a1       	ldd	r22, Y+39	; 0x27
    4036:	78 a5       	ldd	r23, Y+40	; 0x28
    4038:	89 a5       	ldd	r24, Y+41	; 0x29
    403a:	9a a5       	ldd	r25, Y+42	; 0x2a
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	4a ef       	ldi	r20, 0xFA	; 250
    4042:	54 e4       	ldi	r21, 0x44	; 68
    4044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	8b a3       	std	Y+35, r24	; 0x23
    404e:	9c a3       	std	Y+36, r25	; 0x24
    4050:	ad a3       	std	Y+37, r26	; 0x25
    4052:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4054:	6b a1       	ldd	r22, Y+35	; 0x23
    4056:	7c a1       	ldd	r23, Y+36	; 0x24
    4058:	8d a1       	ldd	r24, Y+37	; 0x25
    405a:	9e a1       	ldd	r25, Y+38	; 0x26
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e8       	ldi	r20, 0x80	; 128
    4062:	5f e3       	ldi	r21, 0x3F	; 63
    4064:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4068:	88 23       	and	r24, r24
    406a:	2c f4       	brge	.+10     	; 0x4076 <HLCD_voidSendData+0x88>
		__ticks = 1;
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	9a a3       	std	Y+34, r25	; 0x22
    4072:	89 a3       	std	Y+33, r24	; 0x21
    4074:	3f c0       	rjmp	.+126    	; 0x40f4 <HLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    4076:	6b a1       	ldd	r22, Y+35	; 0x23
    4078:	7c a1       	ldd	r23, Y+36	; 0x24
    407a:	8d a1       	ldd	r24, Y+37	; 0x25
    407c:	9e a1       	ldd	r25, Y+38	; 0x26
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	3f ef       	ldi	r19, 0xFF	; 255
    4082:	4f e7       	ldi	r20, 0x7F	; 127
    4084:	57 e4       	ldi	r21, 0x47	; 71
    4086:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    408a:	18 16       	cp	r1, r24
    408c:	4c f5       	brge	.+82     	; 0x40e0 <HLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408e:	6f a1       	ldd	r22, Y+39	; 0x27
    4090:	78 a5       	ldd	r23, Y+40	; 0x28
    4092:	89 a5       	ldd	r24, Y+41	; 0x29
    4094:	9a a5       	ldd	r25, Y+42	; 0x2a
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e2       	ldi	r20, 0x20	; 32
    409c:	51 e4       	ldi	r21, 0x41	; 65
    409e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	bc 01       	movw	r22, r24
    40a8:	cd 01       	movw	r24, r26
    40aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	9a a3       	std	Y+34, r25	; 0x22
    40b4:	89 a3       	std	Y+33, r24	; 0x21
    40b6:	0f c0       	rjmp	.+30     	; 0x40d6 <HLCD_voidSendData+0xe8>
    40b8:	88 ec       	ldi	r24, 0xC8	; 200
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	98 a3       	std	Y+32, r25	; 0x20
    40be:	8f 8f       	std	Y+31, r24	; 0x1f
    40c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40c2:	98 a1       	ldd	r25, Y+32	; 0x20
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <HLCD_voidSendData+0xd6>
    40c8:	98 a3       	std	Y+32, r25	; 0x20
    40ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40cc:	89 a1       	ldd	r24, Y+33	; 0x21
    40ce:	9a a1       	ldd	r25, Y+34	; 0x22
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	9a a3       	std	Y+34, r25	; 0x22
    40d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d6:	89 a1       	ldd	r24, Y+33	; 0x21
    40d8:	9a a1       	ldd	r25, Y+34	; 0x22
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	69 f7       	brne	.-38     	; 0x40b8 <HLCD_voidSendData+0xca>
    40de:	14 c0       	rjmp	.+40     	; 0x4108 <HLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e0:	6b a1       	ldd	r22, Y+35	; 0x23
    40e2:	7c a1       	ldd	r23, Y+36	; 0x24
    40e4:	8d a1       	ldd	r24, Y+37	; 0x25
    40e6:	9e a1       	ldd	r25, Y+38	; 0x26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9a a3       	std	Y+34, r25	; 0x22
    40f2:	89 a3       	std	Y+33, r24	; 0x21
    40f4:	89 a1       	ldd	r24, Y+33	; 0x21
    40f6:	9a a1       	ldd	r25, Y+34	; 0x22
    40f8:	9e 8f       	std	Y+30, r25	; 0x1e
    40fa:	8d 8f       	std	Y+29, r24	; 0x1d
    40fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <HLCD_voidSendData+0x112>
    4104:	9e 8f       	std	Y+30, r25	; 0x1e
    4106:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    4108:	84 e0       	ldi	r24, 0x04	; 4
    410a:	65 e0       	ldi	r22, 0x05	; 5
    410c:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	a0 e0       	ldi	r26, 0x00	; 0
    4116:	b0 e4       	ldi	r27, 0x40	; 64
    4118:	89 8f       	std	Y+25, r24	; 0x19
    411a:	9a 8f       	std	Y+26, r25	; 0x1a
    411c:	ab 8f       	std	Y+27, r26	; 0x1b
    411e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4120:	69 8d       	ldd	r22, Y+25	; 0x19
    4122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	4a ef       	ldi	r20, 0xFA	; 250
    412e:	54 e4       	ldi	r21, 0x44	; 68
    4130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	8d 8b       	std	Y+21, r24	; 0x15
    413a:	9e 8b       	std	Y+22, r25	; 0x16
    413c:	af 8b       	std	Y+23, r26	; 0x17
    413e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4140:	6d 89       	ldd	r22, Y+21	; 0x15
    4142:	7e 89       	ldd	r23, Y+22	; 0x16
    4144:	8f 89       	ldd	r24, Y+23	; 0x17
    4146:	98 8d       	ldd	r25, Y+24	; 0x18
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e8       	ldi	r20, 0x80	; 128
    414e:	5f e3       	ldi	r21, 0x3F	; 63
    4150:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4154:	88 23       	and	r24, r24
    4156:	2c f4       	brge	.+10     	; 0x4162 <HLCD_voidSendData+0x174>
		__ticks = 1;
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	9c 8b       	std	Y+20, r25	; 0x14
    415e:	8b 8b       	std	Y+19, r24	; 0x13
    4160:	3f c0       	rjmp	.+126    	; 0x41e0 <HLCD_voidSendData+0x1f2>
	else if (__tmp > 65535)
    4162:	6d 89       	ldd	r22, Y+21	; 0x15
    4164:	7e 89       	ldd	r23, Y+22	; 0x16
    4166:	8f 89       	ldd	r24, Y+23	; 0x17
    4168:	98 8d       	ldd	r25, Y+24	; 0x18
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	3f ef       	ldi	r19, 0xFF	; 255
    416e:	4f e7       	ldi	r20, 0x7F	; 127
    4170:	57 e4       	ldi	r21, 0x47	; 71
    4172:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4176:	18 16       	cp	r1, r24
    4178:	4c f5       	brge	.+82     	; 0x41cc <HLCD_voidSendData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    417a:	69 8d       	ldd	r22, Y+25	; 0x19
    417c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    417e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e2       	ldi	r20, 0x20	; 32
    4188:	51 e4       	ldi	r21, 0x41	; 65
    418a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	bc 01       	movw	r22, r24
    4194:	cd 01       	movw	r24, r26
    4196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	9c 8b       	std	Y+20, r25	; 0x14
    41a0:	8b 8b       	std	Y+19, r24	; 0x13
    41a2:	0f c0       	rjmp	.+30     	; 0x41c2 <HLCD_voidSendData+0x1d4>
    41a4:	88 ec       	ldi	r24, 0xC8	; 200
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	9a 8b       	std	Y+18, r25	; 0x12
    41aa:	89 8b       	std	Y+17, r24	; 0x11
    41ac:	89 89       	ldd	r24, Y+17	; 0x11
    41ae:	9a 89       	ldd	r25, Y+18	; 0x12
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	f1 f7       	brne	.-4      	; 0x41b0 <HLCD_voidSendData+0x1c2>
    41b4:	9a 8b       	std	Y+18, r25	; 0x12
    41b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b8:	8b 89       	ldd	r24, Y+19	; 0x13
    41ba:	9c 89       	ldd	r25, Y+20	; 0x14
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	9c 8b       	std	Y+20, r25	; 0x14
    41c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c2:	8b 89       	ldd	r24, Y+19	; 0x13
    41c4:	9c 89       	ldd	r25, Y+20	; 0x14
    41c6:	00 97       	sbiw	r24, 0x00	; 0
    41c8:	69 f7       	brne	.-38     	; 0x41a4 <HLCD_voidSendData+0x1b6>
    41ca:	14 c0       	rjmp	.+40     	; 0x41f4 <HLCD_voidSendData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41cc:	6d 89       	ldd	r22, Y+21	; 0x15
    41ce:	7e 89       	ldd	r23, Y+22	; 0x16
    41d0:	8f 89       	ldd	r24, Y+23	; 0x17
    41d2:	98 8d       	ldd	r25, Y+24	; 0x18
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9c 8b       	std	Y+20, r25	; 0x14
    41de:	8b 8b       	std	Y+19, r24	; 0x13
    41e0:	8b 89       	ldd	r24, Y+19	; 0x13
    41e2:	9c 89       	ldd	r25, Y+20	; 0x14
    41e4:	98 8b       	std	Y+16, r25	; 0x10
    41e6:	8f 87       	std	Y+15, r24	; 0x0f
    41e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ea:	98 89       	ldd	r25, Y+16	; 0x10
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	f1 f7       	brne	.-4      	; 0x41ec <HLCD_voidSendData+0x1fe>
    41f0:	98 8b       	std	Y+16, r25	; 0x10
    41f2:	8f 87       	std	Y+15, r24	; 0x0f
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	a0 e8       	ldi	r26, 0x80	; 128
    41fa:	bf e3       	ldi	r27, 0x3F	; 63
    41fc:	8b 87       	std	Y+11, r24	; 0x0b
    41fe:	9c 87       	std	Y+12, r25	; 0x0c
    4200:	ad 87       	std	Y+13, r26	; 0x0d
    4202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4204:	6b 85       	ldd	r22, Y+11	; 0x0b
    4206:	7c 85       	ldd	r23, Y+12	; 0x0c
    4208:	8d 85       	ldd	r24, Y+13	; 0x0d
    420a:	9e 85       	ldd	r25, Y+14	; 0x0e
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	4a ef       	ldi	r20, 0xFA	; 250
    4212:	54 e4       	ldi	r21, 0x44	; 68
    4214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	8f 83       	std	Y+7, r24	; 0x07
    421e:	98 87       	std	Y+8, r25	; 0x08
    4220:	a9 87       	std	Y+9, r26	; 0x09
    4222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4224:	6f 81       	ldd	r22, Y+7	; 0x07
    4226:	78 85       	ldd	r23, Y+8	; 0x08
    4228:	89 85       	ldd	r24, Y+9	; 0x09
    422a:	9a 85       	ldd	r25, Y+10	; 0x0a
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4238:	88 23       	and	r24, r24
    423a:	2c f4       	brge	.+10     	; 0x4246 <HLCD_voidSendData+0x258>
		__ticks = 1;
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9e 83       	std	Y+6, r25	; 0x06
    4242:	8d 83       	std	Y+5, r24	; 0x05
    4244:	3f c0       	rjmp	.+126    	; 0x42c4 <HLCD_voidSendData+0x2d6>
	else if (__tmp > 65535)
    4246:	6f 81       	ldd	r22, Y+7	; 0x07
    4248:	78 85       	ldd	r23, Y+8	; 0x08
    424a:	89 85       	ldd	r24, Y+9	; 0x09
    424c:	9a 85       	ldd	r25, Y+10	; 0x0a
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	3f ef       	ldi	r19, 0xFF	; 255
    4252:	4f e7       	ldi	r20, 0x7F	; 127
    4254:	57 e4       	ldi	r21, 0x47	; 71
    4256:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    425a:	18 16       	cp	r1, r24
    425c:	4c f5       	brge	.+82     	; 0x42b0 <HLCD_voidSendData+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    425e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4260:	7c 85       	ldd	r23, Y+12	; 0x0c
    4262:	8d 85       	ldd	r24, Y+13	; 0x0d
    4264:	9e 85       	ldd	r25, Y+14	; 0x0e
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e2       	ldi	r20, 0x20	; 32
    426c:	51 e4       	ldi	r21, 0x41	; 65
    426e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	bc 01       	movw	r22, r24
    4278:	cd 01       	movw	r24, r26
    427a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	9e 83       	std	Y+6, r25	; 0x06
    4284:	8d 83       	std	Y+5, r24	; 0x05
    4286:	0f c0       	rjmp	.+30     	; 0x42a6 <HLCD_voidSendData+0x2b8>
    4288:	88 ec       	ldi	r24, 0xC8	; 200
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	9c 83       	std	Y+4, r25	; 0x04
    428e:	8b 83       	std	Y+3, r24	; 0x03
    4290:	8b 81       	ldd	r24, Y+3	; 0x03
    4292:	9c 81       	ldd	r25, Y+4	; 0x04
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	f1 f7       	brne	.-4      	; 0x4294 <HLCD_voidSendData+0x2a6>
    4298:	9c 83       	std	Y+4, r25	; 0x04
    429a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429c:	8d 81       	ldd	r24, Y+5	; 0x05
    429e:	9e 81       	ldd	r25, Y+6	; 0x06
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	9e 83       	std	Y+6, r25	; 0x06
    42a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a6:	8d 81       	ldd	r24, Y+5	; 0x05
    42a8:	9e 81       	ldd	r25, Y+6	; 0x06
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	69 f7       	brne	.-38     	; 0x4288 <HLCD_voidSendData+0x29a>
    42ae:	14 c0       	rjmp	.+40     	; 0x42d8 <HLCD_voidSendData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b0:	6f 81       	ldd	r22, Y+7	; 0x07
    42b2:	78 85       	ldd	r23, Y+8	; 0x08
    42b4:	89 85       	ldd	r24, Y+9	; 0x09
    42b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	9e 83       	std	Y+6, r25	; 0x06
    42c2:	8d 83       	std	Y+5, r24	; 0x05
    42c4:	8d 81       	ldd	r24, Y+5	; 0x05
    42c6:	9e 81       	ldd	r25, Y+6	; 0x06
    42c8:	9a 83       	std	Y+2, r25	; 0x02
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	9a 81       	ldd	r25, Y+2	; 0x02
    42d0:	01 97       	sbiw	r24, 0x01	; 1
    42d2:	f1 f7       	brne	.-4      	; 0x42d0 <HLCD_voidSendData+0x2e2>
    42d4:	9a 83       	std	Y+2, r25	; 0x02
    42d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (2) ;
	#else 
		 #error "select write mode"
	#endif
	_delay_ms(1) ;
}
    42d8:	ab 96       	adiw	r28, 0x2b	; 43
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
    42e4:	cf 91       	pop	r28
    42e6:	df 91       	pop	r29
    42e8:	08 95       	ret

000042ea <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
    42ea:	df 93       	push	r29
    42ec:	cf 93       	push	r28
    42ee:	00 d0       	rcall	.+0      	; 0x42f0 <HLCD_voidDispStr+0x6>
    42f0:	0f 92       	push	r0
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	9b 83       	std	Y+3, r25	; 0x03
    42f8:	8a 83       	std	Y+2, r24	; 0x02
	/**Local loop index */
	u8 L_u8Index = 0 ;
    42fa:	19 82       	std	Y+1, r1	; 0x01
    42fc:	0e c0       	rjmp	.+28     	; 0x431a <HLCD_voidDispStr+0x30>
	while (A_Pu8String [L_u8Index] != '\0')
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
    4300:	28 2f       	mov	r18, r24
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	8a 81       	ldd	r24, Y+2	; 0x02
    4306:	9b 81       	ldd	r25, Y+3	; 0x03
    4308:	fc 01       	movw	r30, r24
    430a:	e2 0f       	add	r30, r18
    430c:	f3 1f       	adc	r31, r19
    430e:	80 81       	ld	r24, Z
    4310:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	8f 5f       	subi	r24, 0xFF	; 255
    4318:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidDispStr(u8* A_Pu8String)
{
	/**Local loop index */
	u8 L_u8Index = 0 ;
	while (A_Pu8String [L_u8Index] != '\0')
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	28 2f       	mov	r18, r24
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	8a 81       	ldd	r24, Y+2	; 0x02
    4322:	9b 81       	ldd	r25, Y+3	; 0x03
    4324:	fc 01       	movw	r30, r24
    4326:	e2 0f       	add	r30, r18
    4328:	f3 1f       	adc	r31, r19
    432a:	80 81       	ld	r24, Z
    432c:	88 23       	and	r24, r24
    432e:	39 f7       	brne	.-50     	; 0x42fe <HLCD_voidDispStr+0x14>
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
		
		/* Increment local loop index */
		L_u8Index ++ ;
	}
}
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	0f 90       	pop	r0
    4336:	cf 91       	pop	r28
    4338:	df 91       	pop	r29
    433a:	08 95       	ret

0000433c <HLCD_voidDispIntNum>:

void HLCD_voidDispIntNum(u32 A_u32Number)
{
    433c:	df 93       	push	r29
    433e:	cf 93       	push	r28
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	a4 97       	sbiw	r28, 0x24	; 36
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	cd bf       	out	0x3d, r28	; 61
    4350:	69 a3       	std	Y+33, r22	; 0x21
    4352:	7a a3       	std	Y+34, r23	; 0x22
    4354:	8b a3       	std	Y+35, r24	; 0x23
    4356:	9c a3       	std	Y+36, r25	; 0x24
	if (A_u32Number < MIN_INT_NUM && A_u32Number > MAX_INT_NUM)
    4358:	89 a1       	ldd	r24, Y+33	; 0x21
    435a:	9a a1       	ldd	r25, Y+34	; 0x22
    435c:	ab a1       	ldd	r26, Y+35	; 0x23
    435e:	bc a1       	ldd	r27, Y+36	; 0x24
    4360:	81 30       	cpi	r24, 0x01	; 1
    4362:	26 e3       	ldi	r18, 0x36	; 54
    4364:	92 07       	cpc	r25, r18
    4366:	25 e6       	ldi	r18, 0x65	; 101
    4368:	a2 07       	cpc	r26, r18
    436a:	24 ec       	ldi	r18, 0xC4	; 196
    436c:	b2 07       	cpc	r27, r18
    436e:	98 f4       	brcc	.+38     	; 0x4396 <HLCD_voidDispIntNum+0x5a>
    4370:	89 a1       	ldd	r24, Y+33	; 0x21
    4372:	9a a1       	ldd	r25, Y+34	; 0x22
    4374:	ab a1       	ldd	r26, Y+35	; 0x23
    4376:	bc a1       	ldd	r27, Y+36	; 0x24
    4378:	80 30       	cpi	r24, 0x00	; 0
    437a:	2a ec       	ldi	r18, 0xCA	; 202
    437c:	92 07       	cpc	r25, r18
    437e:	2a e9       	ldi	r18, 0x9A	; 154
    4380:	a2 07       	cpc	r26, r18
    4382:	2b e3       	ldi	r18, 0x3B	; 59
    4384:	b2 07       	cpc	r27, r18
    4386:	38 f0       	brcs	.+14     	; 0x4396 <HLCD_voidDispIntNum+0x5a>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
    4388:	0e 94 96 22 	call	0x452c	; 0x452c <HLCD_voidClrScreen>
		HLCD_voidDispStr ("Overflow !!!!") ;
    438c:	80 e6       	ldi	r24, 0x60	; 96
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	0e 94 75 21 	call	0x42ea	; 0x42ea <HLCD_voidDispStr>
    4394:	1a c0       	rjmp	.+52     	; 0x43ca <HLCD_voidDispIntNum+0x8e>
	}
	else
	{
		/**array to stored conversion character*/
	    s8* L_Ps8String [16] = {0} ;
    4396:	80 e2       	ldi	r24, 0x20	; 32
    4398:	fe 01       	movw	r30, r28
    439a:	31 96       	adiw	r30, 0x01	; 1
    439c:	df 01       	movw	r26, r30
    439e:	28 2f       	mov	r18, r24
    43a0:	1d 92       	st	X+, r1
    43a2:	2a 95       	dec	r18
    43a4:	e9 f7       	brne	.-6      	; 0x43a0 <HLCD_voidDispIntNum+0x64>

		/** convert integer to string*/
	    ltoa (A_u32Number , (s8*)L_Ps8String , BASE) ;
    43a6:	89 a1       	ldd	r24, Y+33	; 0x21
    43a8:	9a a1       	ldd	r25, Y+34	; 0x22
    43aa:	ab a1       	ldd	r26, Y+35	; 0x23
    43ac:	bc a1       	ldd	r27, Y+36	; 0x24
    43ae:	9e 01       	movw	r18, r28
    43b0:	2f 5f       	subi	r18, 0xFF	; 255
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	bc 01       	movw	r22, r24
    43b6:	cd 01       	movw	r24, r26
    43b8:	a9 01       	movw	r20, r18
    43ba:	2a e0       	ldi	r18, 0x0A	; 10
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <ltoa>

		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
    43c2:	ce 01       	movw	r24, r28
    43c4:	01 96       	adiw	r24, 0x01	; 1
    43c6:	0e 94 75 21 	call	0x42ea	; 0x42ea <HLCD_voidDispStr>
	}
}
    43ca:	a4 96       	adiw	r28, 0x24	; 36
    43cc:	0f b6       	in	r0, 0x3f	; 63
    43ce:	f8 94       	cli
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	cd bf       	out	0x3d, r28	; 61
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	08 95       	ret

000043dc <HLCD_voidDispFloatNum>:

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
    43dc:	ef 92       	push	r14
    43de:	ff 92       	push	r15
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	df 93       	push	r29
    43e6:	cf 93       	push	r28
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
    43ec:	28 97       	sbiw	r28, 0x08	; 8
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	6c 83       	std	Y+4, r22	; 0x04
    43fa:	7d 83       	std	Y+5, r23	; 0x05
    43fc:	8e 83       	std	Y+6, r24	; 0x06
    43fe:	9f 83       	std	Y+7, r25	; 0x07
    4400:	48 87       	std	Y+8, r20	; 0x08
	u16 L_u16AfterDigit = 1 ;
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	9b 83       	std	Y+3, r25	; 0x03
    4408:	8a 83       	std	Y+2, r24	; 0x02
	u8  L_u8Iterator = 0 ;
    440a:	19 82       	std	Y+1, r1	; 0x01
	/** display integer part */
    HLCD_voidDispIntNum ((u32)A_f32Number) ;
    440c:	6c 81       	ldd	r22, Y+4	; 0x04
    440e:	7d 81       	ldd	r23, Y+5	; 0x05
    4410:	8e 81       	ldd	r24, Y+6	; 0x06
    4412:	9f 81       	ldd	r25, Y+7	; 0x07
    4414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	bc 01       	movw	r22, r24
    441e:	cd 01       	movw	r24, r26
    4420:	0e 94 9e 21 	call	0x433c	; 0x433c <HLCD_voidDispIntNum>

	/** display dot */
	HLCD_voidSendData   (',') ;
    4424:	8c e2       	ldi	r24, 0x2C	; 44
    4426:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <HLCD_voidSendData>

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    442a:	19 82       	std	Y+1, r1	; 0x01
    442c:	11 c0       	rjmp	.+34     	; 0x4450 <HLCD_voidDispFloatNum+0x74>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
    442e:	8a 81       	ldd	r24, Y+2	; 0x02
    4430:	9b 81       	ldd	r25, Y+3	; 0x03
    4432:	9c 01       	movw	r18, r24
    4434:	22 0f       	add	r18, r18
    4436:	33 1f       	adc	r19, r19
    4438:	c9 01       	movw	r24, r18
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	88 0f       	add	r24, r24
    4440:	99 1f       	adc	r25, r25
    4442:	82 0f       	add	r24, r18
    4444:	93 1f       	adc	r25, r19
    4446:	9b 83       	std	Y+3, r25	; 0x03
    4448:	8a 83       	std	Y+2, r24	; 0x02
    HLCD_voidDispIntNum ((u32)A_f32Number) ;

	/** display dot */
	HLCD_voidSendData   (',') ;

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    444a:	89 81       	ldd	r24, Y+1	; 0x01
    444c:	8f 5f       	subi	r24, 0xFF	; 255
    444e:	89 83       	std	Y+1, r24	; 0x01
    4450:	99 81       	ldd	r25, Y+1	; 0x01
    4452:	88 85       	ldd	r24, Y+8	; 0x08
    4454:	98 17       	cp	r25, r24
    4456:	58 f3       	brcs	.-42     	; 0x442e <HLCD_voidDispFloatNum+0x52>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
	}

	/** display fraction part */
	HLCD_voidDispIntNum ((A_f32Number - (u32) A_f32Number) * L_u16AfterDigit) ;
    4458:	6c 81       	ldd	r22, Y+4	; 0x04
    445a:	7d 81       	ldd	r23, Y+5	; 0x05
    445c:	8e 81       	ldd	r24, Y+6	; 0x06
    445e:	9f 81       	ldd	r25, Y+7	; 0x07
    4460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4464:	dc 01       	movw	r26, r24
    4466:	cb 01       	movw	r24, r22
    4468:	bc 01       	movw	r22, r24
    446a:	cd 01       	movw	r24, r26
    446c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    4470:	9b 01       	movw	r18, r22
    4472:	ac 01       	movw	r20, r24
    4474:	6c 81       	ldd	r22, Y+4	; 0x04
    4476:	7d 81       	ldd	r23, Y+5	; 0x05
    4478:	8e 81       	ldd	r24, Y+6	; 0x06
    447a:	9f 81       	ldd	r25, Y+7	; 0x07
    447c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	7c 01       	movw	r14, r24
    4486:	8d 01       	movw	r16, r26
    4488:	8a 81       	ldd	r24, Y+2	; 0x02
    448a:	9b 81       	ldd	r25, Y+3	; 0x03
    448c:	cc 01       	movw	r24, r24
    448e:	a0 e0       	ldi	r26, 0x00	; 0
    4490:	b0 e0       	ldi	r27, 0x00	; 0
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    449a:	9b 01       	movw	r18, r22
    449c:	ac 01       	movw	r20, r24
    449e:	c8 01       	movw	r24, r16
    44a0:	b7 01       	movw	r22, r14
    44a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	0e 94 9e 21 	call	0x433c	; 0x433c <HLCD_voidDispIntNum>
}
    44be:	28 96       	adiw	r28, 0x08	; 8
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	cf 91       	pop	r28
    44cc:	df 91       	pop	r29
    44ce:	1f 91       	pop	r17
    44d0:	0f 91       	pop	r16
    44d2:	ff 90       	pop	r15
    44d4:	ef 90       	pop	r14
    44d6:	08 95       	ret

000044d8 <HLCD_voidMovCursor>:

void HLCD_voidMovCursor(u8 A_u8RowId, u8 A_u8ColId)
{
    44d8:	df 93       	push	r29
    44da:	cf 93       	push	r28
    44dc:	00 d0       	rcall	.+0      	; 0x44de <HLCD_voidMovCursor+0x6>
    44de:	0f 92       	push	r0
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
    44e4:	8a 83       	std	Y+2, r24	; 0x02
    44e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDRAMAddress ;
	
	/**if the row and col are out of range 
	         *** Do nothing
	  */
	if (A_u8RowId >= MIN_NUM_OF_ROW && A_u8RowId <= MAX_NUM_OF_ROW &&
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	88 23       	and	r24, r24
    44ec:	c9 f0       	breq	.+50     	; 0x4520 <HLCD_voidMovCursor+0x48>
    44ee:	8a 81       	ldd	r24, Y+2	; 0x02
    44f0:	83 30       	cpi	r24, 0x03	; 3
    44f2:	b0 f4       	brcc	.+44     	; 0x4520 <HLCD_voidMovCursor+0x48>
    44f4:	8b 81       	ldd	r24, Y+3	; 0x03
    44f6:	88 23       	and	r24, r24
    44f8:	99 f0       	breq	.+38     	; 0x4520 <HLCD_voidMovCursor+0x48>
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	81 31       	cpi	r24, 0x11	; 17
    44fe:	80 f4       	brcc	.+32     	; 0x4520 <HLCD_voidMovCursor+0x48>
	A_u8ColId >= MIN_NUM_OF_COL && A_u8ColId <= MAX_NUM_OF_COL)
	{
		/**for first row*/
		if (A_u8RowId == LCD_ROW1)
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	81 30       	cpi	r24, 0x01	; 1
    4504:	21 f4       	brne	.+8      	; 0x450e <HLCD_voidMovCursor+0x36>
		{
			L_u8DDRAMAddress = FIRST_ROW_ADDRESS + A_u8ColId - 1 ;
    4506:	8b 81       	ldd	r24, Y+3	; 0x03
    4508:	81 58       	subi	r24, 0x81	; 129
    450a:	89 83       	std	Y+1, r24	; 0x01
    450c:	06 c0       	rjmp	.+12     	; 0x451a <HLCD_voidMovCursor+0x42>
		}
		
		/**for second row*/
		else if (A_u8RowId == LCD_ROW2)
    450e:	8a 81       	ldd	r24, Y+2	; 0x02
    4510:	82 30       	cpi	r24, 0x02	; 2
    4512:	19 f4       	brne	.+6      	; 0x451a <HLCD_voidMovCursor+0x42>
		{
			L_u8DDRAMAddress = SECOND_ROW_ADDRESS + A_u8ColId - 1 ;
    4514:	8b 81       	ldd	r24, Y+3	; 0x03
    4516:	81 54       	subi	r24, 0x41	; 65
    4518:	89 83       	std	Y+1, r24	; 0x01
		}
		
		/**set DDRAM address*/
		HLCD_voidSendCmd (L_u8DDRAMAddress) ;
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
	}
	else
	{
		/** DO Nothing */
	}
}
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <HLCD_voidClrScreen>:

void HLCD_voidClrScreen (void)
{
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
    4534:	81 e0       	ldi	r24, 0x01	; 1
    4536:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
}
    453a:	cf 91       	pop	r28
    453c:	df 91       	pop	r29
    453e:	08 95       	ret

00004540 <HLCD_voidShiftDisplayRight>:

void HLCD_voidShiftDisplayRight(void)
{
    4540:	df 93       	push	r29
    4542:	cf 93       	push	r28
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
	/**shift display to right*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_RIGHT) ;
    4548:	8c e1       	ldi	r24, 0x1C	; 28
    454a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
}
    454e:	cf 91       	pop	r28
    4550:	df 91       	pop	r29
    4552:	08 95       	ret

00004554 <HLCD_voidShiftDisplayLeft>:

void HLCD_voidShiftDisplayLeft(void)
{
    4554:	df 93       	push	r29
    4556:	cf 93       	push	r28
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
	/**shift display to left*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_LEFT) ;
    455c:	88 e1       	ldi	r24, 0x18	; 24
    455e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
}
    4562:	cf 91       	pop	r28
    4564:	df 91       	pop	r29
    4566:	08 95       	ret

00004568 <HLCD_voidDispSpecialChar>:

void HLCD_voidDispSpecialChar(u8 * A_u8Array, u8 A_u8Block, u8 A_u8RowId, u8 A_u8ColId)
{
    4568:	df 93       	push	r29
    456a:	cf 93       	push	r28
    456c:	00 d0       	rcall	.+0      	; 0x456e <HLCD_voidDispSpecialChar+0x6>
    456e:	00 d0       	rcall	.+0      	; 0x4570 <HLCD_voidDispSpecialChar+0x8>
    4570:	00 d0       	rcall	.+0      	; 0x4572 <HLCD_voidDispSpecialChar+0xa>
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	9b 83       	std	Y+3, r25	; 0x03
    4578:	8a 83       	std	Y+2, r24	; 0x02
    457a:	6c 83       	std	Y+4, r22	; 0x04
    457c:	4d 83       	std	Y+5, r20	; 0x05
    457e:	2e 83       	std	Y+6, r18	; 0x06
	/**iterator for for loop*/
	u8 L_u8Iterator ;
	
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
    4580:	8c 81       	ldd	r24, Y+4	; 0x04
    4582:	88 2f       	mov	r24, r24
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	08 96       	adiw	r24, 0x08	; 8
    4588:	88 0f       	add	r24, r24
    458a:	99 1f       	adc	r25, r25
    458c:	88 0f       	add	r24, r24
    458e:	99 1f       	adc	r25, r25
    4590:	88 0f       	add	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <HLCD_voidSendCmd>
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
    4598:	19 82       	std	Y+1, r1	; 0x01
    459a:	0e c0       	rjmp	.+28     	; 0x45b8 <HLCD_voidDispSpecialChar+0x50>
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	28 2f       	mov	r18, r24
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	8a 81       	ldd	r24, Y+2	; 0x02
    45a4:	9b 81       	ldd	r25, Y+3	; 0x03
    45a6:	fc 01       	movw	r30, r24
    45a8:	e2 0f       	add	r30, r18
    45aa:	f3 1f       	adc	r31, r19
    45ac:	80 81       	ld	r24, Z
    45ae:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <HLCD_voidSendData>
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
    45b2:	89 81       	ldd	r24, Y+1	; 0x01
    45b4:	8f 5f       	subi	r24, 0xFF	; 255
    45b6:	89 83       	std	Y+1, r24	; 0x01
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	88 30       	cpi	r24, 0x08	; 8
    45bc:	78 f3       	brcs	.-34     	; 0x459c <HLCD_voidDispSpecialChar+0x34>
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
		 }
    
	/* Move the cursor to required position */
	HLCD_voidMovCursor (A_u8RowId , A_u8ColId) ;
    45be:	8d 81       	ldd	r24, Y+5	; 0x05
    45c0:	6e 81       	ldd	r22, Y+6	; 0x06
    45c2:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <HLCD_voidMovCursor>
	
	/* Set the block to be displayed */
	HLCD_voidSendData (A_u8Block) ;
    45c6:	8c 81       	ldd	r24, Y+4	; 0x04
    45c8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <HLCD_voidSendData>
}
    45cc:	26 96       	adiw	r28, 0x06	; 6
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	cf 91       	pop	r28
    45da:	df 91       	pop	r29
    45dc:	08 95       	ret

000045de <HKP_voidKpInt>:
#include "KP_int.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void HKP_voidKpInt (void) 
{
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
	/* Set Columns as Output & High */
#if   COL_START == DIO_PIN0 && ROW_START == DIO_PIN4
	/** first four pins of port are output
	          second four pins of port are input */   
	MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	6f e0       	ldi	r22, 0x0F	; 15
    45ea:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidSetPortDir>

	/** Set Rows as Inputs & Pulled up */
#if   COL_START == DIO_PIN0 && ROW_START == DIO_PIN4
	/** first four pins of port are output
	          second four pins of port are input */
	MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	6f e0       	ldi	r22, 0x0F	; 15
    45f2:	0e 94 69 14 	call	0x28d2	; 0x28d2 <MDIO_voidSetPortDir>

	/** first four pins of port are high
	          and  active internal pull-up for second four pins of port */
	MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	6f ef       	ldi	r22, 0xFF	; 255
    45fa:	0e 94 27 14 	call	0x284e	; 0x284e <MDIO_voidSetPortVal>
		      and first four pins of port are high */
	MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
#else
#error "Select right connections of Column start and Row start"
#endif
}
    45fe:	cf 91       	pop	r28
    4600:	df 91       	pop	r29
    4602:	08 95       	ret

00004604 <HKP_u8GetPressedKey>:

u8 HKP_u8GetPressedKey (void)
{
    4604:	df 93       	push	r29
    4606:	cf 93       	push	r28
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
    460c:	63 97       	sbiw	r28, 0x13	; 19
    460e:	0f b6       	in	r0, 0x3f	; 63
    4610:	f8 94       	cli
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Column ;
	u8 L_u8Row    ;
	u8 L_u8PinVal ;
	u8 L_GetAnyPressed = 0; 			// NEW FOR CALCULATOR -- stuck until you get a press
    4618:	18 8a       	std	Y+16, r1	; 0x10
	u8 L_u8PressedKey = NOT_PRESSED;	// the pressed value
    461a:	8f ef       	ldi	r24, 0xFF	; 255
    461c:	8f 87       	std	Y+15, r24	; 0x0f
    461e:	b3 c0       	rjmp	.+358    	; 0x4786 <HKP_u8GetPressedKey+0x182>

	while(!L_GetAnyPressed)		// NEW FOR CALCULATOR -- stuck until you get a press
	{
		/**external loop to active current column that be checked */
		for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
    4620:	1b 8a       	std	Y+19, r1	; 0x13
    4622:	ad c0       	rjmp	.+346    	; 0x477e <HKP_u8GetPressedKey+0x17a>
		{
			/**active current column by make it output low */
			MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	6b 89       	ldd	r22, Y+19	; 0x13
    4628:	0e 94 ed 14 	call	0x29da	; 0x29da <MDIO_voidClrPinVal>

			/**internal loop to loop to each row
    			   and check pressed key that common current row and current column */
			for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
    462c:	84 e0       	ldi	r24, 0x04	; 4
    462e:	8a 8b       	std	Y+18, r24	; 0x12
    4630:	9b c0       	rjmp	.+310    	; 0x4768 <HKP_u8GetPressedKey+0x164>
			{

				/** read value of key that common current row and current column */
				L_u8PinVal = MDIO_u8GetPinVal (KP_PORT , L_u8Row) ;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	6a 89       	ldd	r22, Y+18	; 0x12
    4636:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    463a:	89 8b       	std	Y+17, r24	; 0x11

				/** if key is pressed ====> (MDIO_u8GetPinVal == 0) */
				if (L_u8PinVal == PRESSED)
    463c:	89 89       	ldd	r24, Y+17	; 0x11
    463e:	88 23       	and	r24, r24
    4640:	09 f0       	breq	.+2      	; 0x4644 <HKP_u8GetPressedKey+0x40>
    4642:	8f c0       	rjmp	.+286    	; 0x4762 <HKP_u8GetPressedKey+0x15e>
				{
					L_GetAnyPressed = 1; 	// NEW FOR CALCULATOR
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	88 8b       	std	Y+16, r24	; 0x10

					/**get the value of the pressed key*/
					L_u8PressedKey = G_u8SwitchVal [L_u8Column - COL_START][L_u8Row - ROW_START] ;
    4648:	8b 89       	ldd	r24, Y+19	; 0x13
    464a:	48 2f       	mov	r20, r24
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	8a 89       	ldd	r24, Y+18	; 0x12
    4650:	88 2f       	mov	r24, r24
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	9c 01       	movw	r18, r24
    4656:	24 50       	subi	r18, 0x04	; 4
    4658:	30 40       	sbci	r19, 0x00	; 0
    465a:	ca 01       	movw	r24, r20
    465c:	88 0f       	add	r24, r24
    465e:	99 1f       	adc	r25, r25
    4660:	88 0f       	add	r24, r24
    4662:	99 1f       	adc	r25, r25
    4664:	82 0f       	add	r24, r18
    4666:	93 1f       	adc	r25, r19
    4668:	fc 01       	movw	r30, r24
    466a:	ed 56       	subi	r30, 0x6D	; 109
    466c:	fe 4f       	sbci	r31, 0xFE	; 254
    466e:	80 81       	ld	r24, Z
    4670:	8f 87       	std	Y+15, r24	; 0x0f

					/**wait until leave the button */
					/* this While to return the last pressed button
					 *  (may be other is pressed while first pressing) */
					while (MDIO_u8GetPinVal (KP_PORT , L_u8Row) == PRESSED) ;
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	6a 89       	ldd	r22, Y+18	; 0x12
    4676:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <MDIO_u8GetPinVal>
    467a:	88 23       	and	r24, r24
    467c:	d1 f3       	breq	.-12     	; 0x4672 <HKP_u8GetPressedKey+0x6e>
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	a0 ea       	ldi	r26, 0xA0	; 160
    4684:	b1 e4       	ldi	r27, 0x41	; 65
    4686:	8b 87       	std	Y+11, r24	; 0x0b
    4688:	9c 87       	std	Y+12, r25	; 0x0c
    468a:	ad 87       	std	Y+13, r26	; 0x0d
    468c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4690:	7c 85       	ldd	r23, Y+12	; 0x0c
    4692:	8d 85       	ldd	r24, Y+13	; 0x0d
    4694:	9e 85       	ldd	r25, Y+14	; 0x0e
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	4a ef       	ldi	r20, 0xFA	; 250
    469c:	54 e4       	ldi	r21, 0x44	; 68
    469e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	8f 83       	std	Y+7, r24	; 0x07
    46a8:	98 87       	std	Y+8, r25	; 0x08
    46aa:	a9 87       	std	Y+9, r26	; 0x09
    46ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46ae:	6f 81       	ldd	r22, Y+7	; 0x07
    46b0:	78 85       	ldd	r23, Y+8	; 0x08
    46b2:	89 85       	ldd	r24, Y+9	; 0x09
    46b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e8       	ldi	r20, 0x80	; 128
    46bc:	5f e3       	ldi	r21, 0x3F	; 63
    46be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46c2:	88 23       	and	r24, r24
    46c4:	2c f4       	brge	.+10     	; 0x46d0 <HKP_u8GetPressedKey+0xcc>
		__ticks = 1;
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	9e 83       	std	Y+6, r25	; 0x06
    46cc:	8d 83       	std	Y+5, r24	; 0x05
    46ce:	3f c0       	rjmp	.+126    	; 0x474e <HKP_u8GetPressedKey+0x14a>
	else if (__tmp > 65535)
    46d0:	6f 81       	ldd	r22, Y+7	; 0x07
    46d2:	78 85       	ldd	r23, Y+8	; 0x08
    46d4:	89 85       	ldd	r24, Y+9	; 0x09
    46d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	3f ef       	ldi	r19, 0xFF	; 255
    46dc:	4f e7       	ldi	r20, 0x7F	; 127
    46de:	57 e4       	ldi	r21, 0x47	; 71
    46e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46e4:	18 16       	cp	r1, r24
    46e6:	4c f5       	brge	.+82     	; 0x473a <HKP_u8GetPressedKey+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    46ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 e2       	ldi	r20, 0x20	; 32
    46f6:	51 e4       	ldi	r21, 0x41	; 65
    46f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9e 83       	std	Y+6, r25	; 0x06
    470e:	8d 83       	std	Y+5, r24	; 0x05
    4710:	0f c0       	rjmp	.+30     	; 0x4730 <HKP_u8GetPressedKey+0x12c>
    4712:	88 ec       	ldi	r24, 0xC8	; 200
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	9c 83       	std	Y+4, r25	; 0x04
    4718:	8b 83       	std	Y+3, r24	; 0x03
    471a:	8b 81       	ldd	r24, Y+3	; 0x03
    471c:	9c 81       	ldd	r25, Y+4	; 0x04
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <HKP_u8GetPressedKey+0x11a>
    4722:	9c 83       	std	Y+4, r25	; 0x04
    4724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4726:	8d 81       	ldd	r24, Y+5	; 0x05
    4728:	9e 81       	ldd	r25, Y+6	; 0x06
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	9e 83       	std	Y+6, r25	; 0x06
    472e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4730:	8d 81       	ldd	r24, Y+5	; 0x05
    4732:	9e 81       	ldd	r25, Y+6	; 0x06
    4734:	00 97       	sbiw	r24, 0x00	; 0
    4736:	69 f7       	brne	.-38     	; 0x4712 <HKP_u8GetPressedKey+0x10e>
    4738:	14 c0       	rjmp	.+40     	; 0x4762 <HKP_u8GetPressedKey+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473a:	6f 81       	ldd	r22, Y+7	; 0x07
    473c:	78 85       	ldd	r23, Y+8	; 0x08
    473e:	89 85       	ldd	r24, Y+9	; 0x09
    4740:	9a 85       	ldd	r25, Y+10	; 0x0a
    4742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	9e 83       	std	Y+6, r25	; 0x06
    474c:	8d 83       	std	Y+5, r24	; 0x05
    474e:	8d 81       	ldd	r24, Y+5	; 0x05
    4750:	9e 81       	ldd	r25, Y+6	; 0x06
    4752:	9a 83       	std	Y+2, r25	; 0x02
    4754:	89 83       	std	Y+1, r24	; 0x01
    4756:	89 81       	ldd	r24, Y+1	; 0x01
    4758:	9a 81       	ldd	r25, Y+2	; 0x02
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	f1 f7       	brne	.-4      	; 0x475a <HKP_u8GetPressedKey+0x156>
    475e:	9a 83       	std	Y+2, r25	; 0x02
    4760:	89 83       	std	Y+1, r24	; 0x01
			/**active current column by make it output low */
			MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;

			/**internal loop to loop to each row
    			   and check pressed key that common current row and current column */
			for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
    4762:	8a 89       	ldd	r24, Y+18	; 0x12
    4764:	8f 5f       	subi	r24, 0xFF	; 255
    4766:	8a 8b       	std	Y+18, r24	; 0x12
    4768:	8a 89       	ldd	r24, Y+18	; 0x12
    476a:	88 30       	cpi	r24, 0x08	; 8
    476c:	08 f4       	brcc	.+2      	; 0x4770 <HKP_u8GetPressedKey+0x16c>
    476e:	61 cf       	rjmp	.-318    	; 0x4632 <HKP_u8GetPressedKey+0x2e>
					_delay_ms (DELAY_FOR_DRBOUNCING) ;
				}
			}

			/**deactivate current column by make it output low */
			MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	6b 89       	ldd	r22, Y+19	; 0x13
    4774:	0e 94 fe 12 	call	0x25fc	; 0x25fc <MDIO_voidSetPinVal>
	u8 L_u8PressedKey = NOT_PRESSED;	// the pressed value

	while(!L_GetAnyPressed)		// NEW FOR CALCULATOR -- stuck until you get a press
	{
		/**external loop to active current column that be checked */
		for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
    4778:	8b 89       	ldd	r24, Y+19	; 0x13
    477a:	8f 5f       	subi	r24, 0xFF	; 255
    477c:	8b 8b       	std	Y+19, r24	; 0x13
    477e:	8b 89       	ldd	r24, Y+19	; 0x13
    4780:	84 30       	cpi	r24, 0x04	; 4
    4782:	08 f4       	brcc	.+2      	; 0x4786 <HKP_u8GetPressedKey+0x182>
    4784:	4f cf       	rjmp	.-354    	; 0x4624 <HKP_u8GetPressedKey+0x20>
	u8 L_u8Row    ;
	u8 L_u8PinVal ;
	u8 L_GetAnyPressed = 0; 			// NEW FOR CALCULATOR -- stuck until you get a press
	u8 L_u8PressedKey = NOT_PRESSED;	// the pressed value

	while(!L_GetAnyPressed)		// NEW FOR CALCULATOR -- stuck until you get a press
    4786:	88 89       	ldd	r24, Y+16	; 0x10
    4788:	88 23       	and	r24, r24
    478a:	09 f4       	brne	.+2      	; 0x478e <HKP_u8GetPressedKey+0x18a>
    478c:	49 cf       	rjmp	.-366    	; 0x4620 <HKP_u8GetPressedKey+0x1c>

			/**deactivate current column by make it output low */
			MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
		}
	}
	return L_u8PressedKey ;
    478e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4790:	63 96       	adiw	r28, 0x13	; 19
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	08 95       	ret

000047a2 <main>:

volatile extern char PASS[];
u16 TIMER0_OVF_COUNT = 0;

int main()
{
    47a2:	0f 93       	push	r16
    47a4:	1f 93       	push	r17
    47a6:	df 93       	push	r29
    47a8:	cf 93       	push	r28
    47aa:	cd b7       	in	r28, 0x3d	; 61
    47ac:	de b7       	in	r29, 0x3e	; 62
    47ae:	a1 97       	sbiw	r28, 0x21	; 33
    47b0:	0f b6       	in	r0, 0x3f	; 63
    47b2:	f8 94       	cli
    47b4:	de bf       	out	0x3e, r29	; 62
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	cd bf       	out	0x3d, r28	; 61
	u8 Password[] = PASSWORD;
    47ba:	ce 01       	movw	r24, r28
    47bc:	43 96       	adiw	r24, 0x13	; 19
    47be:	9e 8f       	std	Y+30, r25	; 0x1e
    47c0:	8d 8f       	std	Y+29, r24	; 0x1d
    47c2:	ee e6       	ldi	r30, 0x6E	; 110
    47c4:	f0 e0       	ldi	r31, 0x00	; 0
    47c6:	f8 a3       	std	Y+32, r31	; 0x20
    47c8:	ef 8f       	std	Y+31, r30	; 0x1f
    47ca:	f5 e0       	ldi	r31, 0x05	; 5
    47cc:	f9 a3       	std	Y+33, r31	; 0x21
    47ce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    47d0:	f8 a1       	ldd	r31, Y+32	; 0x20
    47d2:	00 80       	ld	r0, Z
    47d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    47d6:	98 a1       	ldd	r25, Y+32	; 0x20
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	98 a3       	std	Y+32, r25	; 0x20
    47dc:	8f 8f       	std	Y+31, r24	; 0x1f
    47de:	ed 8d       	ldd	r30, Y+29	; 0x1d
    47e0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    47e2:	00 82       	st	Z, r0
    47e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47e8:	01 96       	adiw	r24, 0x01	; 1
    47ea:	9e 8f       	std	Y+30, r25	; 0x1e
    47ec:	8d 8f       	std	Y+29, r24	; 0x1d
    47ee:	99 a1       	ldd	r25, Y+33	; 0x21
    47f0:	91 50       	subi	r25, 0x01	; 1
    47f2:	99 a3       	std	Y+33, r25	; 0x21
    47f4:	e9 a1       	ldd	r30, Y+33	; 0x21
    47f6:	ee 23       	and	r30, r30
    47f8:	51 f7       	brne	.-44     	; 0x47ce <main+0x2c>
	u8 PassInput[5];
	u8 Pass_count = 0;
    47fa:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Char_pressed;
	u8 Check_flag = 1; /* assume matching */
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	88 8b       	std	Y+16, r24	; 0x10

	TWI_INIT();
    4800:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <TWI_INIT>
	HLCD_voidInit();
    4804:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <HLCD_voidInit>
	HKP_voidKpInt();
    4808:	0e 94 ef 22 	call	0x45de	; 0x45de <HKP_voidKpInt>
	UART_INIT(MY_UBRR);	/* BAUD = 9600 */
    480c:	83 e3       	ldi	r24, 0x33	; 51
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 47 07 	call	0xe8e	; 0xe8e <UART_INIT>



	/* Write PASS on EEPROM -- should be written before (for real : HW) */
	/* TWI-EEPROM (Send data to EEPROM) */
	WRITE_EEPROM(0x00,PASSWORD);
    4814:	2e e6       	ldi	r18, 0x6E	; 110
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	b9 01       	movw	r22, r18
    481c:	0e 94 41 10 	call	0x2082	; 0x2082 <WRITE_EEPROM>

	/* Get data written on EEPROM to MCU as Rx and ASSIGN it in array (PASS) */
	READ_EEPROM(0x00,PASS);
    4820:	2e e8       	ldi	r18, 0x8E	; 142
    4822:	31 e0       	ldi	r19, 0x01	; 1
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	b9 01       	movw	r22, r18
    4828:	0e 94 05 10 	call	0x200a	; 0x200a <READ_EEPROM>
	while (1)
	{

		/* Using Keypad to get PASS_INPUT and assign it to another array */
		do {
			Char_pressed = HKP_u8GetPressedKey();
    482c:	0e 94 02 23 	call	0x4604	; 0x4604 <HKP_u8GetPressedKey>
    4830:	89 8b       	std	Y+17, r24	; 0x11
			if (Char_pressed != '=')
    4832:	89 89       	ldd	r24, Y+17	; 0x11
    4834:	8d 33       	cpi	r24, 0x3D	; 61
    4836:	69 f0       	breq	.+26     	; 0x4852 <main+0xb0>
			{
				/* Get characters entered into PassInput */
				PassInput[Pass_count] =Char_pressed;
    4838:	8a 89       	ldd	r24, Y+18	; 0x12
    483a:	28 2f       	mov	r18, r24
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	ce 01       	movw	r24, r28
    4840:	48 96       	adiw	r24, 0x18	; 24
    4842:	fc 01       	movw	r30, r24
    4844:	e2 0f       	add	r30, r18
    4846:	f3 1f       	adc	r31, r19
    4848:	89 89       	ldd	r24, Y+17	; 0x11
    484a:	80 83       	st	Z, r24
				HLCD_voidSendData(Char_pressed);
    484c:	89 89       	ldd	r24, Y+17	; 0x11
    484e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <HLCD_voidSendData>
			}
			Pass_count++;
    4852:	8a 89       	ldd	r24, Y+18	; 0x12
    4854:	8f 5f       	subi	r24, 0xFF	; 255
    4856:	8a 8b       	std	Y+18, r24	; 0x12
		}while(Char_pressed != '=');	/* YOU ! */
    4858:	89 89       	ldd	r24, Y+17	; 0x11
    485a:	8d 33       	cpi	r24, 0x3D	; 61
    485c:	39 f7       	brne	.-50     	; 0x482c <main+0x8a>
		Pass_count = 0; /* reset it to be PassInput[0] */
    485e:	1a 8a       	std	Y+18, r1	; 0x12

		HLCD_voidClrScreen();
    4860:	0e 94 96 22 	call	0x452c	; 0x452c <HLCD_voidClrScreen>


		/* Check PASS_INPUT using for-loop -- if correct, give a flag some value */
		if (strlen(PassInput) > strlen(Password))	/* may be it's (1234 + ... ) */
    4864:	ce 01       	movw	r24, r28
    4866:	48 96       	adiw	r24, 0x18	; 24
    4868:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <strlen>
    486c:	8c 01       	movw	r16, r24
    486e:	ce 01       	movw	r24, r28
    4870:	43 96       	adiw	r24, 0x13	; 19
    4872:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <strlen>
    4876:	80 17       	cp	r24, r16
    4878:	91 07       	cpc	r25, r17
    487a:	10 f4       	brcc	.+4      	; 0x4880 <main+0xde>
			Check_flag = 0;			/* wrong Password */
    487c:	18 8a       	std	Y+16, r1	; 0x10
    487e:	32 c0       	rjmp	.+100    	; 0x48e4 <main+0x142>
		else {
			for(u8 count = 0; count<strlen(Password); count++)
    4880:	1f 86       	std	Y+15, r1	; 0x0f
    4882:	19 c0       	rjmp	.+50     	; 0x48b6 <main+0x114>
			{
				if(PassInput[count]!=Password[count])
    4884:	8f 85       	ldd	r24, Y+15	; 0x0f
    4886:	28 2f       	mov	r18, r24
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	ce 01       	movw	r24, r28
    488c:	48 96       	adiw	r24, 0x18	; 24
    488e:	fc 01       	movw	r30, r24
    4890:	e2 0f       	add	r30, r18
    4892:	f3 1f       	adc	r31, r19
    4894:	40 81       	ld	r20, Z
    4896:	8f 85       	ldd	r24, Y+15	; 0x0f
    4898:	28 2f       	mov	r18, r24
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	ce 01       	movw	r24, r28
    489e:	43 96       	adiw	r24, 0x13	; 19
    48a0:	fc 01       	movw	r30, r24
    48a2:	e2 0f       	add	r30, r18
    48a4:	f3 1f       	adc	r31, r19
    48a6:	80 81       	ld	r24, Z
    48a8:	48 17       	cp	r20, r24
    48aa:	11 f0       	breq	.+4      	; 0x48b0 <main+0x10e>
				{
					/* if any character mismatches, it's wrong */
					Check_flag = 0;
    48ac:	18 8a       	std	Y+16, r1	; 0x10
    48ae:	1a c0       	rjmp	.+52     	; 0x48e4 <main+0x142>

		/* Check PASS_INPUT using for-loop -- if correct, give a flag some value */
		if (strlen(PassInput) > strlen(Password))	/* may be it's (1234 + ... ) */
			Check_flag = 0;			/* wrong Password */
		else {
			for(u8 count = 0; count<strlen(Password); count++)
    48b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    48b2:	8f 5f       	subi	r24, 0xFF	; 255
    48b4:	8f 87       	std	Y+15, r24	; 0x0f
    48b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    48b8:	08 2f       	mov	r16, r24
    48ba:	10 e0       	ldi	r17, 0x00	; 0
    48bc:	ce 01       	movw	r24, r28
    48be:	43 96       	adiw	r24, 0x13	; 19
    48c0:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <strlen>
    48c4:	08 17       	cp	r16, r24
    48c6:	19 07       	cpc	r17, r25
    48c8:	e8 f2       	brcs	.-70     	; 0x4884 <main+0xe2>
    48ca:	0c c0       	rjmp	.+24     	; 0x48e4 <main+0x142>
		}

		/* Reset INPUT array with 0s -- as may be it's 3533 + ... and other situations */
		while(PassInput[Pass_count] != '\0')
		{
			PassInput[Pass_count] = '\0';
    48cc:	8a 89       	ldd	r24, Y+18	; 0x12
    48ce:	28 2f       	mov	r18, r24
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	ce 01       	movw	r24, r28
    48d4:	48 96       	adiw	r24, 0x18	; 24
    48d6:	fc 01       	movw	r30, r24
    48d8:	e2 0f       	add	r30, r18
    48da:	f3 1f       	adc	r31, r19
    48dc:	10 82       	st	Z, r1
			Pass_count++;
    48de:	8a 89       	ldd	r24, Y+18	; 0x12
    48e0:	8f 5f       	subi	r24, 0xFF	; 255
    48e2:	8a 8b       	std	Y+18, r24	; 0x12

			}
		}

		/* Reset INPUT array with 0s -- as may be it's 3533 + ... and other situations */
		while(PassInput[Pass_count] != '\0')
    48e4:	8a 89       	ldd	r24, Y+18	; 0x12
    48e6:	28 2f       	mov	r18, r24
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	ce 01       	movw	r24, r28
    48ec:	48 96       	adiw	r24, 0x18	; 24
    48ee:	fc 01       	movw	r30, r24
    48f0:	e2 0f       	add	r30, r18
    48f2:	f3 1f       	adc	r31, r19
    48f4:	80 81       	ld	r24, Z
    48f6:	88 23       	and	r24, r24
    48f8:	49 f7       	brne	.-46     	; 0x48cc <main+0x12a>
		{
			PassInput[Pass_count] = '\0';
			Pass_count++;
		}
		Pass_count = 0;		/* reset it for next enter PassInput[0] */
    48fa:	1a 8a       	std	Y+18, r1	; 0x12




		/* if doesn't match : red lamp for 700 ms using TIMER0_OVF */
		if(Check_flag == 0)
    48fc:	88 89       	ldd	r24, Y+16	; 0x10
    48fe:	88 23       	and	r24, r24
    4900:	31 f5       	brne	.+76     	; 0x494e <main+0x1ac>
		{
			Check_flag = 1; /* reset it*/
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	88 8b       	std	Y+16, r24	; 0x10
			DDRC |= (1<<FAILLED_LED);
    4906:	a4 e3       	ldi	r26, 0x34	; 52
    4908:	b0 e0       	ldi	r27, 0x00	; 0
    490a:	e4 e3       	ldi	r30, 0x34	; 52
    490c:	f0 e0       	ldi	r31, 0x00	; 0
    490e:	80 81       	ld	r24, Z
    4910:	80 61       	ori	r24, 0x10	; 16
    4912:	8c 93       	st	X, r24
			PORTC |= (1<<FAILLED_LED);
    4914:	a5 e3       	ldi	r26, 0x35	; 53
    4916:	b0 e0       	ldi	r27, 0x00	; 0
    4918:	e5 e3       	ldi	r30, 0x35	; 53
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	80 81       	ld	r24, Z
    491e:	80 61       	ori	r24, 0x10	; 16
    4920:	8c 93       	st	X, r24

			/* TIMER0 starts counting */
			Timer0Init();
    4922:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <Timer0Init>

			while(TIMER0_OVF_COUNT < TIMER0_OVF_COUNTS_700ms);
    4926:	80 91 0f 02 	lds	r24, 0x020F
    492a:	90 91 10 02 	lds	r25, 0x0210
    492e:	fa e0       	ldi	r31, 0x0A	; 10
    4930:	89 3b       	cpi	r24, 0xB9	; 185
    4932:	9f 07       	cpc	r25, r31
    4934:	c0 f3       	brcs	.-16     	; 0x4926 <main+0x184>
			TIMER0_OVF_COUNT = 0; 	// RESET
    4936:	10 92 10 02 	sts	0x0210, r1
    493a:	10 92 0f 02 	sts	0x020F, r1
			//_delay_ms(700);
			PORTC &= ~(1<<FAILLED_LED);
    493e:	a5 e3       	ldi	r26, 0x35	; 53
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	e5 e3       	ldi	r30, 0x35	; 53
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	80 81       	ld	r24, Z
    4948:	8f 7e       	andi	r24, 0xEF	; 239
    494a:	8c 93       	st	X, r24
    494c:	6f cf       	rjmp	.-290    	; 0x482c <main+0x8a>
		}
		else if(Check_flag == 1)
    494e:	88 89       	ldd	r24, Y+16	; 0x10
    4950:	81 30       	cpi	r24, 0x01	; 1
    4952:	09 f0       	breq	.+2      	; 0x4956 <main+0x1b4>
    4954:	6b cf       	rjmp	.-298    	; 0x482c <main+0x8a>
		{
			/* blink green led */

			DDRC |= (1<<PASS_LED);
    4956:	a4 e3       	ldi	r26, 0x34	; 52
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	e4 e3       	ldi	r30, 0x34	; 52
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	80 81       	ld	r24, Z
    4960:	88 60       	ori	r24, 0x08	; 8
    4962:	8c 93       	st	X, r24
			PORTC |= (1<<PASS_LED);
    4964:	a5 e3       	ldi	r26, 0x35	; 53
    4966:	b0 e0       	ldi	r27, 0x00	; 0
    4968:	e5 e3       	ldi	r30, 0x35	; 53
    496a:	f0 e0       	ldi	r31, 0x00	; 0
    496c:	80 81       	ld	r24, Z
    496e:	88 60       	ori	r24, 0x08	; 8
    4970:	8c 93       	st	X, r24

			/* TIMER0 starts counting */
			Timer0Init();
    4972:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <Timer0Init>

			while(TIMER0_OVF_COUNT < TIMER0_OVF_COUNTS_700ms);	/* wait for 700 */
    4976:	80 91 0f 02 	lds	r24, 0x020F
    497a:	90 91 10 02 	lds	r25, 0x0210
    497e:	2a e0       	ldi	r18, 0x0A	; 10
    4980:	89 3b       	cpi	r24, 0xB9	; 185
    4982:	92 07       	cpc	r25, r18
    4984:	c0 f3       	brcs	.-16     	; 0x4976 <main+0x1d4>
			TIMER0_OVF_COUNT = 0; 	// RESET
    4986:	10 92 10 02 	sts	0x0210, r1
    498a:	10 92 0f 02 	sts	0x020F, r1
											//_delay_ms(700);
			PORTC &= ~(1<<PASS_LED);
    498e:	a5 e3       	ldi	r26, 0x35	; 53
    4990:	b0 e0       	ldi	r27, 0x00	; 0
    4992:	e5 e3       	ldi	r30, 0x35	; 53
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	80 81       	ld	r24, Z
    4998:	87 7f       	andi	r24, 0xF7	; 247
    499a:	8c 93       	st	X, r24


			/* Turn the servo */
			TurnServo90();
    499c:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <TurnServo90>


			/* Send 'A' via UART */
			UART_TRANSMIT('A');
    49a0:	81 e4       	ldi	r24, 0x41	; 65
    49a2:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_TRANSMIT>


			HLCD_voidDispStr("    -- OPEN --    ");
    49a6:	83 e7       	ldi	r24, 0x73	; 115
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	0e 94 75 21 	call	0x42ea	; 0x42ea <HLCD_voidDispStr>
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	90 e8       	ldi	r25, 0x80	; 128
    49b2:	ab eb       	ldi	r26, 0xBB	; 187
    49b4:	b4 e4       	ldi	r27, 0x44	; 68
    49b6:	8b 87       	std	Y+11, r24	; 0x0b
    49b8:	9c 87       	std	Y+12, r25	; 0x0c
    49ba:	ad 87       	std	Y+13, r26	; 0x0d
    49bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49be:	6b 85       	ldd	r22, Y+11	; 0x0b
    49c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    49c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	4a ef       	ldi	r20, 0xFA	; 250
    49cc:	54 e4       	ldi	r21, 0x44	; 68
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	8f 83       	std	Y+7, r24	; 0x07
    49d8:	98 87       	std	Y+8, r25	; 0x08
    49da:	a9 87       	std	Y+9, r26	; 0x09
    49dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49de:	6f 81       	ldd	r22, Y+7	; 0x07
    49e0:	78 85       	ldd	r23, Y+8	; 0x08
    49e2:	89 85       	ldd	r24, Y+9	; 0x09
    49e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e8       	ldi	r20, 0x80	; 128
    49ec:	5f e3       	ldi	r21, 0x3F	; 63
    49ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    49f2:	88 23       	and	r24, r24
    49f4:	2c f4       	brge	.+10     	; 0x4a00 <main+0x25e>
		__ticks = 1;
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	9e 83       	std	Y+6, r25	; 0x06
    49fc:	8d 83       	std	Y+5, r24	; 0x05
    49fe:	3f c0       	rjmp	.+126    	; 0x4a7e <main+0x2dc>
	else if (__tmp > 65535)
    4a00:	6f 81       	ldd	r22, Y+7	; 0x07
    4a02:	78 85       	ldd	r23, Y+8	; 0x08
    4a04:	89 85       	ldd	r24, Y+9	; 0x09
    4a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	3f ef       	ldi	r19, 0xFF	; 255
    4a0c:	4f e7       	ldi	r20, 0x7F	; 127
    4a0e:	57 e4       	ldi	r21, 0x47	; 71
    4a10:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4a14:	18 16       	cp	r1, r24
    4a16:	4c f5       	brge	.+82     	; 0x4a6a <main+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	40 e2       	ldi	r20, 0x20	; 32
    4a26:	51 e4       	ldi	r21, 0x41	; 65
    4a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	bc 01       	movw	r22, r24
    4a32:	cd 01       	movw	r24, r26
    4a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	9e 83       	std	Y+6, r25	; 0x06
    4a3e:	8d 83       	std	Y+5, r24	; 0x05
    4a40:	0f c0       	rjmp	.+30     	; 0x4a60 <main+0x2be>
    4a42:	88 ec       	ldi	r24, 0xC8	; 200
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	9c 83       	std	Y+4, r25	; 0x04
    4a48:	8b 83       	std	Y+3, r24	; 0x03
    4a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <main+0x2ac>
    4a52:	9c 83       	std	Y+4, r25	; 0x04
    4a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a56:	8d 81       	ldd	r24, Y+5	; 0x05
    4a58:	9e 81       	ldd	r25, Y+6	; 0x06
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
    4a5c:	9e 83       	std	Y+6, r25	; 0x06
    4a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a60:	8d 81       	ldd	r24, Y+5	; 0x05
    4a62:	9e 81       	ldd	r25, Y+6	; 0x06
    4a64:	00 97       	sbiw	r24, 0x00	; 0
    4a66:	69 f7       	brne	.-38     	; 0x4a42 <main+0x2a0>
    4a68:	14 c0       	rjmp	.+40     	; 0x4a92 <main+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6c:	78 85       	ldd	r23, Y+8	; 0x08
    4a6e:	89 85       	ldd	r24, Y+9	; 0x09
    4a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a76:	dc 01       	movw	r26, r24
    4a78:	cb 01       	movw	r24, r22
    4a7a:	9e 83       	std	Y+6, r25	; 0x06
    4a7c:	8d 83       	std	Y+5, r24	; 0x05
    4a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a80:	9e 81       	ldd	r25, Y+6	; 0x06
    4a82:	9a 83       	std	Y+2, r25	; 0x02
    4a84:	89 83       	std	Y+1, r24	; 0x01
    4a86:	89 81       	ldd	r24, Y+1	; 0x01
    4a88:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8a:	01 97       	sbiw	r24, 0x01	; 1
    4a8c:	f1 f7       	brne	.-4      	; 0x4a8a <main+0x2e8>
    4a8e:	9a 83       	std	Y+2, r25	; 0x02
    4a90:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			HLCD_voidClrScreen();
    4a92:	0e 94 96 22 	call	0x452c	; 0x452c <HLCD_voidClrScreen>
    4a96:	ca ce       	rjmp	.-620    	; 0x482c <main+0x8a>

00004a98 <TurnServo90>:

	return 0;
}

void TurnServo90(void)
{
    4a98:	df 93       	push	r29
    4a9a:	cf 93       	push	r28
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	2e 97       	sbiw	r28, 0x0e	; 14
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
	/* TO GET HOW IT WORKS, THE NOTEBOOK OF ITI_EMBEDDED_MONTH => ARAFA_MICROYS */

	/* Select Mode 14 */
	TCCR1A |= (1<<WGM11);
    4aac:	af e4       	ldi	r26, 0x4F	; 79
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	ef e4       	ldi	r30, 0x4F	; 79
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	82 60       	ori	r24, 0x02	; 2
    4ab8:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13);
    4aba:	ae e4       	ldi	r26, 0x4E	; 78
    4abc:	b0 e0       	ldi	r27, 0x00	; 0
    4abe:	ee e4       	ldi	r30, 0x4E	; 78
    4ac0:	f0 e0       	ldi	r31, 0x00	; 0
    4ac2:	80 81       	ld	r24, Z
    4ac4:	88 61       	ori	r24, 0x18	; 24
    4ac6:	8c 93       	st	X, r24
	/* Set prescaler 8  */
	TCCR1B |= (1<<CS11);
    4ac8:	ae e4       	ldi	r26, 0x4E	; 78
    4aca:	b0 e0       	ldi	r27, 0x00	; 0
    4acc:	ee e4       	ldi	r30, 0x4E	; 78
    4ace:	f0 e0       	ldi	r31, 0x00	; 0
    4ad0:	80 81       	ld	r24, Z
    4ad2:	82 60       	ori	r24, 0x02	; 2
    4ad4:	8c 93       	st	X, r24
	/* Clear on COM for Fast PWM */
	TCCR1A |= (1<<COM1B1); 	// COM1B0 = 0
    4ad6:	af e4       	ldi	r26, 0x4F	; 79
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	ef e4       	ldi	r30, 0x4F	; 79
    4adc:	f0 e0       	ldi	r31, 0x00	; 0
    4ade:	80 81       	ld	r24, Z
    4ae0:	80 62       	ori	r24, 0x20	; 32
    4ae2:	8c 93       	st	X, r24
	 * N*(1+TOP) = f_clk / f_req
	 * We set N = 8 .. then, TOP = (8MHz / (50*8)) - 1
	 * then TOP =  19999 which is less than 65536 (so we can handle it)
	 *
	 */
	ICR1 = 19999; /* TOP VALUE OF TIMER1 => f_OCM = 50 Hz */
    4ae4:	e6 e4       	ldi	r30, 0x46	; 70
    4ae6:	f0 e0       	ldi	r31, 0x00	; 0
    4ae8:	8f e1       	ldi	r24, 0x1F	; 31
    4aea:	9e e4       	ldi	r25, 0x4E	; 78
    4aec:	91 83       	std	Z+1, r25	; 0x01
    4aee:	80 83       	st	Z, r24
	TCNT1 = 0;
    4af0:	ec e4       	ldi	r30, 0x4C	; 76
    4af2:	f0 e0       	ldi	r31, 0x00	; 0
    4af4:	11 82       	std	Z+1, r1	; 0x01
    4af6:	10 82       	st	Z, r1
	DDRD |= (1<<PD4);
    4af8:	a1 e3       	ldi	r26, 0x31	; 49
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	e1 e3       	ldi	r30, 0x31	; 49
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	80 61       	ori	r24, 0x10	; 16
    4b04:	8c 93       	st	X, r24
	/* f_timer = f_clk/8 --> 1 us for 1 tick
	 * 1.5ms -> 0 deg 	 --> 1.5ms /1us = 1500 ticks
	 * 1ms -> -90 deg	 --> 1000 ticks
	 * 2ms -> +90 deg	 --> 2000 ticks
	 */
	OCR1B = 2000;
    4b06:	e8 e4       	ldi	r30, 0x48	; 72
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	80 ed       	ldi	r24, 0xD0	; 208
    4b0c:	97 e0       	ldi	r25, 0x07	; 7
    4b0e:	91 83       	std	Z+1, r25	; 0x01
    4b10:	80 83       	st	Z, r24
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	aa e7       	ldi	r26, 0x7A	; 122
    4b18:	b4 e4       	ldi	r27, 0x44	; 68
    4b1a:	8b 87       	std	Y+11, r24	; 0x0b
    4b1c:	9c 87       	std	Y+12, r25	; 0x0c
    4b1e:	ad 87       	std	Y+13, r26	; 0x0d
    4b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	4a ef       	ldi	r20, 0xFA	; 250
    4b30:	54 e4       	ldi	r21, 0x44	; 68
    4b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	8f 83       	std	Y+7, r24	; 0x07
    4b3c:	98 87       	std	Y+8, r25	; 0x08
    4b3e:	a9 87       	std	Y+9, r26	; 0x09
    4b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b42:	6f 81       	ldd	r22, Y+7	; 0x07
    4b44:	78 85       	ldd	r23, Y+8	; 0x08
    4b46:	89 85       	ldd	r24, Y+9	; 0x09
    4b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	40 e8       	ldi	r20, 0x80	; 128
    4b50:	5f e3       	ldi	r21, 0x3F	; 63
    4b52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b56:	88 23       	and	r24, r24
    4b58:	2c f4       	brge	.+10     	; 0x4b64 <TurnServo90+0xcc>
		__ticks = 1;
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	9e 83       	std	Y+6, r25	; 0x06
    4b60:	8d 83       	std	Y+5, r24	; 0x05
    4b62:	3f c0       	rjmp	.+126    	; 0x4be2 <TurnServo90+0x14a>
	else if (__tmp > 65535)
    4b64:	6f 81       	ldd	r22, Y+7	; 0x07
    4b66:	78 85       	ldd	r23, Y+8	; 0x08
    4b68:	89 85       	ldd	r24, Y+9	; 0x09
    4b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	3f ef       	ldi	r19, 0xFF	; 255
    4b70:	4f e7       	ldi	r20, 0x7F	; 127
    4b72:	57 e4       	ldi	r21, 0x47	; 71
    4b74:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4b78:	18 16       	cp	r1, r24
    4b7a:	4c f5       	brge	.+82     	; 0x4bce <TurnServo90+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	40 e2       	ldi	r20, 0x20	; 32
    4b8a:	51 e4       	ldi	r21, 0x41	; 65
    4b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	bc 01       	movw	r22, r24
    4b96:	cd 01       	movw	r24, r26
    4b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	cb 01       	movw	r24, r22
    4ba0:	9e 83       	std	Y+6, r25	; 0x06
    4ba2:	8d 83       	std	Y+5, r24	; 0x05
    4ba4:	0f c0       	rjmp	.+30     	; 0x4bc4 <TurnServo90+0x12c>
    4ba6:	88 ec       	ldi	r24, 0xC8	; 200
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	9c 83       	std	Y+4, r25	; 0x04
    4bac:	8b 83       	std	Y+3, r24	; 0x03
    4bae:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <TurnServo90+0x11a>
    4bb6:	9c 83       	std	Y+4, r25	; 0x04
    4bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bba:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bbe:	01 97       	sbiw	r24, 0x01	; 1
    4bc0:	9e 83       	std	Y+6, r25	; 0x06
    4bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc8:	00 97       	sbiw	r24, 0x00	; 0
    4bca:	69 f7       	brne	.-38     	; 0x4ba6 <TurnServo90+0x10e>
    4bcc:	14 c0       	rjmp	.+40     	; 0x4bf6 <TurnServo90+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bce:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd0:	78 85       	ldd	r23, Y+8	; 0x08
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bda:	dc 01       	movw	r26, r24
    4bdc:	cb 01       	movw	r24, r22
    4bde:	9e 83       	std	Y+6, r25	; 0x06
    4be0:	8d 83       	std	Y+5, r24	; 0x05
    4be2:	8d 81       	ldd	r24, Y+5	; 0x05
    4be4:	9e 81       	ldd	r25, Y+6	; 0x06
    4be6:	9a 83       	std	Y+2, r25	; 0x02
    4be8:	89 83       	std	Y+1, r24	; 0x01
    4bea:	89 81       	ldd	r24, Y+1	; 0x01
    4bec:	9a 81       	ldd	r25, Y+2	; 0x02
    4bee:	01 97       	sbiw	r24, 0x01	; 1
    4bf0:	f1 f7       	brne	.-4      	; 0x4bee <TurnServo90+0x156>
    4bf2:	9a 83       	std	Y+2, r25	; 0x02
    4bf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	OCR1B = 1500;
    4bf6:	e8 e4       	ldi	r30, 0x48	; 72
    4bf8:	f0 e0       	ldi	r31, 0x00	; 0
    4bfa:	8c ed       	ldi	r24, 0xDC	; 220
    4bfc:	95 e0       	ldi	r25, 0x05	; 5
    4bfe:	91 83       	std	Z+1, r25	; 0x01
    4c00:	80 83       	st	Z, r24

}
    4c02:	2e 96       	adiw	r28, 0x0e	; 14
    4c04:	0f b6       	in	r0, 0x3f	; 63
    4c06:	f8 94       	cli
    4c08:	de bf       	out	0x3e, r29	; 62
    4c0a:	0f be       	out	0x3f, r0	; 63
    4c0c:	cd bf       	out	0x3d, r28	; 61
    4c0e:	cf 91       	pop	r28
    4c10:	df 91       	pop	r29
    4c12:	08 95       	ret

00004c14 <Timer0Init>:


void Timer0Init(void)
{
    4c14:	df 93       	push	r29
    4c16:	cf 93       	push	r28
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    4c1c:	e2 e5       	ldi	r30, 0x52	; 82
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	10 82       	st	Z, r1
	TIMER0_OVF_COUNT = 0;
    4c22:	10 92 10 02 	sts	0x0210, r1
    4c26:	10 92 0f 02 	sts	0x020F, r1
	/* Set Prescaler 8 */
	TCCR0 |= (1<<CS01);
    4c2a:	a3 e5       	ldi	r26, 0x53	; 83
    4c2c:	b0 e0       	ldi	r27, 0x00	; 0
    4c2e:	e3 e5       	ldi	r30, 0x53	; 83
    4c30:	f0 e0       	ldi	r31, 0x00	; 0
    4c32:	80 81       	ld	r24, Z
    4c34:	82 60       	ori	r24, 0x02	; 2
    4c36:	8c 93       	st	X, r24
	/* Default : NORMAL MODE */

	/* Enable the INT for TIMER0_OVF */
	TIMSK |= (1<<TOIE0);
    4c38:	a9 e5       	ldi	r26, 0x59	; 89
    4c3a:	b0 e0       	ldi	r27, 0x00	; 0
    4c3c:	e9 e5       	ldi	r30, 0x59	; 89
    4c3e:	f0 e0       	ldi	r31, 0x00	; 0
    4c40:	80 81       	ld	r24, Z
    4c42:	81 60       	ori	r24, 0x01	; 1
    4c44:	8c 93       	st	X, r24

	/* Enable Global INT */
			sei();
    4c46:	78 94       	sei
}
    4c48:	cf 91       	pop	r28
    4c4a:	df 91       	pop	r29
    4c4c:	08 95       	ret

00004c4e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    4c4e:	1f 92       	push	r1
    4c50:	0f 92       	push	r0
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	0f 92       	push	r0
    4c56:	11 24       	eor	r1, r1
    4c58:	8f 93       	push	r24
    4c5a:	9f 93       	push	r25
    4c5c:	df 93       	push	r29
    4c5e:	cf 93       	push	r28
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62

	TIMER0_OVF_COUNT++;
    4c64:	80 91 0f 02 	lds	r24, 0x020F
    4c68:	90 91 10 02 	lds	r25, 0x0210
    4c6c:	01 96       	adiw	r24, 0x01	; 1
    4c6e:	90 93 10 02 	sts	0x0210, r25
    4c72:	80 93 0f 02 	sts	0x020F, r24
}
    4c76:	cf 91       	pop	r28
    4c78:	df 91       	pop	r29
    4c7a:	9f 91       	pop	r25
    4c7c:	8f 91       	pop	r24
    4c7e:	0f 90       	pop	r0
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	0f 90       	pop	r0
    4c84:	1f 90       	pop	r1
    4c86:	18 95       	reti

00004c88 <__mulsi3>:
    4c88:	62 9f       	mul	r22, r18
    4c8a:	d0 01       	movw	r26, r0
    4c8c:	73 9f       	mul	r23, r19
    4c8e:	f0 01       	movw	r30, r0
    4c90:	82 9f       	mul	r24, r18
    4c92:	e0 0d       	add	r30, r0
    4c94:	f1 1d       	adc	r31, r1
    4c96:	64 9f       	mul	r22, r20
    4c98:	e0 0d       	add	r30, r0
    4c9a:	f1 1d       	adc	r31, r1
    4c9c:	92 9f       	mul	r25, r18
    4c9e:	f0 0d       	add	r31, r0
    4ca0:	83 9f       	mul	r24, r19
    4ca2:	f0 0d       	add	r31, r0
    4ca4:	74 9f       	mul	r23, r20
    4ca6:	f0 0d       	add	r31, r0
    4ca8:	65 9f       	mul	r22, r21
    4caa:	f0 0d       	add	r31, r0
    4cac:	99 27       	eor	r25, r25
    4cae:	72 9f       	mul	r23, r18
    4cb0:	b0 0d       	add	r27, r0
    4cb2:	e1 1d       	adc	r30, r1
    4cb4:	f9 1f       	adc	r31, r25
    4cb6:	63 9f       	mul	r22, r19
    4cb8:	b0 0d       	add	r27, r0
    4cba:	e1 1d       	adc	r30, r1
    4cbc:	f9 1f       	adc	r31, r25
    4cbe:	bd 01       	movw	r22, r26
    4cc0:	cf 01       	movw	r24, r30
    4cc2:	11 24       	eor	r1, r1
    4cc4:	08 95       	ret

00004cc6 <__udivmodsi4>:
    4cc6:	a1 e2       	ldi	r26, 0x21	; 33
    4cc8:	1a 2e       	mov	r1, r26
    4cca:	aa 1b       	sub	r26, r26
    4ccc:	bb 1b       	sub	r27, r27
    4cce:	fd 01       	movw	r30, r26
    4cd0:	0d c0       	rjmp	.+26     	; 0x4cec <__udivmodsi4_ep>

00004cd2 <__udivmodsi4_loop>:
    4cd2:	aa 1f       	adc	r26, r26
    4cd4:	bb 1f       	adc	r27, r27
    4cd6:	ee 1f       	adc	r30, r30
    4cd8:	ff 1f       	adc	r31, r31
    4cda:	a2 17       	cp	r26, r18
    4cdc:	b3 07       	cpc	r27, r19
    4cde:	e4 07       	cpc	r30, r20
    4ce0:	f5 07       	cpc	r31, r21
    4ce2:	20 f0       	brcs	.+8      	; 0x4cec <__udivmodsi4_ep>
    4ce4:	a2 1b       	sub	r26, r18
    4ce6:	b3 0b       	sbc	r27, r19
    4ce8:	e4 0b       	sbc	r30, r20
    4cea:	f5 0b       	sbc	r31, r21

00004cec <__udivmodsi4_ep>:
    4cec:	66 1f       	adc	r22, r22
    4cee:	77 1f       	adc	r23, r23
    4cf0:	88 1f       	adc	r24, r24
    4cf2:	99 1f       	adc	r25, r25
    4cf4:	1a 94       	dec	r1
    4cf6:	69 f7       	brne	.-38     	; 0x4cd2 <__udivmodsi4_loop>
    4cf8:	60 95       	com	r22
    4cfa:	70 95       	com	r23
    4cfc:	80 95       	com	r24
    4cfe:	90 95       	com	r25
    4d00:	9b 01       	movw	r18, r22
    4d02:	ac 01       	movw	r20, r24
    4d04:	bd 01       	movw	r22, r26
    4d06:	cf 01       	movw	r24, r30
    4d08:	08 95       	ret

00004d0a <__prologue_saves__>:
    4d0a:	2f 92       	push	r2
    4d0c:	3f 92       	push	r3
    4d0e:	4f 92       	push	r4
    4d10:	5f 92       	push	r5
    4d12:	6f 92       	push	r6
    4d14:	7f 92       	push	r7
    4d16:	8f 92       	push	r8
    4d18:	9f 92       	push	r9
    4d1a:	af 92       	push	r10
    4d1c:	bf 92       	push	r11
    4d1e:	cf 92       	push	r12
    4d20:	df 92       	push	r13
    4d22:	ef 92       	push	r14
    4d24:	ff 92       	push	r15
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
    4d2a:	cf 93       	push	r28
    4d2c:	df 93       	push	r29
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	ca 1b       	sub	r28, r26
    4d34:	db 0b       	sbc	r29, r27
    4d36:	0f b6       	in	r0, 0x3f	; 63
    4d38:	f8 94       	cli
    4d3a:	de bf       	out	0x3e, r29	; 62
    4d3c:	0f be       	out	0x3f, r0	; 63
    4d3e:	cd bf       	out	0x3d, r28	; 61
    4d40:	09 94       	ijmp

00004d42 <__epilogue_restores__>:
    4d42:	2a 88       	ldd	r2, Y+18	; 0x12
    4d44:	39 88       	ldd	r3, Y+17	; 0x11
    4d46:	48 88       	ldd	r4, Y+16	; 0x10
    4d48:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d50:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d52:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d54:	b9 84       	ldd	r11, Y+9	; 0x09
    4d56:	c8 84       	ldd	r12, Y+8	; 0x08
    4d58:	df 80       	ldd	r13, Y+7	; 0x07
    4d5a:	ee 80       	ldd	r14, Y+6	; 0x06
    4d5c:	fd 80       	ldd	r15, Y+5	; 0x05
    4d5e:	0c 81       	ldd	r16, Y+4	; 0x04
    4d60:	1b 81       	ldd	r17, Y+3	; 0x03
    4d62:	aa 81       	ldd	r26, Y+2	; 0x02
    4d64:	b9 81       	ldd	r27, Y+1	; 0x01
    4d66:	ce 0f       	add	r28, r30
    4d68:	d1 1d       	adc	r29, r1
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	de bf       	out	0x3e, r29	; 62
    4d70:	0f be       	out	0x3f, r0	; 63
    4d72:	cd bf       	out	0x3d, r28	; 61
    4d74:	ed 01       	movw	r28, r26
    4d76:	08 95       	ret

00004d78 <strlen>:
    4d78:	fc 01       	movw	r30, r24
    4d7a:	01 90       	ld	r0, Z+
    4d7c:	00 20       	and	r0, r0
    4d7e:	e9 f7       	brne	.-6      	; 0x4d7a <strlen+0x2>
    4d80:	80 95       	com	r24
    4d82:	90 95       	com	r25
    4d84:	8e 0f       	add	r24, r30
    4d86:	9f 1f       	adc	r25, r31
    4d88:	08 95       	ret

00004d8a <ltoa>:
    4d8a:	fa 01       	movw	r30, r20
    4d8c:	cf 93       	push	r28
    4d8e:	ff 93       	push	r31
    4d90:	ef 93       	push	r30
    4d92:	22 30       	cpi	r18, 0x02	; 2
    4d94:	44 f1       	brlt	.+80     	; 0x4de6 <ltoa+0x5c>
    4d96:	25 32       	cpi	r18, 0x25	; 37
    4d98:	34 f5       	brge	.+76     	; 0x4de6 <ltoa+0x5c>
    4d9a:	c2 2f       	mov	r28, r18
    4d9c:	e8 94       	clt
    4d9e:	ca 30       	cpi	r28, 0x0A	; 10
    4da0:	49 f4       	brne	.+18     	; 0x4db4 <ltoa+0x2a>
    4da2:	97 fb       	bst	r25, 7
    4da4:	3e f4       	brtc	.+14     	; 0x4db4 <ltoa+0x2a>
    4da6:	90 95       	com	r25
    4da8:	80 95       	com	r24
    4daa:	70 95       	com	r23
    4dac:	61 95       	neg	r22
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	8f 4f       	sbci	r24, 0xFF	; 255
    4db2:	9f 4f       	sbci	r25, 0xFF	; 255
    4db4:	2c 2f       	mov	r18, r28
    4db6:	33 27       	eor	r19, r19
    4db8:	44 27       	eor	r20, r20
    4dba:	55 27       	eor	r21, r21
    4dbc:	ff 93       	push	r31
    4dbe:	ef 93       	push	r30
    4dc0:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__udivmodsi4>
    4dc4:	ef 91       	pop	r30
    4dc6:	ff 91       	pop	r31
    4dc8:	60 5d       	subi	r22, 0xD0	; 208
    4dca:	6a 33       	cpi	r22, 0x3A	; 58
    4dcc:	0c f0       	brlt	.+2      	; 0x4dd0 <ltoa+0x46>
    4dce:	69 5d       	subi	r22, 0xD9	; 217
    4dd0:	61 93       	st	Z+, r22
    4dd2:	b9 01       	movw	r22, r18
    4dd4:	ca 01       	movw	r24, r20
    4dd6:	60 50       	subi	r22, 0x00	; 0
    4dd8:	70 40       	sbci	r23, 0x00	; 0
    4dda:	80 40       	sbci	r24, 0x00	; 0
    4ddc:	90 40       	sbci	r25, 0x00	; 0
    4dde:	51 f7       	brne	.-44     	; 0x4db4 <ltoa+0x2a>
    4de0:	16 f4       	brtc	.+4      	; 0x4de6 <ltoa+0x5c>
    4de2:	cd e2       	ldi	r28, 0x2D	; 45
    4de4:	c1 93       	st	Z+, r28
    4de6:	10 82       	st	Z, r1
    4de8:	8f 91       	pop	r24
    4dea:	9f 91       	pop	r25
    4dec:	cf 91       	pop	r28
    4dee:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <strrev>

00004df2 <strrev>:
    4df2:	dc 01       	movw	r26, r24
    4df4:	fc 01       	movw	r30, r24
    4df6:	67 2f       	mov	r22, r23
    4df8:	71 91       	ld	r23, Z+
    4dfa:	77 23       	and	r23, r23
    4dfc:	e1 f7       	brne	.-8      	; 0x4df6 <strrev+0x4>
    4dfe:	32 97       	sbiw	r30, 0x02	; 2
    4e00:	04 c0       	rjmp	.+8      	; 0x4e0a <strrev+0x18>
    4e02:	7c 91       	ld	r23, X
    4e04:	6d 93       	st	X+, r22
    4e06:	70 83       	st	Z, r23
    4e08:	62 91       	ld	r22, -Z
    4e0a:	ae 17       	cp	r26, r30
    4e0c:	bf 07       	cpc	r27, r31
    4e0e:	c8 f3       	brcs	.-14     	; 0x4e02 <strrev+0x10>
    4e10:	08 95       	ret

00004e12 <_exit>:
    4e12:	f8 94       	cli

00004e14 <__stop_program>:
    4e14:	ff cf       	rjmp	.-2      	; 0x4e14 <__stop_program>
